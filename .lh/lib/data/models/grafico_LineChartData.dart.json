{
    "sourceFile": "lib/data/models/grafico_LineChartData.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1729032445440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1729032574456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n               Cotacao cotacao = entry.value;\r\n               return FlSpot(index.toDouble(), cotacao.valor ?? 0);\r\n             }).toList(),\r\n             isCurved: true,\r\n-            colors: [Colors.blue],\r\n+            color: Colors.blue, // Atualização da cor\r\n             dotData: FlDotData(show: true), // Mostrar pontos\r\n             belowBarData: BarAreaData(show: false),\r\n           ),\r\n         ],\r\n"
                },
                {
                    "date": 1729087140432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,69 +1,152 @@\n import 'package:flutter/material.dart';\r\n import 'package:fl_chart/fl_chart.dart';\r\n import 'package:task_manager_flutter/data/models/cotacao_model.dart';\r\n+import 'package:intl/intl.dart';\r\n \r\n-class CotacaoChart extends StatelessWidget {\r\n+class CotacaoChart extends StatefulWidget {\r\n   final List<Cotacao> cotacoes;\r\n \r\n   const CotacaoChart({Key? key, required this.cotacoes}) : super(key: key);\r\n \r\n   @override\r\n+  _CotacaoChartState createState() => _CotacaoChartState();\r\n+}\r\n+\r\n+class _CotacaoChartState extends State<CotacaoChart> {\r\n+  String filtroSelecionado = 'Última semana';\r\n+  List<Cotacao> cotacoesFiltradas = [];\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    filtrarCotacoes();\r\n+  }\r\n+\r\n+  void filtrarCotacoes() {\r\n+    final agora = DateTime.now();\r\n+\r\n+    setState(() {\r\n+      if (filtroSelecionado == 'Última semana') {\r\n+        cotacoesFiltradas = widget.cotacoes\r\n+            .where((c) =>\r\n+                c.dtCotacao != null &&\r\n+                c.dtCotacao!.isAfter(agora.subtract(const Duration(days: 7))))\r\n+            .toList();\r\n+      } else if (filtroSelecionado == 'Último mês') {\r\n+        cotacoesFiltradas = widget.cotacoes\r\n+            .where((c) =>\r\n+                c.dtCotacao != null &&\r\n+                c.dtCotacao!.isAfter(DateTime(agora.year, agora.month - 1, agora.day)))\r\n+            .toList();\r\n+      } else if (filtroSelecionado == 'Último ano') {\r\n+        cotacoesFiltradas = widget.cotacoes\r\n+            .where((c) =>\r\n+                c.dtCotacao != null &&\r\n+                c.dtCotacao!.isAfter(DateTime(agora.year - 1, agora.month, agora.day)))\r\n+            .toList();\r\n+      } else {\r\n+        cotacoesFiltradas = widget.cotacoes;\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  @override\r\n   Widget build(BuildContext context) {\r\n-    return LineChart(\r\n-      LineChartData(\r\n-        gridData: FlGridData(show: true),\r\n-        titlesData: FlTitlesData(\r\n-          bottomTitles: AxisTitles(\r\n-            sideTitles: SideTitles(\r\n-              showTitles: true,\r\n-              reservedSize: 38,\r\n-              getTitlesWidget: (value, meta) {\r\n-                final index = value.toInt();\r\n-                if (index >= 0 && index < cotacoes.length) {\r\n-                  return Text(\r\n-                    '${cotacoes[index].dtCotacao?.day}/${cotacoes[index].dtCotacao?.month}',\r\n-                    style: const TextStyle(fontSize: 10),\r\n-                  );\r\n-                }\r\n-                return const SizedBox.shrink();\r\n-              },\r\n+    return Column(\r\n+      children: [\r\n+        LineChart(\r\n+          LineChartData(\r\n+            gridData: FlGridData(show: true),\r\n+            titlesData: FlTitlesData(\r\n+              bottomTitles: AxisTitles(\r\n+                sideTitles: SideTitles(\r\n+                  showTitles: true,\r\n+                  reservedSize: 38,\r\n+                  getTitlesWidget: (value, meta) {\r\n+                    final index = value.toInt();\r\n+                    if (index >= 0 && index < cotacoesFiltradas.length) {\r\n+                      final data = cotacoesFiltradas[index].dtCotacao;\r\n+                      if (data != null) {\r\n+                        return Text(\r\n+                          DateFormat('dd/MM').format(data),\r\n+                          style: const TextStyle(fontSize: 10),\r\n+                        );\r\n+                      }\r\n+                    }\r\n+                    return const SizedBox.shrink();\r\n+                  },\r\n+                ),\r\n+              ),\r\n+              leftTitles: AxisTitles(\r\n+                sideTitles: SideTitles(\r\n+                  showTitles: true,\r\n+                  reservedSize: 40,\r\n+                  getTitlesWidget: (value, meta) {\r\n+                    return Text(\r\n+                      value.toString(),\r\n+                      style: const TextStyle(fontSize: 10),\r\n+                    );\r\n+                  },\r\n+                ),\r\n+              ),\r\n             ),\r\n+            borderData: FlBorderData(\r\n+              show: true,\r\n+              border: Border.all(color: Colors.blue, width: 1),\r\n+            ),\r\n+            lineBarsData: [\r\n+              LineChartBarData(\r\n+                spots: cotacoesFiltradas.asMap().entries.map((entry) {\r\n+                  int index = entry.key;\r\n+                  Cotacao cotacao = entry.value;\r\n+                  return FlSpot(index.toDouble(), cotacao.valor ?? 0);\r\n+                }).toList(),\r\n+                isCurved: true,\r\n+                color: Colors.blue,\r\n+                dotData: FlDotData(show: true),\r\n+                belowBarData: BarAreaData(show: false),\r\n+              ),\r\n+            ],\r\n+            minX: 0,\r\n+            maxX: cotacoesFiltradas.length.toDouble() - 1,\r\n+            minY: 0,\r\n+            maxY: cotacoesFiltradas.map((c) => c.valor ?? 0).reduce((a, b) => a > b ? a : b),\r\n           ),\r\n-          leftTitles: AxisTitles(\r\n-            sideTitles: SideTitles(\r\n-              showTitles: true,\r\n-              reservedSize: 40,\r\n-              getTitlesWidget: (value, meta) {\r\n-                return Text(\r\n-                  value.toString(),\r\n-                  style: const TextStyle(fontSize: 10),\r\n-                );\r\n+        ),\r\n+        const SizedBox(height: 20),\r\n+        Row(\r\n+          mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n+          children: [\r\n+            ElevatedButton(\r\n+              onPressed: () {\r\n+                setState(() {\r\n+                  filtroSelecionado = 'Última semana';\r\n+                  filtrarCotacoes();\r\n+                });\r\n               },\r\n+              child: const Text('Última semana'),\r\n             ),\r\n-          ),\r\n+            ElevatedButton(\r\n+              onPressed: () {\r\n+                setState(() {\r\n+                  filtroSelecionado = 'Último mês';\r\n+                  filtrarCotacoes();\r\n+                });\r\n+              },\r\n+              child: const Text('Último mês'),\r\n+            ),\r\n+            ElevatedButton(\r\n+              onPressed: () {\r\n+                setState(() {\r\n+                  filtroSelecionado = 'Último ano';\r\n+                  filtrarCotacoes();\r\n+                });\r\n+              },\r\n+              child: const Text('Último ano'),\r\n+            ),\r\n+          ],\r\n         ),\r\n-        borderData: FlBorderData(\r\n-          show: true,\r\n-          border: Border.all(color: Colors.blue, width: 1),\r\n-        ),\r\n-        lineBarsData: [\r\n-          LineChartBarData(\r\n-            spots: cotacoes.asMap().entries.map((entry) {\r\n-              int index = entry.key;\r\n-              Cotacao cotacao = entry.value;\r\n-              return FlSpot(index.toDouble(), cotacao.valor ?? 0);\r\n-            }).toList(),\r\n-            isCurved: true,\r\n-            color: Colors.blue, // Atualização da cor\r\n-            dotData: FlDotData(show: true), // Mostrar pontos\r\n-            belowBarData: BarAreaData(show: false),\r\n-          ),\r\n-        ],\r\n-        minX: 0,\r\n-        maxX: cotacoes.length.toDouble() - 1,\r\n-        minY: 0,\r\n-        maxY: cotacoes.map((c) => c.valor ?? 0).reduce((a, b) => a > b ? a : b),\r\n-      ),\r\n+      ],\r\n     );\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1729087813664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n \r\n   void filtrarCotacoes() {\r\n     final agora = DateTime.now();\r\n \r\n+\r\n     setState(() {\r\n       if (filtroSelecionado == 'Última semana') {\r\n         cotacoesFiltradas = widget.cotacoes\r\n             .where((c) =>\r\n"
                }
            ],
            "date": 1729032445440,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:fl_chart/fl_chart.dart';\r\nimport 'package:task_manager_flutter/data/models/cotacao_model.dart';\r\n\r\nclass CotacaoChart extends StatelessWidget {\r\n  final List<Cotacao> cotacoes;\r\n\r\n  const CotacaoChart({Key? key, required this.cotacoes}) : super(key: key);\r\n\r\n @override\r\n  Widget build(BuildContext context) {\r\n    return LineChart(\r\n      LineChartData(\r\n        gridData: FlGridData(show: true),\r\n        titlesData: FlTitlesData(\r\n          bottomTitles: AxisTitles(\r\n            sideTitles: SideTitles(\r\n              showTitles: true,\r\n              reservedSize: 38,\r\n              getTitlesWidget: (value, meta) {\r\n                final index = value.toInt();\r\n                if (index >= 0 && index < cotacoes.length) {\r\n                  return Text(\r\n                    '${cotacoes[index].dtCotacao?.day}/${cotacoes[index].dtCotacao?.month}',\r\n                    style: const TextStyle(fontSize: 10),\r\n                  );\r\n                }\r\n                return const SizedBox.shrink();\r\n              },\r\n            ),\r\n          ),\r\n          leftTitles: AxisTitles(\r\n            sideTitles: SideTitles(\r\n              showTitles: true,\r\n              reservedSize: 40,\r\n              getTitlesWidget: (value, meta) {\r\n                return Text(\r\n                  value.toString(),\r\n                  style: const TextStyle(fontSize: 10),\r\n                );\r\n              },\r\n            ),\r\n          ),\r\n        ),\r\n        borderData: FlBorderData(\r\n          show: true,\r\n          border: Border.all(color: Colors.blue, width: 1),\r\n        ),\r\n        lineBarsData: [\r\n          LineChartBarData(\r\n            spots: cotacoes.asMap().entries.map((entry) {\r\n              int index = entry.key;\r\n              Cotacao cotacao = entry.value;\r\n              return FlSpot(index.toDouble(), cotacao.valor ?? 0);\r\n            }).toList(),\r\n            isCurved: true,\r\n            colors: [Colors.blue],\r\n            dotData: FlDotData(show: true), // Mostrar pontos\r\n            belowBarData: BarAreaData(show: false),\r\n          ),\r\n        ],\r\n        minX: 0,\r\n        maxX: cotacoes.length.toDouble() - 1,\r\n        minY: 0,\r\n        maxY: cotacoes.map((c) => c.valor ?? 0).reduce((a, b) => a > b ? a : b),\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}