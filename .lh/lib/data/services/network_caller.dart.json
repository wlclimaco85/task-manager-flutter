{
    "sourceFile": "lib/data/services/network_caller.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1707252363953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1707252865746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,83 @@\n+import 'dart:convert';\r\n+import 'dart:developer';\r\n+import 'package:http/http.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:task_manager_flutter/app.dart';\r\n+import 'package:task_manager_flutter/data/models/auth_utility.dart';\r\n+import 'package:task_manager_flutter/data/models/network_response.dart';\r\n+import 'package:task_manager_flutter/ui/screens/auth_screens/login_screen.dart';\r\n+\r\n+\r\n+class NetworkCaller {\r\n+  Future<NetworkResponse> getRequest(String url) async {\r\n+    try {\r\n+      Response response = await get(Uri.parse(url),\r\n+          headers: {'Authorization': 'Bearer ${AuthUtility.userInfo.token}'});\r\n+      if (response.statusCode == 200) {\r\n+        return NetworkResponse(\r\n+            true, response.statusCode, jsonDecode(response.body));\r\n+      } else {\r\n+        return NetworkResponse(\r\n+          false,\r\n+          response.statusCode,\r\n+          null,\r\n+        );\r\n+      }\r\n+    } catch (e) {\r\n+      log(e.toString());\r\n+    }\r\n+    return NetworkResponse(\r\n+      false,\r\n+      -1,\r\n+      null,\r\n+    );\r\n+  }\r\n+\r\n+  Future<NetworkResponse> postRequest(\r\n+    String url,\r\n+    Map<String, dynamic>? body,\r\n+  ) async {\r\n+    try {\r\n+      Response response = await post(\r\n+        Uri.parse(url),\r\n+        headers: {\r\n+          'Content-Type': 'application/json',\r\n+          'Authorization': (url.contains('login') || url.contains('aluno/insert'))\r\n+              ? 'c2Fua2h5YTpzdXA='\r\n+              : 'Bearer ${AuthUtility.userInfo.token}',\r\n+          'Access-Control-Allow-Origin': '*',\r\n+          'Access-Control-Allow-Credentials': 'true',\r\n+          'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\r\n+          'Access-Control-Allow-Headers': 'Origin, Content-Type, Accept',\r\n+        },\r\n+        body: jsonEncode(body),\r\n+      );\r\n+      if (response.statusCode == 200 || response.statusCode == 201) {\r\n+        return NetworkResponse(\r\n+            true, response.statusCode, jsonDecode(response.body));\r\n+      } else {\r\n+        return NetworkResponse(\r\n+          false,\r\n+          response.statusCode,\r\n+          null,\r\n+        );\r\n+      }\r\n+    } catch (e) {\r\n+      log(e.toString());\r\n+    }\r\n+    return NetworkResponse(\r\n+      false,\r\n+      -1,\r\n+      null,\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+void moveToLogin() async {\r\n+  await AuthUtility.clearUserInfo();\r\n+  // ignore: use_build_context_synchronously\r\n+  Navigator.pushAndRemoveUntil(\r\n+      TaskManagerApp.globalKey.currentState!.context,\r\n+      MaterialPageRoute(builder: (context) => const LoginScreen()),\r\n+      (route) => false);\r\n+}\r\n"
                }
            ],
            "date": 1707252363953,
            "name": "Commit-0",
            "content": "import 'dart:convert';\r\nimport 'dart:developer';\r\nimport 'package:http/http.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:task_manager_flutter/app.dart';\r\nimport 'package:task_manager_flutter/data/models/auth_utility.dart';\r\nimport 'package:task_manager_flutter/data/models/network_response.dart';\r\nimport 'package:task_manager_flutter/ui/screens/auth_screens/login_screen.dart';\r\n\r\n\r\nclass NetworkCaller {\r\n  Future<NetworkResponse> getRequest(String url) async {\r\n    try {\r\n      Response response = await get(Uri.parse(url),\r\n          headers: {'Authorization': 'Bearer ${AuthUtility.userInfo.token}'});\r\n      if (response.statusCode == 200) {\r\n        return NetworkResponse(\r\n            true, response.statusCode, jsonDecode(response.body));\r\n      } else {\r\n        return NetworkResponse(\r\n          false,\r\n          response.statusCode,\r\n          null,\r\n        );\r\n      }\r\n    } catch (e) {\r\n      log(e.toString());\r\n    }\r\n    return NetworkResponse(\r\n      false,\r\n      -1,\r\n      null,\r\n    );\r\n  }\r\n\r\n  Future<NetworkResponse> postRequest(\r\n    String url,\r\n    Map<String, dynamic>? body,\r\n  ) async {\r\n    try {\r\n      Response response = await post(\r\n        Uri.parse(url),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': (url.contains('login') || url.contains('aluno/insert'))\r\n              ? 'c2Fua2h5YTpzdXA='\r\n              : 'Bearer ${AuthUtility.userInfo.token}',\r\n          'Access-Control-Allow-Origin': '*',\r\n          'Access-Control-Allow-Credentials': 'true',\r\n          'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\r\n          'Access-Control-Allow-Headers': 'Origin, Content-Type, Accept',\r\n        },\r\n        body: jsonEncode(body),\r\n      );\r\n      if (response.statusCode == 200 || response.statusCode == 201) {\r\n        return NetworkResponse(\r\n            true, response.statusCode, jsonDecode(response.body));\r\n      } else {\r\n        return NetworkResponse(\r\n          false,\r\n          response.statusCode,\r\n          null,\r\n        );\r\n      }\r\n    } catch (e) {\r\n      log(e.toString());\r\n    }\r\n    return NetworkResponse(\r\n      false,\r\n      -1,\r\n      null,\r\n    );\r\n  }\r\n}\r\n\r\nvoid moveToLogin() async {\r\n  await AuthUtility.clearUserInfo();\r\n  // ignore: use_build_context_synchronously\r\n  Navigator.pushAndRemoveUntil(\r\n      TaskManagerApp.globalKey.currentState!.context,\r\n      MaterialPageRoute(builder: (context) => const LoginScreen()),\r\n      (route) => false);\r\n}\r\n"
        }
    ]
}