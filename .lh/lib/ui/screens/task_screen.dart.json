{
    "sourceFile": "lib/ui/screens/task_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1708031052057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1708031052057,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:task_manager_flutter/data/utils/api_links.dart';\r\nimport 'package:task_manager_flutter/data/models/task_model.dart';\r\nimport 'package:task_manager_flutter/ui/widgets/user_banners.dart';\r\nimport 'package:task_manager_flutter/ui/screens/update_profile.dart';\r\nimport 'package:task_manager_flutter/ui/widgets/custom_menu_item.dart';\r\nimport 'package:task_manager_flutter/data/models/network_response.dart';\r\nimport 'package:task_manager_flutter/data/services/network_caller.dart';\r\nimport 'package:task_manager_flutter/data/models/summery_count_model.dart';\r\nimport 'package:task_manager_flutter/ui/widgets/status_change_botom_sheet.dart';\r\nimport 'package:task_manager_flutter/ui/screens/auth_screens/personal_screen.dart';\r\nimport 'package:task_manager_flutter/ui/screens/auth_screens/academia_screen.dart';\r\n// ignore_for_file: public_member_api_docs, sort_constructors_first\r\n\r\nclass TaskScreen extends StatefulWidget {\r\n  final String screenStatus;\r\n  final String apiLink;\r\n  final bool showAllSummeryCard;\r\n  final bool floatingActionButton;\r\n\r\n  const TaskScreen({\r\n    Key? key,\r\n    required this.screenStatus,\r\n    required this.apiLink,\r\n    this.showAllSummeryCard = false,\r\n    this.floatingActionButton = true,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  State<TaskScreen> createState() => _TaskScreenState();\r\n}\r\n\r\nclass _TaskScreenState extends State<TaskScreen> {\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n  }\r\n\r\n  TaskListModel _taskModel = TaskListModel();\r\n  bool isLoading = false;\r\n\r\n  Future<void> getTask() async {\r\n    if (mounted) {\r\n      setState(() {\r\n        isLoading = true;\r\n      });\r\n    }\r\n    final NetworkResponse response =\r\n        await NetworkCaller().getRequest(widget.apiLink);\r\n    if (response.isSuccess) {\r\n      _taskModel = TaskListModel.fromJson(response.body!);\r\n    } else {\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          const SnackBar(\r\n            content: Text(\"Failed to load data!\"),\r\n          ),\r\n        );\r\n      }\r\n    }\r\n    if (mounted) {\r\n      setState(() {\r\n        isLoading = false;\r\n      });\r\n    }\r\n  }\r\n\r\n  StatusCountModel statusCountModel = StatusCountModel();\r\n  int count1 = 0;\r\n  int count2 = 0;\r\n  int count3 = 0;\r\n  int count4 = 0;\r\n\r\n  Future<void> statusCount() async {\r\n    isLoading = true;\r\n    if (mounted) {\r\n      setState(() {});\r\n    }\r\n    final NetworkResponse newTaskResponse =\r\n        await NetworkCaller().getRequest(ApiLinks.newTaskStatus);\r\n    TaskListModel newTaskModel = TaskListModel.fromJson((newTaskResponse != null\r\n        ? newTaskResponse.body != null\r\n            ? newTaskResponse.body!\r\n            : {}\r\n        : {}));\r\n\r\n    if (mounted) {\r\n      setState(() {\r\n        count1 = newTaskModel.data?.length ?? 0;\r\n      });\r\n    }\r\n\r\n    final cancelledTaskResponse =\r\n        await NetworkCaller().getRequest(ApiLinks.cancelledTaskStatus);\r\n    TaskListModel cancelledTaskModel =\r\n        TaskListModel.fromJson(cancelledTaskResponse != null\r\n            ? cancelledTaskResponse.body != null\r\n                ? cancelledTaskResponse.body!\r\n                : {}\r\n            : {});\r\n    if (mounted) {\r\n      setState(() {\r\n        count2 = cancelledTaskModel.data?.length ?? 0;\r\n      });\r\n    }\r\n\r\n    final completedTaskResponse =\r\n        await NetworkCaller().getRequest(ApiLinks.completedTaskStatus);\r\n\r\n    TaskListModel completedTaskModel =\r\n        TaskListModel.fromJson(completedTaskResponse != null\r\n            ? completedTaskResponse.body != null\r\n                ? completedTaskResponse.body!\r\n                : {}\r\n            : {});\r\n    if (mounted) {\r\n      setState(() {\r\n        count3 = completedTaskModel.data?.length ?? 0;\r\n      });\r\n    }\r\n\r\n    final inProgressResponse =\r\n        await NetworkCaller().getRequest(ApiLinks.inProgressTaskStatus);\r\n    TaskListModel inProgressTaskModel =\r\n        TaskListModel.fromJson(inProgressResponse != null\r\n            ? inProgressResponse.body != null\r\n                ? inProgressResponse.body!\r\n                : {}\r\n            : {});\r\n    if (mounted) {\r\n      setState(() {\r\n        count4 = inProgressTaskModel.data?.length ?? 0;\r\n      });\r\n    }\r\n\r\n    isLoading = false;\r\n    if (mounted) {\r\n      setState(() {});\r\n    }\r\n  }\r\n\r\n  Future<void> deleteTask(String taskId) async {\r\n    if (mounted) {\r\n      setState(() {\r\n        isLoading = true;\r\n      });\r\n    }\r\n    final NetworkResponse response =\r\n        await NetworkCaller().getRequest(ApiLinks.deleteTask(taskId));\r\n    if (response.isSuccess) {\r\n      _taskModel.data!.removeWhere((element) => element.sId == taskId);\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n            const SnackBar(content: Text(\"Task Deleted Successfully!\")));\r\n      }\r\n    }\r\n    if (mounted) {\r\n      setState(() {\r\n        isLoading = false;\r\n      });\r\n    }\r\n  }\r\n\r\n  // int getCountForStatus(String status) {\r\n  //   final Data? statusData = statusCountModel.data?.firstWhere(\r\n  //     (data) => data.statusId == status,\r\n  //     orElse: () => Data(statusId: status, count: 0),\r\n  //   );\r\n  //   return statusData?.count ?? 0;\r\n  // }\r\n  bool standardSelected = false;\r\n  bool filledSelected = false;\r\n  bool tonalSelected = false;\r\n  bool outlinedSelected = false;\r\n  int count = 0;\r\n\r\n  void log(String message) => print(message);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      backgroundColor: const Color(0xFF340A9C),\r\n      appBar: userBanner(\r\n        context,\r\n        onTapped: () {\r\n          Navigator.push(\r\n              context,\r\n              MaterialPageRoute(\r\n                  builder: (context) => const UpdateProfileScreen()));\r\n        },\r\n      ),\r\n      body: Column(\r\n        mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n        children: <Widget>[\r\n          Row(\r\n            mainAxisAlignment: MainAxisAlignment.center,\r\n            children: <Widget>[\r\n              IconButtonExample(\r\n                text: 'Personal',\r\n                color: 'Screenshot_2.png',\r\n                onPresse: () {\r\n                  Navigator.push(\r\n                      context,\r\n                      MaterialPageRoute(\r\n                          builder: (context) => const PersonalScreen()));\r\n                },\r\n              ),\r\n              const SizedBox(width: 10),\r\n              IconButtonExample(\r\n                text: 'Academias',\r\n                color: 'images (1).png',\r\n                onPresse: () {\r\n                   Navigator.push(\r\n                      context,\r\n                      MaterialPageRoute(\r\n                          builder: (context) => const AcademiaScreen()));\r\n                },\r\n              ),\r\n              const SizedBox(width: 10),\r\n              IconButtonExample(\r\n                text: 'Treinos',\r\n                color: 'images.png',\r\n                onPresse: () {\r\n                  print('Treinos');\r\n                },\r\n              ),\r\n            ],\r\n          ),\r\n          Row(\r\n            mainAxisAlignment: MainAxisAlignment.center,\r\n            children: <Widget>[\r\n              IconButtonExample(\r\n                text: 'Suplemento',\r\n                color: 'images (2).png',\r\n                onPresse: () {\r\n                  print('Suplemento');\r\n                },\r\n              ),\r\n              const SizedBox(width: 10),\r\n              IconButtonExample(\r\n                text: 'Exames',\r\n                color: 'images (3).png',\r\n                onPresse: () {\r\n                  print('Exames');\r\n                },\r\n              ),\r\n              const SizedBox(width: 10),\r\n              IconButtonExample(\r\n                text: 'Dieta',\r\n                color: 'images (4).png',\r\n                onPresse: () {\r\n                  print('Dieta');\r\n                },\r\n              ),\r\n            ],\r\n          ),\r\n          Row(\r\n            mainAxisAlignment: MainAxisAlignment.center,\r\n            children: <Widget>[\r\n              IconButtonExample(\r\n                text: 'Medicamento',\r\n                color: 'Screenshot_3.png',\r\n                onPresse: () {\r\n                  print('Medicamento');\r\n                },\r\n              ),\r\n              const SizedBox(width: 10),\r\n              IconButtonExample(\r\n                text: 'Avaliação Fisica',\r\n                color: 'Screenshot_4.png',\r\n                onPresse: () {\r\n                  print('Avaliação Fisica');\r\n                },\r\n              ),\r\n              const SizedBox(width: 10),\r\n              IconButtonExample(\r\n                text: 'Pagamentos',\r\n                color: 'Screenshot_5.png',\r\n                onPresse: () {\r\n                  print('Pagamentos');\r\n                },\r\n              ),\r\n            ],\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Color _getChipColor() {\r\n    switch (widget.screenStatus) {\r\n      case \"New\":\r\n        return Colors.blue;\r\n      case \"Completed\":\r\n        return Colors.green;\r\n      case \"Cancelled\":\r\n        return Colors.red;\r\n      case \"In Progress\":\r\n        return Colors.pink.shade400;\r\n      default:\r\n        return Colors.grey;\r\n    }\r\n  }\r\n\r\n  void statusUpdateButtomSheet(TaskData task) {\r\n    showModalBottomSheet(\r\n      shape: ShapeBorder.lerp(\r\n          RoundedRectangleBorder(\r\n              borderRadius: BorderRadius.circular(10),\r\n              side: const BorderSide(color: Colors.black)),\r\n          RoundedRectangleBorder(\r\n              borderRadius: BorderRadius.circular(10),\r\n              side: const BorderSide(color: Colors.black)),\r\n          1)!,\r\n      context: context,\r\n      builder: (context) {\r\n        return UpdateStatus(\r\n          task: task,\r\n          onTaskComplete: () {\r\n            getTask();\r\n          },\r\n        );\r\n      },\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}