{
    "sourceFile": "lib/ui/screens/suplemento_add.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 18,
            "patches": [
                {
                    "date": 1708714484536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708714574271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,13 +43,17 @@\n     super.dispose();\r\n   }\r\n \r\n   final TextEditingController _nomeController = TextEditingController();\r\n-  final TextEditingController _emailController = TextEditingController();\r\n-  final TextEditingController _numCPFController = TextEditingController();\r\n-  final TextEditingController _telefoneController = TextEditingController();\r\n-  final TextEditingController _numCREFController = TextEditingController();\r\n-  final TextEditingController _vlrAulaController = TextEditingController();\r\n+  final TextEditingController _marcaController = TextEditingController();\r\n+  final TextEditingController _dataIniController = TextEditingController();\r\n+  final TextEditingController _dataFinController = TextEditingController();\r\n+  final TextEditingController _dataValController = TextEditingController();\r\n+  final TextEditingController _porcaoController = TextEditingController();\r\n+  final TextEditingController _idController = TextEditingController();\r\n+  final TextEditingController _valorController = TextEditingController();\r\n+  final TextEditingController _saborController = TextEditingController();\r\n+  final TextEditingController _observacaoController = TextEditingController();\r\n \r\n   Future<List<int>> getLostData() async {\r\n     final ImagePicker picker = ImagePicker();\r\n     final LostDataResponse response = await picker.retrieveLostData();\r\n"
                },
                {
                    "date": 1708714647521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,118 +69,8 @@\n       print(response.exception);\r\n     }\r\n   }\r\n \r\n-  String MapToJson(List<Map<String, dynamic>> map) {\r\n-    String res = \"\";\r\n-    bool isEntrou = false;\r\n-    for (var s in map) {\r\n-      res += \"{\";\r\n-\r\n-      for (String k in s.keys) {\r\n-        //\"[{\"id\":\"0\",\"diaAtene\":\"Segunda,Segunda,Terça\",\"dtInicio\":\"10:00\"\r\n-        res += '\"';\r\n-        res += k;\r\n-        res += '\":\"';\r\n-        res += (k == \"diaAtene\"\r\n-            ? getChaveDiasSemana(s[k].toString())\r\n-            : s[k].toString());\r\n-        res += '\",';\r\n-      }\r\n-      res = res.substring(0, res.length - 1);\r\n-\r\n-      res += \"},\";\r\n-      isEntrou = true;\r\n-    }\r\n-    if (isEntrou) {\r\n-      res = \"[${res.substring(0, res.length - 1)}]\";\r\n-    } else {\r\n-      res = \"\";\r\n-    }\r\n-\r\n-    return res;\r\n-  }\r\n-\r\n-  int diasSemanaEnum(String diasd) {\r\n-    late int dias;\r\n-    switch (diasd) {\r\n-      case \"Segunda\":\r\n-        dias = 9;\r\n-        break;\r\n-      case \"Terça\":\r\n-        dias = 1;\r\n-        break;\r\n-      case \"Quarta\":\r\n-        dias = 2;\r\n-        break;\r\n-      case \"Quinta\":\r\n-        dias = 3;\r\n-        break;\r\n-      case \"Sexta\":\r\n-        dias = 4;\r\n-        break;\r\n-      case \"Sabado\":\r\n-        dias = 5;\r\n-        break;\r\n-      case \"Domingo\":\r\n-        dias = 6;\r\n-        break;\r\n-      case \"Feriado\":\r\n-        dias = 7;\r\n-        break;\r\n-      default:\r\n-        dias = 8;\r\n-        break;\r\n-    }\r\n-    return dias;\r\n-  }\r\n-\r\n-  int sexoEnum(String diasd) {\r\n-    late int dias;\r\n-    switch (diasd) {\r\n-      case \"Masculino\":\r\n-        dias = 0;\r\n-        break;\r\n-      case \"Feminino\":\r\n-        dias = 1;\r\n-        break;\r\n-      default:\r\n-        dias = 3;\r\n-        break;\r\n-    }\r\n-    return dias;\r\n-  }\r\n-\r\n-  int getChaveSexo(String disas) {\r\n-    late int diasSemana = 3;\r\n-    late List<String> aa = disas.split(\",\");\r\n-    if (aa.length > 1) {\r\n-      return 2;\r\n-    }\r\n-    for (var element in aa) {\r\n-      diasSemana = sexoEnum(element);\r\n-    }\r\n-\r\n-    return diasSemana;\r\n-  }\r\n-\r\n-  String getChaveDiasSemana(String disas) {\r\n-    late String diasSemana = \"\";\r\n-    late List<String> aa = disas.split(\",\");\r\n-    late bool entrou = false;\r\n-    for (var element in aa) {\r\n-      diasSemana += \"${diasSemanaEnum(element)},\";\r\n-      entrou = true;\r\n-    }\r\n-    if (entrou) {\r\n-      diasSemana = diasSemana.substring(0, diasSemana.length - 1);\r\n-    } else {\r\n-      diasSemana = \"\";\r\n-    }\r\n-\r\n-    return diasSemana.replaceAll(\",\", \"\");\r\n-  }\r\n-\r\n   Future<void> updateProfile() async {\r\n     _signUpInProgress = true;\r\n     if (mounted) {\r\n       setState(() {});\r\n"
                },
                {
                    "date": 1708714664337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,20 +85,9 @@\n       // print(imageBytes);\r\n       //String base64Images = base64Encode(imageBytes);\r\n       base64Imagess = base64Encode(bytess);\r\n     }\r\n-    NumberToDay myObjectInstance = NumberToDay();\r\n-    List<Map<String, dynamic>> dayName = myObjectInstance.test();\r\n \r\n-    String aa = MapToJson(dayName);\r\n-\r\n-    GetDiasSemana myObjectInstances = GetDiasSemana();\r\n-    List<Map<String, dynamic>> dayNames = myObjectInstances.test();\r\n-\r\n-    GetFazAvaliacao myObjectInstancesd = GetFazAvaliacao();\r\n-    int fazAval = myObjectInstancesd.test();\r\n-    String bb = MapToJson(dayNames);\r\n-\r\n     Map<String, dynamic> requestBody = {\r\n       \"cref\": _numCREFController.text.trim(),\r\n       \"vlrAula\": _vlrAulaController.text.trim(),\r\n       \"fazAvaliacao\": fazAval,\r\n"
                },
                {
                    "date": 1708714814801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,30 +87,18 @@\n       base64Imagess = base64Encode(bytess);\r\n     }\r\n \r\n     Map<String, dynamic> requestBody = {\r\n-      \"cref\": _numCREFController.text.trim(),\r\n-      \"vlrAula\": _vlrAulaController.text.trim(),\r\n-      \"fazAvaliacao\": fazAval,\r\n-      \"sexoAtendimento\": sexoSelectedItems.isNotEmpty\r\n-          ? getChaveSexo(sexoSelectedItems.join(', ').toString())\r\n-          : \"\",\r\n-      \"codDadosPessoal\": {\r\n-        \"nome\": _nomeController.text.trim(),\r\n-        \"cpf\": _numCPFController.text.trim(),\r\n-        \"telefone1\": _telefoneController.text.trim(),\r\n-        \"email\": _emailController.text.trim(),\r\n-        \"tipoAluno\": 2,\r\n-        \"photo\": \"data:image/png;base64,$base64Imagess\",\r\n-      },\r\n-      \"planos\": jsonDecode(aa),\r\n-      \"horarios\": jsonDecode(bb),\r\n-      /* {\r\n-          \"titulo\": \"titulo\",\r\n-          \"descricao\": \"descricao\",\r\n-          \"qtdAula\": 1,\r\n-          \"valor\": 1.99,\r\n-        }*/\r\n+      \"nome\": _nomeController.text.trim(),\r\n+      \"marca\": _marcaController.text.trim(),\r\n+      \"dataIni\":  _dataIniController.text.trim(),\r\n+      \"dataFin\":  _dataFinController.text.trim(),\r\n+      \"dataVal\": _dataValController.text.trim(),\r\n+      \"porcao\": _porcaoController.text.trim(),\r\n+      \"id\": _idController.text.trim(),\r\n+      \"valor\": _valorController.text.trim(),\r\n+      \"sabor\": _saborController.text.trim(),\r\n+      \"photo\": \"data:image/png;base64,$base64Imagess\",\r\n     };\r\n     final NetworkResponse response =\r\n         await NetworkCaller().postRequest(ApiLinks.insertPersonal, requestBody);\r\n     _signUpInProgress = false;\r\n"
                },
                {
                    "date": 1708714840871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,9 +108,9 @@\n     if (response.isSuccess) {\r\n       if (mounted) {\r\n         ScaffoldMessenger.of(context).showSnackBar(\r\n           const SnackBar(\r\n-            content: Text(\"Profile update Successful\"),\r\n+            content: Text(\"Suplemento inserido com Success\"),\r\n           ),\r\n         );\r\n       }\r\n     } else {\r\n"
                },
                {
                    "date": 1708714867421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n     } else {\r\n       if (mounted) {\r\n         ScaffoldMessenger.of(context).showSnackBar(\r\n           const SnackBar(\r\n-            content: Text(\"Profile update Failed\"),\r\n+            content: Text(\"Erro ao inserir Suplemento\"),\r\n           ),\r\n         );\r\n       }\r\n     }\r\n"
                },
                {
                    "date": 1708714890095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,55 +123,8 @@\n       }\r\n     }\r\n   }\r\n \r\n-  final List<Map<String, dynamic>> _dataArray = []; //add this\r\n-  String? _data = \"\"; //add this\r\n-  void _onUpdate(int key, String value, chave) {\r\n-    void addData() {\r\n-      Map<String, dynamic> json = {\r\n-        'id': key,\r\n-        chave: value,\r\n-        chave: value,\r\n-        chave: value,\r\n-        chave: value\r\n-      };\r\n-      _dataArray.add(json);\r\n-      setState(() {\r\n-        _data = _dataArray.toString();\r\n-      });\r\n-    }\r\n-\r\n-    if (_dataArray.isEmpty) {\r\n-      addData();\r\n-    } else {\r\n-      _dataArray.asMap().entries.map((entry) {\r\n-        if (entry.key == key && entry.value == chave) {\r\n-          _dataArray[key][chave] = value;\r\n-        }\r\n-        print(entry.key);\r\n-        print(entry.value);\r\n-      });\r\n-\r\n-      for (var map in _dataArray) {\r\n-        if (map[\"id\"] == key) {\r\n-          _dataArray[key][chave] = value;\r\n-          setState(() {\r\n-            _data = _dataArray.toString();\r\n-          });\r\n-          break;\r\n-        }\r\n-      }\r\n-\r\n-      for (var map in _dataArray) {\r\n-        if (map[\"id\"] == key) {\r\n-          return;\r\n-        }\r\n-      }\r\n-      addData();\r\n-    }\r\n-  }\r\n-\r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return Scaffold(\r\n       appBar: userBanner(context, onTapped: () {\r\n"
                },
                {
                    "date": 1708715116105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,8 +123,55 @@\n       }\r\n     }\r\n   }\r\n \r\n+  final List<Map<String, dynamic>> _dataArray = []; //add this\r\n+  String? _data = \"\"; //add this\r\n+  void _onUpdate(int key, String value, chave) {\r\n+    void addData() {\r\n+      Map<String, dynamic> json = {\r\n+        'id': key,\r\n+        chave: value,\r\n+        chave: value,\r\n+        chave: value,\r\n+        chave: value\r\n+      };\r\n+      _dataArray.add(json);\r\n+      setState(() {\r\n+        _data = _dataArray.toString();\r\n+      });\r\n+    }\r\n+\r\n+    if (_dataArray.isEmpty) {\r\n+      addData();\r\n+    } else {\r\n+      _dataArray.asMap().entries.map((entry) {\r\n+        if (entry.key == key && entry.value == chave) {\r\n+          _dataArray[key][chave] = value;\r\n+        }\r\n+        print(entry.key);\r\n+        print(entry.value);\r\n+      });\r\n+\r\n+      for (var map in _dataArray) {\r\n+        if (map[\"id\"] == key) {\r\n+          _dataArray[key][chave] = value;\r\n+          setState(() {\r\n+            _data = _dataArray.toString();\r\n+          });\r\n+          break;\r\n+        }\r\n+      }\r\n+\r\n+      for (var map in _dataArray) {\r\n+        if (map[\"id\"] == key) {\r\n+          return;\r\n+        }\r\n+      }\r\n+      addData();\r\n+    }\r\n+  }\r\n+\r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return Scaffold(\r\n       appBar: userBanner(context, onTapped: () {\r\n@@ -155,42 +202,42 @@\n                   CustomInputForm(\r\n                     validator: EmailValidator.validate,\r\n                     focusNode: _focusNode,\r\n                     type: TextInputType.number,\r\n-                    keyField: \"Email\",\r\n-                    controller: _emailController,\r\n-                    onPressed: (vale) => _onUpdate(0, \"Email\", vale),\r\n+                    keyField: \"Marca\",\r\n+                    controller: _marcaController,\r\n+                    onPressed: (vale) => _onUpdate(0, \"Marca\", vale),\r\n                   ),\r\n                   CustomInputForm(\r\n                     validator: EmailValidator.validate,\r\n                     focusNode: _focusNode,\r\n                     type: TextInputType.number,\r\n-                    keyField: \"CPF\",\r\n-                    controller: _numCPFController,\r\n-                    onPressed: (vale) => _onUpdate(0, \"CPF\", vale),\r\n+                    keyField: \"Sabor\",\r\n+                    controller: _saborController,\r\n+                    onPressed: (vale) => _onUpdate(0, \"Sabor\", vale),\r\n                   ),\r\n                   CustomInputForm(\r\n                     validator: EmailValidator.validate,\r\n                     focusNode: _focusNode,\r\n-                    type: TextInputType.number,\r\n-                    keyField: \"Telefone\",\r\n-                    controller: _telefoneController,\r\n+                    type: TextInputType.datetime,\r\n+                    keyField: \"Data Começou a Tomar\",\r\n+                    controller: _dataIniController,\r\n                     onPressed: (vale) => _onUpdate(0, \"TELEFONE\", vale),\r\n                   ),\r\n                   CustomInputForm(\r\n                     validator: EmailValidator.validate,\r\n                     focusNode: _focusNode,\r\n-                    type: TextInputType.number,\r\n-                    keyField: \"Numero CREF\",\r\n-                    controller: _numCREFController,\r\n+                    type: TextInputType.datetime,\r\n+                    keyField: \"Data que acabou de Tomar\",\r\n+                    controller: _dataFinController,\r\n                     onPressed: (vale) => _onUpdate(0, \"CREF\", vale),\r\n                   ),\r\n                   CustomInputForm(\r\n                     validator: EmailValidator.validate,\r\n                     focusNode: _focusNode,\r\n-                    type: TextInputType.number,\r\n-                    keyField: \"Vlr Aula\",\r\n-                    controller: _vlrAulaController,\r\n+                    type: TextInputType.datetime,\r\n+                    keyField: \"Data Validade\",\r\n+                    controller: _dataValController,\r\n                     onPressed: (vale) => _onUpdate(0, \"VLRAULA\", vale),\r\n                   ),\r\n                   InkWell(\r\n                     onTap: () {\r\n"
                },
                {
                    "date": 1708715196643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -274,146 +274,8 @@\n                         ),\r\n                       ),\r\n                     ]),\r\n                   ),\r\n-                  const LabeledCheckbox(\r\n-                      value: true,\r\n-                      label: \"Sim\",\r\n-                      leadingCheckbox: false,\r\n-                      onChanged: null),\r\n-                  Padding(\r\n-                    padding: const EdgeInsets.symmetric(vertical: 3),\r\n-                    child: Center(\r\n-                      child: Column(\r\n-                        mainAxisAlignment: MainAxisAlignment.center,\r\n-                        children: [\r\n-                          DropdownButtonHideUnderline(\r\n-                            child: DropdownButton2<String>(\r\n-                              isExpanded: true,\r\n-                              hint: Text(\r\n-                                'Escolha o sexo atendimento',\r\n-                                style: TextStyle(\r\n-                                  fontSize: 14,\r\n-                                  color: CustomColors().getAppLabelBotton(),\r\n-                                ),\r\n-                              ),\r\n-                              items: sexo.map((item) {\r\n-                                return DropdownMenuItem(\r\n-                                  value: item,\r\n-                                  //disable default onTap to avoid closing menu when selecting an item\r\n-                                  enabled: false,\r\n-                                  child: StatefulBuilder(\r\n-                                    builder: (context, menuSetState) {\r\n-                                      final isSelected =\r\n-                                          sexoSelectedItems.contains(item);\r\n-                                      return InkWell(\r\n-                                        onTap: () {\r\n-                                          isSelected\r\n-                                              ? sexoSelectedItems.remove(item)\r\n-                                              : sexoSelectedItems.add(item);\r\n-                                          //This rebuilds the StatefulWidget to update the button's text\r\n-                                          setState(() {});\r\n-                                          //This rebuilds the dropdownMenu Widget to update the check mark\r\n-                                          menuSetState(() {});\r\n-                                        },\r\n-                                        child: Container(\r\n-                                          height: double.infinity,\r\n-                                          padding: const EdgeInsets.symmetric(\r\n-                                              horizontal: 16.0),\r\n-                                          child: Row(\r\n-                                            children: [\r\n-                                              if (isSelected)\r\n-                                                const Icon(\r\n-                                                    Icons.check_box_outlined)\r\n-                                              else\r\n-                                                const Icon(Icons\r\n-                                                    .check_box_outline_blank),\r\n-                                              const SizedBox(width: 16),\r\n-                                              Expanded(\r\n-                                                child: Text(\r\n-                                                  item,\r\n-                                                  style: const TextStyle(\r\n-                                                    fontSize: 14,\r\n-                                                  ),\r\n-                                                ),\r\n-                                              ),\r\n-                                            ],\r\n-                                          ),\r\n-                                        ),\r\n-                                      );\r\n-                                    },\r\n-                                  ),\r\n-                                );\r\n-                              }).toList(),\r\n-                              //Use last selected item as the current value so if we've limited menu height, it scroll to last item.\r\n-                              value: sexoSelectedItems.isEmpty\r\n-                                  ? null\r\n-                                  : sexoSelectedItems.last,\r\n-                              onChanged: (value) {},\r\n-                              selectedItemBuilder: (context) {\r\n-                                return sexoSelectedItems.map(\r\n-                                  (item) {\r\n-                                    return Container(\r\n-                                      alignment: AlignmentDirectional.center,\r\n-                                      child: Text(\r\n-                                        sexoSelectedItems.join(', '),\r\n-                                        style: const TextStyle(\r\n-                                          fontSize: 14,\r\n-                                          overflow: TextOverflow.ellipsis,\r\n-                                        ),\r\n-                                        maxLines: 1,\r\n-                                      ),\r\n-                                    );\r\n-                                  },\r\n-                                ).toList();\r\n-                              },\r\n-                              buttonStyleData: ButtonStyleData(\r\n-                                height: 50,\r\n-                                width: 280,\r\n-                                padding:\r\n-                                    const EdgeInsets.only(left: 14, right: 14),\r\n-                                decoration: BoxDecoration(\r\n-                                  borderRadius: BorderRadius.circular(14),\r\n-                                  border: Border.all(\r\n-                                    color: Colors.black26,\r\n-                                  ),\r\n-                                  color: CustomColors().getAppBotton(),\r\n-                                ),\r\n-                                elevation: 2,\r\n-                              ),\r\n-                              iconStyleData: const IconStyleData(\r\n-                                icon: Icon(\r\n-                                  Icons.arrow_forward_ios_outlined,\r\n-                                ),\r\n-                                iconSize: 14,\r\n-                                iconEnabledColor: Colors.yellow,\r\n-                                iconDisabledColor: Colors.grey,\r\n-                              ),\r\n-                              dropdownStyleData: DropdownStyleData(\r\n-                                maxHeight: 200,\r\n-                                width: 200,\r\n-                                decoration: BoxDecoration(\r\n-                                  borderRadius: BorderRadius.circular(14),\r\n-                                  color: CustomColors().getAppBotton(),\r\n-                                ),\r\n-                                offset: const Offset(-20, 0),\r\n-                                scrollbarTheme: ScrollbarThemeData(\r\n-                                  radius: const Radius.circular(40),\r\n-                                  thickness: MaterialStateProperty.all(6),\r\n-                                  thumbVisibility:\r\n-                                      MaterialStateProperty.all(true),\r\n-                                ),\r\n-                              ),\r\n-                              menuItemStyleData: const MenuItemStyleData(\r\n-                                height: 40,\r\n-                                padding: EdgeInsets.only(left: 14, right: 14),\r\n-                              ),\r\n-                            ),\r\n-                          ),\r\n-                        ],\r\n-                      ),\r\n-                    ),\r\n-                  ),\r\n                   const CustomComboBoxForm(),\r\n                   const CustomDiasBoxForm(),\r\n                 ],\r\n               ),\r\n"
                },
                {
                    "date": 1708715290497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -274,10 +274,24 @@\n                         ),\r\n                       ),\r\n                     ]),\r\n                   ),\r\n-                  const CustomComboBoxForm(),\r\n-                  const CustomDiasBoxForm(),\r\n+                  CustomInputForm(\r\n+                    validator: EmailValidator.validate,\r\n+                    focusNode: _focusNode,\r\n+                    type: TextInputType.datetime,\r\n+                    keyField: \"Porção\",\r\n+                    controller: _porcaoController,\r\n+                    onPressed: (vale) => _onUpdate(0, \"PORCAO\", vale),\r\n+                  ),\r\n+                  CustomInputForm(\r\n+                    validator: EmailValidator.validate,\r\n+                    focusNode: _focusNode,\r\n+                    type: TextInputType.datetime,\r\n+                    keyField: \"Valor\",\r\n+                    controller: _valorController,\r\n+                    onPressed: (vale) => _onUpdate(0, \"PORCAO\", vale),\r\n+                  ),\r\n                 ],\r\n               ),\r\n             ),\r\n           ),\r\n"
                },
                {
                    "date": 1708715324463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,10 +89,10 @@\n \r\n     Map<String, dynamic> requestBody = {\r\n       \"nome\": _nomeController.text.trim(),\r\n       \"marca\": _marcaController.text.trim(),\r\n-      \"dataIni\":  _dataIniController.text.trim(),\r\n-      \"dataFin\":  _dataFinController.text.trim(),\r\n+      \"dataIni\": _dataIniController.text.trim(),\r\n+      \"dataFin\": _dataFinController.text.trim(),\r\n       \"dataVal\": _dataValController.text.trim(),\r\n       \"porcao\": _porcaoController.text.trim(),\r\n       \"id\": _idController.text.trim(),\r\n       \"valor\": _valorController.text.trim(),\r\n"
                },
                {
                    "date": 1708718253043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n   final TextEditingController _porcaoController = TextEditingController();\r\n   final TextEditingController _idController = TextEditingController();\r\n   final TextEditingController _valorController = TextEditingController();\r\n   final TextEditingController _saborController = TextEditingController();\r\n-  final TextEditingController _observacaoController = TextEditingController();\r\n+  final TextEditingController _tamanhoController = TextEditingController();\r\n \r\n   Future<List<int>> getLostData() async {\r\n     final ImagePicker picker = ImagePicker();\r\n     final LostDataResponse response = await picker.retrieveLostData();\r\n@@ -92,8 +92,9 @@\n       \"marca\": _marcaController.text.trim(),\r\n       \"dataIni\": _dataIniController.text.trim(),\r\n       \"dataFin\": _dataFinController.text.trim(),\r\n       \"dataVal\": _dataValController.text.trim(),\r\n+      \"tamanho\": _tamanhoController.text.trim(),\r\n       \"porcao\": _porcaoController.text.trim(),\r\n       \"id\": _idController.text.trim(),\r\n       \"valor\": _valorController.text.trim(),\r\n       \"sabor\": _saborController.text.trim(),\r\n"
                },
                {
                    "date": 1708718285210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,8 +218,16 @@\n                   ),\r\n                   CustomInputForm(\r\n                     validator: EmailValidator.validate,\r\n                     focusNode: _focusNode,\r\n+                    type: TextInputType.number,\r\n+                    keyField: \"Tamanho\",\r\n+                    controller: _saborController,\r\n+                    onPressed: (vale) => _onUpdate(0, \"Sabor\", vale),\r\n+                  ),\r\n+                  CustomInputForm(\r\n+                    validator: EmailValidator.validate,\r\n+                    focusNode: _focusNode,\r\n                     type: TextInputType.datetime,\r\n                     keyField: \"Data Começou a Tomar\",\r\n                     controller: _dataIniController,\r\n                     onPressed: (vale) => _onUpdate(0, \"TELEFONE\", vale),\r\n@@ -279,9 +287,9 @@\n                   CustomInputForm(\r\n                     validator: EmailValidator.validate,\r\n                     focusNode: _focusNode,\r\n                     type: TextInputType.datetime,\r\n-                    keyField: \"Porção\",\r\n+                    keyField: \"Porção/Dia\",\r\n                     controller: _porcaoController,\r\n                     onPressed: (vale) => _onUpdate(0, \"PORCAO\", vale),\r\n                   ),\r\n                   CustomInputForm(\r\n"
                },
                {
                    "date": 1708720263597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n import 'package:task_manager_flutter/data/utils/personal_validation.dart';\r\n import 'package:task_manager_flutter/ui/widgets/custom_plano_box_form.dart';\r\n import 'package:task_manager_flutter/ui/widgets/custom_check_box_form.dart';\r\n import 'package:task_manager_flutter/ui/widgets/custom_horario_box_form.dart';\r\n+import '../../data/models/login_model.dart';\r\n \r\n class SuplementoModalAdd extends StatefulWidget {\r\n   const SuplementoModalAdd({super.key});\r\n   @override\r\n@@ -85,21 +86,23 @@\n       // print(imageBytes);\r\n       //String base64Images = base64Encode(imageBytes);\r\n       base64Imagess = base64Encode(bytess);\r\n     }\r\n-\r\n+    Data userInfo = AuthUtility.userInfo.data!;\r\n+    print(AuthUtility);\r\n     Map<String, dynamic> requestBody = {\r\n+      \"codAluno\" : \"{id : 1}\"\r\n       \"nome\": _nomeController.text.trim(),\r\n       \"marca\": _marcaController.text.trim(),\r\n-      \"dataIni\": _dataIniController.text.trim(),\r\n-      \"dataFin\": _dataFinController.text.trim(),\r\n+      \"dtInicio\": _dataIniController.text.trim(),\r\n+      \"dtFinal\": _dataFinController.text.trim(),\r\n       \"dataVal\": _dataValController.text.trim(),\r\n       \"tamanho\": _tamanhoController.text.trim(),\r\n-      \"porcao\": _porcaoController.text.trim(),\r\n+      \"dosagem\": _porcaoController.text.trim(),\r\n       \"id\": _idController.text.trim(),\r\n       \"valor\": _valorController.text.trim(),\r\n       \"sabor\": _saborController.text.trim(),\r\n-      \"photo\": \"data:image/png;base64,$base64Imagess\",\r\n+      \"foto\": \"data:image/png;base64,$base64Imagess\",\r\n     };\r\n     final NetworkResponse response =\r\n         await NetworkCaller().postRequest(ApiLinks.insertPersonal, requestBody);\r\n     _signUpInProgress = false;\r\n"
                },
                {
                    "date": 1708720295570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,18 @@\n import 'dart:convert';\r\n import 'dart:io' as io;\r\n import 'package:flutter/material.dart';\r\n import 'package:image_picker/image_picker.dart';\r\n-import 'package:dropdown_button2/dropdown_button2.dart';\r\n import 'package:task_manager_flutter/data/utils/api_links.dart';\r\n import 'package:task_manager_flutter/ui/widgets/user_banners.dart';\r\n import 'package:task_manager_flutter/ui/screens/update_profile.dart';\r\n import 'package:task_manager_flutter/ui/widgets/custom_input_form.dart';\r\n import 'package:task_manager_flutter/data/constants/custom_colors.dart';\r\n import 'package:task_manager_flutter/data/models/network_response.dart';\r\n import 'package:task_manager_flutter/data/services/network_caller.dart';\r\n import 'package:task_manager_flutter/data/utils/personal_validation.dart';\r\n-import 'package:task_manager_flutter/ui/widgets/custom_plano_box_form.dart';\r\n-import 'package:task_manager_flutter/ui/widgets/custom_check_box_form.dart';\r\n-import 'package:task_manager_flutter/ui/widgets/custom_horario_box_form.dart';\r\n import '../../data/models/login_model.dart';\r\n+import 'package:task_manager_flutter/data/models/auth_utility.dart';\r\n \r\n class SuplementoModalAdd extends StatefulWidget {\r\n   const SuplementoModalAdd({super.key});\r\n   @override\r\n"
                },
                {
                    "date": 1708720307956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n     }\r\n     Data userInfo = AuthUtility.userInfo.data!;\r\n     print(AuthUtility);\r\n     Map<String, dynamic> requestBody = {\r\n-      \"codAluno\" : \"{id : 1}\"\r\n+      \"codAluno\" : \"{id : 1}\",\r\n       \"nome\": _nomeController.text.trim(),\r\n       \"marca\": _marcaController.text.trim(),\r\n       \"dtInicio\": _dataIniController.text.trim(),\r\n       \"dtFinal\": _dataFinController.text.trim(),\r\n"
                },
                {
                    "date": 1708720324603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n     }\r\n     Data userInfo = AuthUtility.userInfo.data!;\r\n     print(userInfo);\r\n     Map<String, dynamic> requestBody = {\r\n-      \"codAluno\": \"{id : 1}\",\r\n+      \"codAluno\": \"{id : $userInfo.id}\",\r\n       \"nome\": _nomeController.text.trim(),\r\n       \"marca\": _marcaController.text.trim(),\r\n       \"dtInicio\": _dataIniController.text.trim(),\r\n       \"dtFinal\": _dataFinController.text.trim(),\r\n"
                },
                {
                    "date": 1708723208154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,27 +202,27 @@\n                   ),\r\n                   CustomInputForm(\r\n                     validator: EmailValidator.validate,\r\n                     focusNode: _focusNode,\r\n-                    type: TextInputType.number,\r\n+                    type: TextInputType.text,\r\n                     keyField: \"Marca\",\r\n                     controller: _marcaController,\r\n                     onPressed: (vale) => _onUpdate(0, \"Marca\", vale),\r\n                   ),\r\n                   CustomInputForm(\r\n                     validator: EmailValidator.validate,\r\n                     focusNode: _focusNode,\r\n-                    type: TextInputType.number,\r\n+                    type: TextInputType.text,\r\n                     keyField: \"Sabor\",\r\n                     controller: _saborController,\r\n                     onPressed: (vale) => _onUpdate(0, \"Sabor\", vale),\r\n                   ),\r\n                   CustomInputForm(\r\n                     validator: EmailValidator.validate,\r\n                     focusNode: _focusNode,\r\n-                    type: TextInputType.number,\r\n+                    type: TextInputType.text,\r\n                     keyField: \"Tamanho\",\r\n-                    controller: _saborController,\r\n+                    controller: _tamanhoController,\r\n                     onPressed: (vale) => _onUpdate(0, \"Sabor\", vale),\r\n                   ),\r\n                   CustomInputForm(\r\n                     validator: EmailValidator.validate,\r\n"
                }
            ],
            "date": 1708714484536,
            "name": "Commit-0",
            "content": "import 'dart:convert';\r\nimport 'dart:io' as io;\r\nimport 'package:flutter/material.dart';\r\nimport 'package:image_picker/image_picker.dart';\r\nimport 'package:dropdown_button2/dropdown_button2.dart';\r\nimport 'package:task_manager_flutter/data/utils/api_links.dart';\r\nimport 'package:task_manager_flutter/ui/widgets/user_banners.dart';\r\nimport 'package:task_manager_flutter/ui/screens/update_profile.dart';\r\nimport 'package:task_manager_flutter/ui/widgets/custom_input_form.dart';\r\nimport 'package:task_manager_flutter/data/constants/custom_colors.dart';\r\nimport 'package:task_manager_flutter/data/models/network_response.dart';\r\nimport 'package:task_manager_flutter/data/services/network_caller.dart';\r\nimport 'package:task_manager_flutter/data/utils/personal_validation.dart';\r\nimport 'package:task_manager_flutter/ui/widgets/custom_plano_box_form.dart';\r\nimport 'package:task_manager_flutter/ui/widgets/custom_check_box_form.dart';\r\nimport 'package:task_manager_flutter/ui/widgets/custom_horario_box_form.dart';\r\n\r\nclass SuplementoModalAdd extends StatefulWidget {\r\n  const SuplementoModalAdd({super.key});\r\n  @override\r\n  State<SuplementoModalAdd> createState() => _SuplementoModalAddState();\r\n}\r\n\r\nclass _SuplementoModalAddState extends State<SuplementoModalAdd> {\r\n  final TextEditingController _nameController = TextEditingController();\r\n\r\n  late GlobalKey<FormState> _formKey;\r\n  late FocusNode _focusNode;\r\n  XFile? pickImage;\r\n  String? base64Image;\r\n  bool _signUpInProgress = false;\r\n\r\n  @override\r\n  void initState() {\r\n    _formKey = GlobalKey<FormState>();\r\n    _focusNode = FocusNode();\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _focusNode.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  final TextEditingController _nomeController = TextEditingController();\r\n  final TextEditingController _emailController = TextEditingController();\r\n  final TextEditingController _numCPFController = TextEditingController();\r\n  final TextEditingController _telefoneController = TextEditingController();\r\n  final TextEditingController _numCREFController = TextEditingController();\r\n  final TextEditingController _vlrAulaController = TextEditingController();\r\n\r\n  Future<List<int>> getLostData() async {\r\n    final ImagePicker picker = ImagePicker();\r\n    final LostDataResponse response = await picker.retrieveLostData();\r\n    final XFile? files = response.file;\r\n    final XFile? photo;\r\n    if (files != null) {\r\n      photo = pickImage;\r\n      return files.readAsBytes();\r\n    } else {\r\n      const asciiDecoder = AsciiDecoder();\r\n      final asciiValues = [104, 101, 108, 108, 111];\r\n      return asciiValues;\r\n      print(response.exception);\r\n    }\r\n  }\r\n\r\n  String MapToJson(List<Map<String, dynamic>> map) {\r\n    String res = \"\";\r\n    bool isEntrou = false;\r\n    for (var s in map) {\r\n      res += \"{\";\r\n\r\n      for (String k in s.keys) {\r\n        //\"[{\"id\":\"0\",\"diaAtene\":\"Segunda,Segunda,Terça\",\"dtInicio\":\"10:00\"\r\n        res += '\"';\r\n        res += k;\r\n        res += '\":\"';\r\n        res += (k == \"diaAtene\"\r\n            ? getChaveDiasSemana(s[k].toString())\r\n            : s[k].toString());\r\n        res += '\",';\r\n      }\r\n      res = res.substring(0, res.length - 1);\r\n\r\n      res += \"},\";\r\n      isEntrou = true;\r\n    }\r\n    if (isEntrou) {\r\n      res = \"[${res.substring(0, res.length - 1)}]\";\r\n    } else {\r\n      res = \"\";\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  int diasSemanaEnum(String diasd) {\r\n    late int dias;\r\n    switch (diasd) {\r\n      case \"Segunda\":\r\n        dias = 9;\r\n        break;\r\n      case \"Terça\":\r\n        dias = 1;\r\n        break;\r\n      case \"Quarta\":\r\n        dias = 2;\r\n        break;\r\n      case \"Quinta\":\r\n        dias = 3;\r\n        break;\r\n      case \"Sexta\":\r\n        dias = 4;\r\n        break;\r\n      case \"Sabado\":\r\n        dias = 5;\r\n        break;\r\n      case \"Domingo\":\r\n        dias = 6;\r\n        break;\r\n      case \"Feriado\":\r\n        dias = 7;\r\n        break;\r\n      default:\r\n        dias = 8;\r\n        break;\r\n    }\r\n    return dias;\r\n  }\r\n\r\n  int sexoEnum(String diasd) {\r\n    late int dias;\r\n    switch (diasd) {\r\n      case \"Masculino\":\r\n        dias = 0;\r\n        break;\r\n      case \"Feminino\":\r\n        dias = 1;\r\n        break;\r\n      default:\r\n        dias = 3;\r\n        break;\r\n    }\r\n    return dias;\r\n  }\r\n\r\n  int getChaveSexo(String disas) {\r\n    late int diasSemana = 3;\r\n    late List<String> aa = disas.split(\",\");\r\n    if (aa.length > 1) {\r\n      return 2;\r\n    }\r\n    for (var element in aa) {\r\n      diasSemana = sexoEnum(element);\r\n    }\r\n\r\n    return diasSemana;\r\n  }\r\n\r\n  String getChaveDiasSemana(String disas) {\r\n    late String diasSemana = \"\";\r\n    late List<String> aa = disas.split(\",\");\r\n    late bool entrou = false;\r\n    for (var element in aa) {\r\n      diasSemana += \"${diasSemanaEnum(element)},\";\r\n      entrou = true;\r\n    }\r\n    if (entrou) {\r\n      diasSemana = diasSemana.substring(0, diasSemana.length - 1);\r\n    } else {\r\n      diasSemana = \"\";\r\n    }\r\n\r\n    return diasSemana.replaceAll(\",\", \"\");\r\n  }\r\n\r\n  Future<void> updateProfile() async {\r\n    _signUpInProgress = true;\r\n    if (mounted) {\r\n      setState(() {});\r\n    }\r\n    String base64Imagess = \"\";\r\n    if (pickImage != null) {\r\n      // var bytes = File(pickImage!.path).readAsBytesSync();\r\n      // String base64Image = base64Encode(bytes);\r\n      print('upload proccess started');\r\n      final bytess = io.File(pickImage!.path).readAsBytesSync();\r\n      //  List<int> imageBytes = pickImage?.readAsBytesSync();\r\n      // print(imageBytes);\r\n      //String base64Images = base64Encode(imageBytes);\r\n      base64Imagess = base64Encode(bytess);\r\n    }\r\n    NumberToDay myObjectInstance = NumberToDay();\r\n    List<Map<String, dynamic>> dayName = myObjectInstance.test();\r\n\r\n    String aa = MapToJson(dayName);\r\n\r\n    GetDiasSemana myObjectInstances = GetDiasSemana();\r\n    List<Map<String, dynamic>> dayNames = myObjectInstances.test();\r\n\r\n    GetFazAvaliacao myObjectInstancesd = GetFazAvaliacao();\r\n    int fazAval = myObjectInstancesd.test();\r\n    String bb = MapToJson(dayNames);\r\n\r\n    Map<String, dynamic> requestBody = {\r\n      \"cref\": _numCREFController.text.trim(),\r\n      \"vlrAula\": _vlrAulaController.text.trim(),\r\n      \"fazAvaliacao\": fazAval,\r\n      \"sexoAtendimento\": sexoSelectedItems.isNotEmpty\r\n          ? getChaveSexo(sexoSelectedItems.join(', ').toString())\r\n          : \"\",\r\n      \"codDadosPessoal\": {\r\n        \"nome\": _nomeController.text.trim(),\r\n        \"cpf\": _numCPFController.text.trim(),\r\n        \"telefone1\": _telefoneController.text.trim(),\r\n        \"email\": _emailController.text.trim(),\r\n        \"tipoAluno\": 2,\r\n        \"photo\": \"data:image/png;base64,$base64Imagess\",\r\n      },\r\n      \"planos\": jsonDecode(aa),\r\n      \"horarios\": jsonDecode(bb),\r\n      /* {\r\n          \"titulo\": \"titulo\",\r\n          \"descricao\": \"descricao\",\r\n          \"qtdAula\": 1,\r\n          \"valor\": 1.99,\r\n        }*/\r\n    };\r\n    final NetworkResponse response =\r\n        await NetworkCaller().postRequest(ApiLinks.insertPersonal, requestBody);\r\n    _signUpInProgress = false;\r\n    if (mounted) {\r\n      setState(() {});\r\n    }\r\n    if (response.isSuccess) {\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          const SnackBar(\r\n            content: Text(\"Profile update Successful\"),\r\n          ),\r\n        );\r\n      }\r\n    } else {\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          const SnackBar(\r\n            content: Text(\"Profile update Failed\"),\r\n          ),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  final List<Map<String, dynamic>> _dataArray = []; //add this\r\n  String? _data = \"\"; //add this\r\n  void _onUpdate(int key, String value, chave) {\r\n    void addData() {\r\n      Map<String, dynamic> json = {\r\n        'id': key,\r\n        chave: value,\r\n        chave: value,\r\n        chave: value,\r\n        chave: value\r\n      };\r\n      _dataArray.add(json);\r\n      setState(() {\r\n        _data = _dataArray.toString();\r\n      });\r\n    }\r\n\r\n    if (_dataArray.isEmpty) {\r\n      addData();\r\n    } else {\r\n      _dataArray.asMap().entries.map((entry) {\r\n        if (entry.key == key && entry.value == chave) {\r\n          _dataArray[key][chave] = value;\r\n        }\r\n        print(entry.key);\r\n        print(entry.value);\r\n      });\r\n\r\n      for (var map in _dataArray) {\r\n        if (map[\"id\"] == key) {\r\n          _dataArray[key][chave] = value;\r\n          setState(() {\r\n            _data = _dataArray.toString();\r\n          });\r\n          break;\r\n        }\r\n      }\r\n\r\n      for (var map in _dataArray) {\r\n        if (map[\"id\"] == key) {\r\n          return;\r\n        }\r\n      }\r\n      addData();\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: userBanner(context, onTapped: () {\r\n        Navigator.push(\r\n            context,\r\n            MaterialPageRoute(\r\n                builder: (context) => const UpdateProfileScreen()));\r\n      }),\r\n      body: Form(\r\n        key: _formKey,\r\n        child: Padding(\r\n          padding: const EdgeInsets.all(18),\r\n          child: Container(\r\n            alignment: Alignment.topCenter,\r\n            color: CustomColors().getAppFundoPage(),\r\n            child: SingleChildScrollView(\r\n              child: Column(\r\n                mainAxisAlignment: MainAxisAlignment.center,\r\n                children: <Widget>[\r\n                  CustomInputForm(\r\n                    validator: EmailValidator.validate,\r\n                    focusNode: _focusNode,\r\n                    type: TextInputType.text,\r\n                    keyField: \"Nome\",\r\n                    controller: _nomeController,\r\n                    onPressed: (vale) => _onUpdate(0, \"Nome\", vale),\r\n                  ),\r\n                  CustomInputForm(\r\n                    validator: EmailValidator.validate,\r\n                    focusNode: _focusNode,\r\n                    type: TextInputType.number,\r\n                    keyField: \"Email\",\r\n                    controller: _emailController,\r\n                    onPressed: (vale) => _onUpdate(0, \"Email\", vale),\r\n                  ),\r\n                  CustomInputForm(\r\n                    validator: EmailValidator.validate,\r\n                    focusNode: _focusNode,\r\n                    type: TextInputType.number,\r\n                    keyField: \"CPF\",\r\n                    controller: _numCPFController,\r\n                    onPressed: (vale) => _onUpdate(0, \"CPF\", vale),\r\n                  ),\r\n                  CustomInputForm(\r\n                    validator: EmailValidator.validate,\r\n                    focusNode: _focusNode,\r\n                    type: TextInputType.number,\r\n                    keyField: \"Telefone\",\r\n                    controller: _telefoneController,\r\n                    onPressed: (vale) => _onUpdate(0, \"TELEFONE\", vale),\r\n                  ),\r\n                  CustomInputForm(\r\n                    validator: EmailValidator.validate,\r\n                    focusNode: _focusNode,\r\n                    type: TextInputType.number,\r\n                    keyField: \"Numero CREF\",\r\n                    controller: _numCREFController,\r\n                    onPressed: (vale) => _onUpdate(0, \"CREF\", vale),\r\n                  ),\r\n                  CustomInputForm(\r\n                    validator: EmailValidator.validate,\r\n                    focusNode: _focusNode,\r\n                    type: TextInputType.number,\r\n                    keyField: \"Vlr Aula\",\r\n                    controller: _vlrAulaController,\r\n                    onPressed: (vale) => _onUpdate(0, \"VLRAULA\", vale),\r\n                  ),\r\n                  InkWell(\r\n                    onTap: () {\r\n                      imagePicked();\r\n                    },\r\n                    child: Row(children: [\r\n                      Container(\r\n                        padding: const EdgeInsets.all(18),\r\n                        decoration: const BoxDecoration(\r\n                          color: Colors.grey,\r\n                          borderRadius: BorderRadius.only(\r\n                            topLeft: Radius.circular(8),\r\n                            bottomLeft: Radius.circular(8),\r\n                          ),\r\n                        ),\r\n                        child: const Text(\"Foto\"),\r\n                      ),\r\n                      Expanded(\r\n                        child: Container(\r\n                          padding: const EdgeInsets.all(18),\r\n                          decoration: BoxDecoration(\r\n                            color: CustomColors().getAppFundoImput(),\r\n                            borderRadius: const BorderRadius.only(\r\n                              topRight: Radius.circular(8),\r\n                              bottomRight: Radius.circular(8),\r\n                            ),\r\n                          ),\r\n                          child: Text(\r\n                            pickImage?.name ?? \"\",\r\n                            maxLines: 1,\r\n                            style: const TextStyle(\r\n                                overflow: TextOverflow.ellipsis),\r\n                          ),\r\n                        ),\r\n                      ),\r\n                    ]),\r\n                  ),\r\n                  const LabeledCheckbox(\r\n                      value: true,\r\n                      label: \"Sim\",\r\n                      leadingCheckbox: false,\r\n                      onChanged: null),\r\n                  Padding(\r\n                    padding: const EdgeInsets.symmetric(vertical: 3),\r\n                    child: Center(\r\n                      child: Column(\r\n                        mainAxisAlignment: MainAxisAlignment.center,\r\n                        children: [\r\n                          DropdownButtonHideUnderline(\r\n                            child: DropdownButton2<String>(\r\n                              isExpanded: true,\r\n                              hint: Text(\r\n                                'Escolha o sexo atendimento',\r\n                                style: TextStyle(\r\n                                  fontSize: 14,\r\n                                  color: CustomColors().getAppLabelBotton(),\r\n                                ),\r\n                              ),\r\n                              items: sexo.map((item) {\r\n                                return DropdownMenuItem(\r\n                                  value: item,\r\n                                  //disable default onTap to avoid closing menu when selecting an item\r\n                                  enabled: false,\r\n                                  child: StatefulBuilder(\r\n                                    builder: (context, menuSetState) {\r\n                                      final isSelected =\r\n                                          sexoSelectedItems.contains(item);\r\n                                      return InkWell(\r\n                                        onTap: () {\r\n                                          isSelected\r\n                                              ? sexoSelectedItems.remove(item)\r\n                                              : sexoSelectedItems.add(item);\r\n                                          //This rebuilds the StatefulWidget to update the button's text\r\n                                          setState(() {});\r\n                                          //This rebuilds the dropdownMenu Widget to update the check mark\r\n                                          menuSetState(() {});\r\n                                        },\r\n                                        child: Container(\r\n                                          height: double.infinity,\r\n                                          padding: const EdgeInsets.symmetric(\r\n                                              horizontal: 16.0),\r\n                                          child: Row(\r\n                                            children: [\r\n                                              if (isSelected)\r\n                                                const Icon(\r\n                                                    Icons.check_box_outlined)\r\n                                              else\r\n                                                const Icon(Icons\r\n                                                    .check_box_outline_blank),\r\n                                              const SizedBox(width: 16),\r\n                                              Expanded(\r\n                                                child: Text(\r\n                                                  item,\r\n                                                  style: const TextStyle(\r\n                                                    fontSize: 14,\r\n                                                  ),\r\n                                                ),\r\n                                              ),\r\n                                            ],\r\n                                          ),\r\n                                        ),\r\n                                      );\r\n                                    },\r\n                                  ),\r\n                                );\r\n                              }).toList(),\r\n                              //Use last selected item as the current value so if we've limited menu height, it scroll to last item.\r\n                              value: sexoSelectedItems.isEmpty\r\n                                  ? null\r\n                                  : sexoSelectedItems.last,\r\n                              onChanged: (value) {},\r\n                              selectedItemBuilder: (context) {\r\n                                return sexoSelectedItems.map(\r\n                                  (item) {\r\n                                    return Container(\r\n                                      alignment: AlignmentDirectional.center,\r\n                                      child: Text(\r\n                                        sexoSelectedItems.join(', '),\r\n                                        style: const TextStyle(\r\n                                          fontSize: 14,\r\n                                          overflow: TextOverflow.ellipsis,\r\n                                        ),\r\n                                        maxLines: 1,\r\n                                      ),\r\n                                    );\r\n                                  },\r\n                                ).toList();\r\n                              },\r\n                              buttonStyleData: ButtonStyleData(\r\n                                height: 50,\r\n                                width: 280,\r\n                                padding:\r\n                                    const EdgeInsets.only(left: 14, right: 14),\r\n                                decoration: BoxDecoration(\r\n                                  borderRadius: BorderRadius.circular(14),\r\n                                  border: Border.all(\r\n                                    color: Colors.black26,\r\n                                  ),\r\n                                  color: CustomColors().getAppBotton(),\r\n                                ),\r\n                                elevation: 2,\r\n                              ),\r\n                              iconStyleData: const IconStyleData(\r\n                                icon: Icon(\r\n                                  Icons.arrow_forward_ios_outlined,\r\n                                ),\r\n                                iconSize: 14,\r\n                                iconEnabledColor: Colors.yellow,\r\n                                iconDisabledColor: Colors.grey,\r\n                              ),\r\n                              dropdownStyleData: DropdownStyleData(\r\n                                maxHeight: 200,\r\n                                width: 200,\r\n                                decoration: BoxDecoration(\r\n                                  borderRadius: BorderRadius.circular(14),\r\n                                  color: CustomColors().getAppBotton(),\r\n                                ),\r\n                                offset: const Offset(-20, 0),\r\n                                scrollbarTheme: ScrollbarThemeData(\r\n                                  radius: const Radius.circular(40),\r\n                                  thickness: MaterialStateProperty.all(6),\r\n                                  thumbVisibility:\r\n                                      MaterialStateProperty.all(true),\r\n                                ),\r\n                              ),\r\n                              menuItemStyleData: const MenuItemStyleData(\r\n                                height: 40,\r\n                                padding: EdgeInsets.only(left: 14, right: 14),\r\n                              ),\r\n                            ),\r\n                          ),\r\n                        ],\r\n                      ),\r\n                    ),\r\n                  ),\r\n                  const CustomComboBoxForm(),\r\n                  const CustomDiasBoxForm(),\r\n                ],\r\n              ),\r\n            ),\r\n          ),\r\n        ),\r\n      ),\r\n      floatingActionButton: FloatingActionButton(\r\n        onPressed: () {\r\n          final form = _formKey.currentState!;\r\n          form.validate();\r\n          _focusNode.requestFocus();\r\n          updateProfile();\r\n        },\r\n        child: const Icon(Icons.check),\r\n      ),\r\n    );\r\n  }\r\n\r\n  void imagePicked() async {\r\n    showDialog(\r\n        context: context,\r\n        builder: (context) {\r\n          return AlertDialog(\r\n            title: const Text('Pick Image From:'),\r\n            content: Column(\r\n              mainAxisSize: MainAxisSize.min,\r\n              children: [\r\n                ListTile(\r\n                  onTap: () async {\r\n                    pickImage = await ImagePicker()\r\n                        .pickImage(source: ImageSource.camera);\r\n                    if (pickImage != null) {\r\n                      setState(() {});\r\n                      if (mounted) {\r\n                        Navigator.pop(context);\r\n                      }\r\n                    } else {}\r\n                  },\r\n                  leading: const Icon(Icons.camera),\r\n                  title: const Text('Camera'),\r\n                ),\r\n                ListTile(\r\n                  leading: const Icon(Icons.image),\r\n                  onTap: () async {\r\n                    pickImage = await ImagePicker()\r\n                        .pickImage(source: ImageSource.gallery);\r\n                    if (pickImage != null) {\r\n                      setState(() {});\r\n                      if (mounted) {\r\n                        Navigator.pop(context);\r\n                      }\r\n                    } else {}\r\n                  },\r\n                  title: const Text('Gallery'),\r\n                )\r\n              ],\r\n            ),\r\n          );\r\n        });\r\n  }\r\n}\r\n"
        }
    ]
}