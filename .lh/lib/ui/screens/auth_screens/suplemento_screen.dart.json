{
    "sourceFile": "lib/ui/screens/auth_screens/suplemento_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1708715621509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1708715621509,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:task_manager_flutter/data/utils/api_links.dart';\r\nimport 'package:task_manager_flutter/ui/widgets/user_banners.dart';\r\nimport 'package:task_manager_flutter/ui/screens/update_profile.dart';\r\nimport 'package:task_manager_flutter/ui/widgets/home_list_model.dart';\r\nimport 'package:task_manager_flutter/data/models/network_response.dart';\r\nimport 'package:task_manager_flutter/data/services/network_caller.dart';\r\nimport 'package:task_manager_flutter/ui/widgets/input_field_busca.dart';\r\nimport 'package:task_manager_flutter/ui/widgets/itens_list_academia.dart';\r\nimport 'package:task_manager_flutter/ui/widgets/academia_dynamic_form.dart';\r\n\r\nclass SuplementoScreen extends StatefulWidget {\r\n  const SuplementoScreen({\r\n    Key? key,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  State<SuplementoScreen> createState() => _SuplementoScreenState();\r\n}\r\n\r\nfinal TextEditingController _taskNameController = TextEditingController();\r\nfinal TextEditingController _taskDescriptionController =\r\n    TextEditingController();\r\nList<Widget> mywidgets = [];\r\nbool _isLoading = false;\r\n\r\nclass _SuplementoScreenState extends State<SuplementoScreen> {\r\n  @override\r\n  void initState() {\r\n    findAllAcademia();\r\n    super.initState();\r\n  }\r\n\r\n  bool standardSelected = false;\r\n  bool filledSelected = false;\r\n  bool tonalSelected = false;\r\n  bool outlinedSelected = false;\r\n  int count = 0;\r\n  final List<String> modalidadeList = ['Musculação'];\r\n\r\n  void log(String message) => print(message);\r\n\r\n  bool _addNewTaskLoading = false;\r\n\r\n  List<String> getList(List<dynamic> newMap) {\r\n    late List<String> modList = [];\r\n    for (var v in newMap) {\r\n      Map<String, dynamic> request = v;\r\n      modList.add(v['nome']);\r\n    }\r\n\r\n    return modList;\r\n  }\r\n\r\n  Future<void> findAllAcademia() async {\r\n    _isLoading = true;\r\n    _addNewTaskLoading = true;\r\n    if (mounted) {\r\n      setState(() {});\r\n    }\r\n    Map<String, dynamic> requestBody = {\r\n      \"cref\": '',\r\n      \"id\": 1,\r\n    };\r\n\r\n    void onPressedss() => Navigator.push(context,\r\n        MaterialPageRoute(builder: (context) => const AcademiaDynamicForm()));\r\n\r\n    final NetworkResponse response =\r\n        await NetworkCaller().postRequest(ApiLinks.allAcademia, requestBody);\r\n    _addNewTaskLoading = false;\r\n    if (mounted) {\r\n      setState(() {});\r\n    }\r\n    if (response.isSuccess) {\r\n      _taskNameController.clear();\r\n      _taskDescriptionController.clear();\r\n      if (mounted) {\r\n        dynamic data = response.body?['data'];\r\n        List<dynamic> datas = data;\r\n        mywidgets = [];\r\n        mywidgets.add(InputBuscarField(\r\n            hint: \"Buscar Academia\",\r\n            obscure: false,\r\n            icon: Icons.person_outline,\r\n            onPresseds: onPressedss));\r\n        for (var element in datas) {\r\n          mywidgets.add(\r\n            Row(\r\n              mainAxisAlignment: MainAxisAlignment.center,\r\n              crossAxisAlignment: CrossAxisAlignment.start,\r\n              children: <Widget>[\r\n                ListItensAcademia(\r\n                    nome: element['codDadosPessoal']['nome'],\r\n                    cpf: element['codDadosPessoal']['cpf'],\r\n                    endereco: element['codDadosPessoal']['logradouro'] +\r\n                        \", \" +\r\n                        element['codDadosPessoal']['numero'],\r\n                    endereco1: element['codDadosPessoal']['bairro'] +\r\n                        \", \" +\r\n                        element['codDadosPessoal']['cidade'],\r\n                    telefone: element['codDadosPessoal']['telefone'] != null\r\n                        ? element['codDadosPessoal']['telefone']\r\n                        : \"\",\r\n                    foto: element['codDadosPessoal']['photo'],\r\n                    id: element['id'],\r\n                    listModadelidades: element['modalidaList'] != null &&\r\n                            element['modalidaList'].length > 0\r\n                        ? getList(element['modalidaList'])\r\n                        : modalidadeList),\r\n              ],\r\n            ),\r\n          );\r\n        }\r\n        _isLoading = false;\r\n      }\r\n    } else {\r\n      if (mounted) {\r\n        mywidgets = [];\r\n        mywidgets.add(InputBuscarField(\r\n            hint: \"Buscar Academia\",\r\n            obscure: false,\r\n            icon: Icons.person_outline,\r\n            onPresseds: onPressedss));\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          const SnackBar(\r\n            content: Text(\"Nenhuma academia cadastrada!\"),\r\n          ),\r\n        );\r\n        _isLoading = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  List<HomeListModel> listModels = [\r\n    HomeListModel(\r\n      title: \"Academia - O Club\",\r\n      assetIcon: \"assets/icons/gym_icon.png\",\r\n    ),\r\n    HomeListModel(\r\n      title: \"Biometa Academia\",\r\n      assetIcon: \"assets/icons/gym_icon.png\",\r\n    ),\r\n    HomeListModel(\r\n      title: \"Academia Titanium Core\",\r\n      assetIcon: \"assets/icons/gym_icon.png\",\r\n    )\r\n  ];\r\n  refreshPage() {\r\n    setState(() {});\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      //  floatingActionButton: getHomeFab(context, listModels, refreshPage),\r\n      backgroundColor: const Color(0xFF340A9C),\r\n      appBar: userBanner(\r\n        context,\r\n        onTapped: () {\r\n          Navigator.push(\r\n              context,\r\n              MaterialPageRoute(\r\n                  builder: (context) => const UpdateProfileScreen()));\r\n        },\r\n      ),\r\n      body: SingleChildScrollView(\r\n        child: ConstrainedBox(\r\n          constraints: const BoxConstraints(minHeight: 50),\r\n          child: Column(\r\n            mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n            children: mywidgets,\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}