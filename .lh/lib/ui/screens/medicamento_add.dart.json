{
    "sourceFile": "lib/ui/screens/medicamento_add.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1709045521614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1709057935515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n       // \"foto\": \"data:image/png;base64,$base64Imagess\",\r\n     };\r\n \r\n     final NetworkResponse response =\r\n-        await NetworkCaller().postRequest(ApiLinks.insertExame, requestBody);\r\n+        await NetworkCaller().postRequest(ApiLinks.insertMedicamento, requestBody);\r\n     _signUpInProgress = false;\r\n     if (mounted) {\r\n       setState(() {});\r\n     }\r\n"
                },
                {
                    "date": 1709058014186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,15 +42,17 @@\n     _focusNode.dispose();\r\n     super.dispose();\r\n   }\r\n \r\n-  final TextEditingController _nomeExController = TextEditingController();\r\n+  final TextEditingController _medicamentoController = TextEditingController();\r\n+  final TextEditingController _laboratorioController = TextEditingController();\r\n+  final TextEditingController _medicoReceitouController = TextEditingController();\r\n+  final TextEditingController _dosagemController = TextEditingController();\r\n   final TextEditingController _descricaoController = TextEditingController();\r\n-  final TextEditingController _medicoIniController = TextEditingController();\r\n-  final TextEditingController _laboratorioController = TextEditingController();\r\n-  final TextEditingController _resultadoController = TextEditingController();\r\n-  final TextEditingController _dtExameController = TextEditingController();\r\n-  final TextEditingController _dtEntregaController = TextEditingController();\r\n+  final TextEditingController _observacaoController = TextEditingController();\r\n+  final TextEditingController _valorController = TextEditingController();\r\n+  final TextEditingController _dtInicioController = TextEditingController();\r\n+  final TextEditingController _dtFinalController = TextEditingController();\r\n \r\n   Future<List<int>> getLostData() async {\r\n     final ImagePicker picker = ImagePicker();\r\n     final LostDataResponse response = await picker.retrieveLostData();\r\n"
                },
                {
                    "date": 1709058126971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,15 +96,17 @@\n     af[\"id\"] = userInfo.id;\r\n \r\n     Map<String, dynamic> requestBody = {\r\n       \"idaluno\": af,\r\n-      \"nome\": _nomeExController.text.trim(),\r\n+      \"medicamento\": _medicamentoController.text.trim(),\r\n+      \"laboratorio\": _laboratorioController.text.trim(),\r\n+      \"medicoReceitou\": _medicoReceitouController.text.trim(),\r\n+      \"dosagem\": _dosagemController.text.trim(),\r\n       \"descricao\": _descricaoController.text.trim(),\r\n-      \"medico\": _medicoIniController.text.trim(),\r\n-      \"laboratorio\": _laboratorioController.text.trim(),\r\n-      \"resultado\": _resultadoController.text.trim(),\r\n-      \"dtExame\": _dtExameController.text.trim(),\r\n-      \"dtEntregaResulExame\": _dtEntregaController.text.trim(),\r\n+      \"observacao\": _observacaoController.text.trim(),\r\n+      \"valor\": _valorController.text.trim(),\r\n+      \"dtInicio\": _dtInicioController.text.trim(),\r\n+      \"dtFinal\": _dtFinalController.text.trim(),\r\n       // \"foto\": \"data:image/png;base64,$base64Imagess\",\r\n     };\r\n \r\n     final NetworkResponse response = await NetworkCaller()\r\n"
                },
                {
                    "date": 1709058239899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,10 +204,10 @@\n                   CustomInputForm(\r\n                     validator: EmailValidator.validate,\r\n                     focusNode: _focusNode,\r\n                     type: TextInputType.text,\r\n-                    keyField: \"Nome Exame\",\r\n-                    controller: _nomeExController,\r\n+                    keyField: \"Medicamanto\",\r\n+                    controller: _medicamentoController,\r\n                     onPressed: (vale) => _onUpdate(0, \"Nome\", vale),\r\n                   ),\r\n                   CustomInputForm(\r\n                     validator: EmailValidator.validate,\r\n@@ -220,19 +220,19 @@\n                   CustomInputForm(\r\n                     validator: EmailValidator.validate,\r\n                     focusNode: _focusNode,\r\n                     type: TextInputType.text,\r\n-                    keyField: \"Descrição ('Porque do exame')\",\r\n+                    keyField: \"Descrição ('Porque do medicamento')\",\r\n                     controller: _descricaoController,\r\n                     onPressed: (vale) => _onUpdate(0, \"descricao\", vale),\r\n                   ),\r\n                   CustomInputForm(\r\n                     validator: EmailValidator.validate,\r\n                     focusNode: _focusNode,\r\n                     type: TextInputType.text,\r\n                     keyField:\r\n-                        \"Resultado do exame ('Conforme o medico dizer na consulta')\",\r\n-                    controller: _resultadoController,\r\n+                        \"Dosagem\",\r\n+                    controller: _dosagemController,\r\n                     onPressed: (vale) => _onUpdate(0, \"resultado\", vale),\r\n                   ),\r\n                   CustomInputForm(\r\n                     validator: EmailValidator.validate,\r\n"
                }
            ],
            "date": 1709045521614,
            "name": "Commit-0",
            "content": "import 'dart:convert';\r\nimport 'dart:io' as io;\r\nimport 'package:flutter/material.dart';\r\nimport 'package:image_picker/image_picker.dart';\r\nimport 'package:task_manager_flutter/data/utils/api_links.dart';\r\nimport 'package:task_manager_flutter/ui/widgets/user_banners.dart';\r\nimport 'package:task_manager_flutter/ui/screens/update_profile.dart';\r\nimport 'package:task_manager_flutter/ui/widgets/custom_input_form.dart';\r\nimport 'package:task_manager_flutter/data/constants/custom_colors.dart';\r\nimport 'package:task_manager_flutter/data/models/network_response.dart';\r\nimport 'package:task_manager_flutter/data/services/network_caller.dart';\r\nimport 'package:task_manager_flutter/data/utils/personal_validation.dart';\r\nimport '../../data/models/login_model.dart';\r\nimport 'package:task_manager_flutter/data/models/auth_utility.dart';\r\nimport 'dart:io';\r\nimport 'package:task_manager_flutter/ui/widgets/custom_insert_list_foto.dart';\r\n\r\nclass MedicamentosModalAdd extends StatefulWidget {\r\n  const MedicamentosModalAdd({super.key});\r\n  @override\r\n  State<MedicamentosModalAdd> createState() => _MedicamentosModalAddState();\r\n}\r\n\r\nclass _MedicamentosModalAddState extends State<MedicamentosModalAdd> {\r\n  final TextEditingController _nameController = TextEditingController();\r\n\r\n  late GlobalKey<FormState> _formKey;\r\n  late FocusNode _focusNode;\r\n  XFile? pickImage;\r\n  String? base64Image;\r\n  bool _signUpInProgress = false;\r\n\r\n  @override\r\n  void initState() {\r\n    _formKey = GlobalKey<FormState>();\r\n    _focusNode = FocusNode();\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _focusNode.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  final TextEditingController _nomeExController = TextEditingController();\r\n  final TextEditingController _descricaoController = TextEditingController();\r\n  final TextEditingController _medicoIniController = TextEditingController();\r\n  final TextEditingController _laboratorioController = TextEditingController();\r\n  final TextEditingController _resultadoController = TextEditingController();\r\n  final TextEditingController _dtExameController = TextEditingController();\r\n  final TextEditingController _dtEntregaController = TextEditingController();\r\n\r\n  Future<List<int>> getLostData() async {\r\n    final ImagePicker picker = ImagePicker();\r\n    final LostDataResponse response = await picker.retrieveLostData();\r\n    final XFile? files = response.file;\r\n    final XFile? photo;\r\n    if (files != null) {\r\n      photo = pickImage;\r\n      return files.readAsBytes();\r\n    } else {\r\n      const asciiDecoder = AsciiDecoder();\r\n      final asciiValues = [104, 101, 108, 108, 111];\r\n      return asciiValues;\r\n      print(response.exception);\r\n    }\r\n  }\r\n\r\n  Future<String?> uploadPdf(String fileName, File file) async {}\r\n\r\n  Future<void> updateProfile() async {\r\n    _signUpInProgress = true;\r\n    if (mounted) {\r\n      setState(() {});\r\n    }\r\n    String base64Imagess = \"\";\r\n    if (pickImage != null) {\r\n      // var bytes = File(pickImage!.path).readAsBytesSync();\r\n      // String base64Image = base64Encode(bytes);\r\n      print('upload proccess started');\r\n      final bytess = io.File(pickImage!.path).readAsBytesSync();\r\n      //  List<int> imageBytes = pickImage?.readAsBytesSync();\r\n      // print(imageBytes);\r\n      //String base64Images = base64Encode(imageBytes);\r\n      base64Imagess = base64Encode(bytess);\r\n    }\r\n    Data userInfo = AuthUtility.userInfo.data!;\r\n\r\n    Map<String, dynamic> af = {};\r\n    af[\"id\"] = userInfo.id;\r\n\r\n    Map<String, dynamic> requestBody = {\r\n      \"idaluno\": af,\r\n      \"nome\": _nomeExController.text.trim(),\r\n      \"descricao\": _descricaoController.text.trim(),\r\n      \"medico\": _medicoIniController.text.trim(),\r\n      \"laboratorio\": _laboratorioController.text.trim(),\r\n      \"resultado\": _resultadoController.text.trim(),\r\n      \"dtExame\": _dtExameController.text.trim(),\r\n      \"dtEntregaResulExame\": _dtEntregaController.text.trim(),\r\n      // \"foto\": \"data:image/png;base64,$base64Imagess\",\r\n    };\r\n\r\n    final NetworkResponse response =\r\n        await NetworkCaller().postRequest(ApiLinks.insertExame, requestBody);\r\n    _signUpInProgress = false;\r\n    if (mounted) {\r\n      setState(() {});\r\n    }\r\n    if (response.isSuccess) {\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          const SnackBar(\r\n            content: Text(\"Exame inserido com Success\"),\r\n          ),\r\n        );\r\n      }\r\n    } else {\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          const SnackBar(\r\n            content: Text(\"Erro ao inserir Exame\"),\r\n          ),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  final List<Map<String, dynamic>> _dataArray = []; //add this\r\n  String? _data = \"\"; //add this\r\n  void _onUpdate(int key, String value, chave) {\r\n    void addData() {\r\n      Map<String, dynamic> json = {\r\n        'id': key,\r\n        chave: value,\r\n        chave: value,\r\n        chave: value,\r\n        chave: value\r\n      };\r\n      _dataArray.add(json);\r\n      setState(() {\r\n        _data = _dataArray.toString();\r\n      });\r\n    }\r\n\r\n    if (_dataArray.isEmpty) {\r\n      addData();\r\n    } else {\r\n      _dataArray.asMap().entries.map((entry) {\r\n        if (entry.key == key && entry.value == chave) {\r\n          _dataArray[key][chave] = value;\r\n        }\r\n        print(entry.key);\r\n        print(entry.value);\r\n      });\r\n\r\n      for (var map in _dataArray) {\r\n        if (map[\"id\"] == key) {\r\n          _dataArray[key][chave] = value;\r\n          setState(() {\r\n            _data = _dataArray.toString();\r\n          });\r\n          break;\r\n        }\r\n      }\r\n\r\n      for (var map in _dataArray) {\r\n        if (map[\"id\"] == key) {\r\n          return;\r\n        }\r\n      }\r\n      addData();\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: userBanner(context, onTapped: () {\r\n        Navigator.push(\r\n            context,\r\n            MaterialPageRoute(\r\n                builder: (context) => const UpdateProfileScreen()));\r\n      }),\r\n      body: Form(\r\n        key: _formKey,\r\n        child: Padding(\r\n          padding: const EdgeInsets.all(18),\r\n          child: Container(\r\n            alignment: Alignment.topCenter,\r\n            color: CustomColors().getAppFundoPage(),\r\n            child: SingleChildScrollView(\r\n              child: Column(\r\n                mainAxisAlignment: MainAxisAlignment.center,\r\n                children: <Widget>[\r\n                  CustomInputForm(\r\n                    validator: EmailValidator.validate,\r\n                    focusNode: _focusNode,\r\n                    type: TextInputType.text,\r\n                    keyField: \"Nome Exame\",\r\n                    controller: _nomeExController,\r\n                    onPressed: (vale) => _onUpdate(0, \"Nome\", vale),\r\n                  ),\r\n                  CustomInputForm(\r\n                    validator: EmailValidator.validate,\r\n                    focusNode: _focusNode,\r\n                    type: TextInputType.text,\r\n                    keyField: \"Nome Laboratorio\",\r\n                    controller: _laboratorioController,\r\n                    onPressed: (vale) => _onUpdate(0, \"laboratorio\", vale),\r\n                  ),\r\n                  CustomInputForm(\r\n                    validator: EmailValidator.validate,\r\n                    focusNode: _focusNode,\r\n                    type: TextInputType.text,\r\n                    keyField: \"Descrição ('Porque do exame')\",\r\n                    controller: _descricaoController,\r\n                    onPressed: (vale) => _onUpdate(0, \"descricao\", vale),\r\n                  ),\r\n                  CustomInputForm(\r\n                    validator: EmailValidator.validate,\r\n                    focusNode: _focusNode,\r\n                    type: TextInputType.text,\r\n                    keyField:\r\n                        \"Resultado do exame ('Conforme o medico dizer na consulta')\",\r\n                    controller: _resultadoController,\r\n                    onPressed: (vale) => _onUpdate(0, \"resultado\", vale),\r\n                  ),\r\n                  CustomInputForm(\r\n                    validator: EmailValidator.validate,\r\n                    focusNode: _focusNode,\r\n                    type: TextInputType.datetime,\r\n                    keyField: \"Data Exame\",\r\n                    controller: _dtExameController,\r\n                    onPressed: (vale) => _onUpdate(0, \"dtExame\", vale),\r\n                  ),\r\n                  CustomInputForm(\r\n                    validator: EmailValidator.validate,\r\n                    focusNode: _focusNode,\r\n                    type: TextInputType.datetime,\r\n                    keyField: \"Data Entrega Exame\",\r\n                    controller: _dtEntregaController,\r\n                    onPressed: (vale) =>\r\n                        _onUpdate(0, \"dtEntregaResulExame\", vale),\r\n                  ),\r\n                  CustomInputForm(\r\n                    validator: EmailValidator.validate,\r\n                    focusNode: _focusNode,\r\n                    type: TextInputType.text,\r\n                    keyField: \"Medico Solicitante\",\r\n                    controller: _medicoIniController,\r\n                    onPressed: (vale) => _onUpdate(0, \"medico\", vale),\r\n                  ),\r\n                  ListFotoForm(),\r\n                ],\r\n              ),\r\n            ),\r\n          ),\r\n        ),\r\n      ),\r\n      floatingActionButton: FloatingActionButton(\r\n        onPressed: () {\r\n          final form = _formKey.currentState!;\r\n          form.validate();\r\n          _focusNode.requestFocus();\r\n          updateProfile();\r\n        },\r\n        child: const Icon(Icons.check),\r\n      ),\r\n    );\r\n  }\r\n\r\n  void imagePicked() async {\r\n    showDialog(\r\n        context: context,\r\n        builder: (context) {\r\n          return AlertDialog(\r\n            title: const Text('Pick Image From:'),\r\n            content: Column(\r\n              mainAxisSize: MainAxisSize.min,\r\n              children: [\r\n                ListTile(\r\n                  onTap: () async {\r\n                    pickImage = await ImagePicker()\r\n                        .pickImage(source: ImageSource.camera);\r\n                    if (pickImage != null) {\r\n                      setState(() {});\r\n                      if (mounted) {\r\n                        Navigator.pop(context);\r\n                      }\r\n                    } else {}\r\n                  },\r\n                  leading: const Icon(Icons.camera),\r\n                  title: const Text('Camera'),\r\n                ),\r\n                ListTile(\r\n                  leading: const Icon(Icons.image),\r\n                  onTap: () async {\r\n                    pickImage = await ImagePicker()\r\n                        .pickImage(source: ImageSource.gallery);\r\n                    if (pickImage != null) {\r\n                      setState(() {});\r\n                      if (mounted) {\r\n                        Navigator.pop(context);\r\n                      }\r\n                    } else {}\r\n                  },\r\n                  title: const Text('Gallery'),\r\n                )\r\n              ],\r\n            ),\r\n          );\r\n        });\r\n  }\r\n}\r\n"
        }
    ]
}