{
    "sourceFile": "lib/ui/screens/exames_add.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1708725650769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708727899827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,11 @@\n import 'package:task_manager_flutter/data/services/network_caller.dart';\r\n import 'package:task_manager_flutter/data/utils/personal_validation.dart';\r\n import '../../data/models/login_model.dart';\r\n import 'package:task_manager_flutter/data/models/auth_utility.dart';\r\n+import 'dart:io';\r\n+import 'package:file_picker/file_picker.dart';\r\n+import 'package:intl/intl.dart';\r\n \r\n class ExamesModalAdd extends StatefulWidget {\r\n   const ExamesModalAdd({super.key});\r\n   @override\r\n@@ -39,9 +42,9 @@\n   void dispose() {\r\n     _focusNode.dispose();\r\n     super.dispose();\r\n   }\r\n-\r\n+  List<Map<String, dynamic>> pdfData = [];\r\n   final TextEditingController _nomeController = TextEditingController();\r\n   final TextEditingController _marcaController = TextEditingController();\r\n   final TextEditingController _dataIniController = TextEditingController();\r\n   final TextEditingController _dataFinController = TextEditingController();\r\n@@ -67,8 +70,50 @@\n       print(response.exception);\r\n     }\r\n   }\r\n \r\n+    Future<String?> uploadPdf(String fileName, File file) async {\r\n+    final reference = FirebaseStorage.instance.ref().child(\"pdfs/$fileName\");\r\n+    final uploadTask = reference.putFile(file);\r\n+    await uploadTask.whenComplete(() {});\r\n+    final downloadLink = await reference.getDownloadURL();\r\n+\r\n+    await _firebaseFirestore.collection('pdfs').add({\r\n+      \"name\": fileName,\r\n+      \"url\": downloadLink,\r\n+      \"uploadDate\": DateTime.now(), \r\n+    });\r\n+\r\n+    return downloadLink;\r\n+  }\r\n+\r\n+  void pickFile() async {\r\n+    final pickedFile = await FilePicker.platform.pickFiles(\r\n+      type: FileType.custom,\r\n+      allowedExtensions: ['pdf'],\r\n+    );\r\n+\r\n+    if (pickedFile != null) {\r\n+      String fileName = pickedFile.files[0].name;\r\n+      File file = File(pickedFile.files[0].path!);\r\n+      final downloadLink = await uploadPdf(fileName, file);\r\n+\r\n+      print('Pdf Uploaded Successfully');\r\n+    }\r\n+  }\r\n+\r\n+  void getAllPdf() async {\r\n+    final results = await _firebaseFirestore.collection('pdfs').get();\r\n+\r\n+    pdfData = results.docs.map((e) {\r\n+      Map<String, dynamic> data = e.data();\r\n+      data[\"uploadDate\"] = e.data()[\"uploadDate\"].toDate(); \r\n+      return data;\r\n+    }).toList();\r\n+\r\n+    setState(() {});\r\n+  }\r\n+\r\n   Future<void> updateProfile() async {\r\n     _signUpInProgress = true;\r\n     if (mounted) {\r\n       setState(() {});\r\n"
                },
                {
                    "date": 1708727975364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -297,44 +297,49 @@\n                     keyField: \"Data Validade\",\r\n                     controller: _dataValController,\r\n                     onPressed: (vale) => _onUpdate(0, \"VLRAULA\", vale),\r\n                   ),\r\n-                  InkWell(\r\n-                    onTap: () {\r\n-                      imagePicked();\r\n-                    },\r\n-                    child: Row(children: [\r\n-                      Container(\r\n-                        padding: const EdgeInsets.all(18),\r\n-                        decoration: const BoxDecoration(\r\n-                          color: Colors.grey,\r\n-                          borderRadius: BorderRadius.only(\r\n-                            topLeft: Radius.circular(8),\r\n-                            bottomLeft: Radius.circular(8),\r\n-                          ),\r\n-                        ),\r\n-                        child: const Text(\"Foto\"),\r\n+                  GridView.builder(\r\n+        gridDelegate:\r\n+        const SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 2),\r\n+        itemCount: pdfData.length,\r\n+        itemBuilder: (context, index) {\r\n+          return Padding(\r\n+            padding: const EdgeInsets.all(8.0),\r\n+            child: InkWell(\r\n+              onTap: () {\r\n+                Navigator.of(context).push(MaterialPageRoute(\r\n+                  builder: (context) =>\r\n+                      PdfViewerScreen(pdfUrl: pdfData[index]['url']),\r\n+                ));\r\n+              },\r\n+              child: Container(\r\n+                decoration: BoxDecoration(\r\n+                  border: Border.all(),\r\n+                ),\r\n+                child: Column(\r\n+                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n+                  crossAxisAlignment: CrossAxisAlignment.center,\r\n+                  children: [\r\n+                    const Icon(Icons.picture_as_pdf, color: Colors.red,size: 50,),\r\n+                    Text(\r\n+                      pdfData[index]['name'],\r\n+                      style: const TextStyle(fontSize: 18),\r\n+                    ),\r\n+                    Padding(\r\n+                      padding: const EdgeInsets.symmetric(horizontal: 8.0),\r\n+                      child: Text( 'YÃ¼klenme tarihi: ' +\r\n+                        DateFormat('dd.mm.yyyy').format(pdfData[index]['uploadDate']), \r\n+                        style: const TextStyle(fontSize: 16, color: Colors.black),\r\n                       ),\r\n-                      Expanded(\r\n-                        child: Container(\r\n-                          padding: const EdgeInsets.all(18),\r\n-                          decoration: BoxDecoration(\r\n-                            color: CustomColors().getAppFundoImput(),\r\n-                            borderRadius: const BorderRadius.only(\r\n-                              topRight: Radius.circular(8),\r\n-                              bottomRight: Radius.circular(8),\r\n-                            ),\r\n-                          ),\r\n-                          child: Text(\r\n-                            pickImage?.name ?? \"\",\r\n-                            maxLines: 1,\r\n-                            style: const TextStyle(\r\n-                                overflow: TextOverflow.ellipsis),\r\n-                          ),\r\n-                        ),\r\n-                      ),\r\n-                    ]),\r\n-                  ),\r\n+                    ),\r\n+                  ],\r\n+                ),\r\n+              ),\r\n+            ),\r\n+          );\r\n+        },\r\n+      ),\r\n                   CustomInputForm(\r\n                     validator: EmailValidator.validate,\r\n                     focusNode: _focusNode,\r\n                     type: TextInputType.datetime,\r\n"
                },
                {
                    "date": 1708728043751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n import 'package:task_manager_flutter/data/models/auth_utility.dart';\r\n import 'dart:io';\r\n import 'package:file_picker/file_picker.dart';\r\n import 'package:intl/intl.dart';\r\n+import 'package:task_manager_flutter/ui/widgets/pdf_viewer.dart';\r\n \r\n class ExamesModalAdd extends StatefulWidget {\r\n   const ExamesModalAdd({super.key});\r\n   @override\r\n"
                },
                {
                    "date": 1708728106304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,20 +73,9 @@\n     }\r\n   }\r\n \r\n   Future<String?> uploadPdf(String fileName, File file) async {\r\n-    final reference = FirebaseStorage.instance.ref().child(\"pdfs/$fileName\");\r\n-    final uploadTask = reference.putFile(file);\r\n-    await uploadTask.whenComplete(() {});\r\n-    final downloadLink = await reference.getDownloadURL();\r\n \r\n-    await _firebaseFirestore.collection('pdfs').add({\r\n-      \"name\": fileName,\r\n-      \"url\": downloadLink,\r\n-      \"uploadDate\": DateTime.now(),\r\n-    });\r\n-\r\n-    return downloadLink;\r\n   }\r\n \r\n   void pickFile() async {\r\n     final pickedFile = await FilePicker.platform.pickFiles(\r\n@@ -103,15 +92,9 @@\n     }\r\n   }\r\n \r\n   void getAllPdf() async {\r\n-    final results = await _firebaseFirestore.collection('pdfs').get();\r\n \r\n-    pdfData = results.docs.map((e) {\r\n-      Map<String, dynamic> data = e.data();\r\n-      data[\"uploadDate\"] = e.data()[\"uploadDate\"].toDate();\r\n-      return data;\r\n-    }).toList();\r\n \r\n     setState(() {});\r\n   }\r\n \r\n"
                },
                {
                    "date": 1708964460036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -277,21 +277,16 @@\n                     keyField: \"Data Validade\",\r\n                     controller: _dataValController,\r\n                     onPressed: (vale) => _onUpdate(0, \"VLRAULA\", vale),\r\n                   ),\r\n-                  GridView.builder(\r\n-                    gridDelegate:\r\n-                        const SliverGridDelegateWithFixedCrossAxisCount(\r\n-                            crossAxisCount: 2),\r\n-                    itemCount: pdfData.length,\r\n-                    itemBuilder: (context, index) {\r\n-                      return Padding(\r\n+\r\n+                   Padding(\r\n                         padding: const EdgeInsets.all(8.0),\r\n                         child: InkWell(\r\n                           onTap: () {\r\n                             Navigator.of(context).push(MaterialPageRoute(\r\n                               builder: (context) => PdfViewerScreen(\r\n-                                  pdfUrl: pdfData[index]['url']),\r\n+                                  pdfUrl: pdfData[0]['url']),\r\n                             ));\r\n                           },\r\n                           child: Container(\r\n                             decoration: BoxDecoration(\r\n@@ -306,18 +301,18 @@\n                                   color: Colors.red,\r\n                                   size: 50,\r\n                                 ),\r\n                                 Text(\r\n-                                  pdfData[index]['name'],\r\n+                                  pdfData[0]['name'],\r\n                                   style: const TextStyle(fontSize: 18),\r\n                                 ),\r\n                                 Padding(\r\n                                   padding: const EdgeInsets.symmetric(\r\n                                       horizontal: 8.0),\r\n                                   child: Text(\r\n                                     'YÃ¼klenme tarihi: ' +\r\n                                         DateFormat('dd.mm.yyyy').format(\r\n-                                            pdfData[index]['uploadDate']),\r\n+                                            pdfData[0]['uploadDate']),\r\n                                     style: const TextStyle(\r\n                                         fontSize: 16, color: Colors.black),\r\n                                   ),\r\n                                 ),\r\n@@ -325,10 +320,9 @@\n                             ),\r\n                           ),\r\n                         ),\r\n                       );\r\n-                    },\r\n-                  ),\r\n+  \r\n                   CustomInputForm(\r\n                     validator: EmailValidator.validate,\r\n                     focusNode: _focusNode,\r\n                     type: TextInputType.datetime,\r\n"
                }
            ],
            "date": 1708725650769,
            "name": "Commit-0",
            "content": "import 'dart:convert';\r\nimport 'dart:io' as io;\r\nimport 'package:flutter/material.dart';\r\nimport 'package:image_picker/image_picker.dart';\r\nimport 'package:task_manager_flutter/data/utils/api_links.dart';\r\nimport 'package:task_manager_flutter/ui/widgets/user_banners.dart';\r\nimport 'package:task_manager_flutter/ui/screens/update_profile.dart';\r\nimport 'package:task_manager_flutter/ui/widgets/custom_input_form.dart';\r\nimport 'package:task_manager_flutter/data/constants/custom_colors.dart';\r\nimport 'package:task_manager_flutter/data/models/network_response.dart';\r\nimport 'package:task_manager_flutter/data/services/network_caller.dart';\r\nimport 'package:task_manager_flutter/data/utils/personal_validation.dart';\r\nimport '../../data/models/login_model.dart';\r\nimport 'package:task_manager_flutter/data/models/auth_utility.dart';\r\n\r\nclass ExamesModalAdd extends StatefulWidget {\r\n  const ExamesModalAdd({super.key});\r\n  @override\r\n  State<ExamesModalAdd> createState() => _ExamesModalAddState();\r\n}\r\n\r\nclass _ExamesModalAddState extends State<ExamesModalAdd> {\r\n  final TextEditingController _nameController = TextEditingController();\r\n\r\n  late GlobalKey<FormState> _formKey;\r\n  late FocusNode _focusNode;\r\n  XFile? pickImage;\r\n  String? base64Image;\r\n  bool _signUpInProgress = false;\r\n\r\n  @override\r\n  void initState() {\r\n    _formKey = GlobalKey<FormState>();\r\n    _focusNode = FocusNode();\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _focusNode.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  final TextEditingController _nomeController = TextEditingController();\r\n  final TextEditingController _marcaController = TextEditingController();\r\n  final TextEditingController _dataIniController = TextEditingController();\r\n  final TextEditingController _dataFinController = TextEditingController();\r\n  final TextEditingController _dataValController = TextEditingController();\r\n  final TextEditingController _porcaoController = TextEditingController();\r\n  final TextEditingController _idController = TextEditingController();\r\n  final TextEditingController _valorController = TextEditingController();\r\n  final TextEditingController _saborController = TextEditingController();\r\n  final TextEditingController _tamanhoController = TextEditingController();\r\n\r\n  Future<List<int>> getLostData() async {\r\n    final ImagePicker picker = ImagePicker();\r\n    final LostDataResponse response = await picker.retrieveLostData();\r\n    final XFile? files = response.file;\r\n    final XFile? photo;\r\n    if (files != null) {\r\n      photo = pickImage;\r\n      return files.readAsBytes();\r\n    } else {\r\n      const asciiDecoder = AsciiDecoder();\r\n      final asciiValues = [104, 101, 108, 108, 111];\r\n      return asciiValues;\r\n      print(response.exception);\r\n    }\r\n  }\r\n\r\n  Future<void> updateProfile() async {\r\n    _signUpInProgress = true;\r\n    if (mounted) {\r\n      setState(() {});\r\n    }\r\n    String base64Imagess = \"\";\r\n    if (pickImage != null) {\r\n      // var bytes = File(pickImage!.path).readAsBytesSync();\r\n      // String base64Image = base64Encode(bytes);\r\n      print('upload proccess started');\r\n      final bytess = io.File(pickImage!.path).readAsBytesSync();\r\n      //  List<int> imageBytes = pickImage?.readAsBytesSync();\r\n      // print(imageBytes);\r\n      //String base64Images = base64Encode(imageBytes);\r\n      base64Imagess = base64Encode(bytess);\r\n    }\r\n    Data userInfo = AuthUtility.userInfo.data!;\r\n\r\n    Map<String, dynamic> af = {};\r\n    af[\"id\"] = userInfo.id;\r\n\r\n    Map<String, dynamic> requestBody = {\r\n      \"codAluno\": af,\r\n      \"nome\": _nomeController.text.trim(),\r\n      \"marca\": _marcaController.text.trim(),\r\n      \"dtInicio\": _dataIniController.text.trim(),\r\n      \"dtFinal\": _dataFinController.text.trim(),\r\n      \"dataVal\": _dataValController.text.trim(),\r\n      \"tamanho\": _tamanhoController.text.trim(),\r\n      \"dosagem\": _porcaoController.text.trim(),\r\n      \"id\": _idController.text.trim(),\r\n      \"valor\": _valorController.text.trim(),\r\n      \"sabor\": _saborController.text.trim(),\r\n      \"foto\": \"data:image/png;base64,$base64Imagess\",\r\n    };\r\n\r\n    final NetworkResponse response = await NetworkCaller()\r\n        .postRequest(ApiLinks.insertSuplemento, requestBody);\r\n    _signUpInProgress = false;\r\n    if (mounted) {\r\n      setState(() {});\r\n    }\r\n    if (response.isSuccess) {\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          const SnackBar(\r\n            content: Text(\"Suplemento inserido com Success\"),\r\n          ),\r\n        );\r\n      }\r\n    } else {\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          const SnackBar(\r\n            content: Text(\"Erro ao inserir Suplemento\"),\r\n          ),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  final List<Map<String, dynamic>> _dataArray = []; //add this\r\n  String? _data = \"\"; //add this\r\n  void _onUpdate(int key, String value, chave) {\r\n    void addData() {\r\n      Map<String, dynamic> json = {\r\n        'id': key,\r\n        chave: value,\r\n        chave: value,\r\n        chave: value,\r\n        chave: value\r\n      };\r\n      _dataArray.add(json);\r\n      setState(() {\r\n        _data = _dataArray.toString();\r\n      });\r\n    }\r\n\r\n    if (_dataArray.isEmpty) {\r\n      addData();\r\n    } else {\r\n      _dataArray.asMap().entries.map((entry) {\r\n        if (entry.key == key && entry.value == chave) {\r\n          _dataArray[key][chave] = value;\r\n        }\r\n        print(entry.key);\r\n        print(entry.value);\r\n      });\r\n\r\n      for (var map in _dataArray) {\r\n        if (map[\"id\"] == key) {\r\n          _dataArray[key][chave] = value;\r\n          setState(() {\r\n            _data = _dataArray.toString();\r\n          });\r\n          break;\r\n        }\r\n      }\r\n\r\n      for (var map in _dataArray) {\r\n        if (map[\"id\"] == key) {\r\n          return;\r\n        }\r\n      }\r\n      addData();\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: userBanner(context, onTapped: () {\r\n        Navigator.push(\r\n            context,\r\n            MaterialPageRoute(\r\n                builder: (context) => const UpdateProfileScreen()));\r\n      }),\r\n      body: Form(\r\n        key: _formKey,\r\n        child: Padding(\r\n          padding: const EdgeInsets.all(18),\r\n          child: Container(\r\n            alignment: Alignment.topCenter,\r\n            color: CustomColors().getAppFundoPage(),\r\n            child: SingleChildScrollView(\r\n              child: Column(\r\n                mainAxisAlignment: MainAxisAlignment.center,\r\n                children: <Widget>[\r\n                  CustomInputForm(\r\n                    validator: EmailValidator.validate,\r\n                    focusNode: _focusNode,\r\n                    type: TextInputType.text,\r\n                    keyField: \"Nome\",\r\n                    controller: _nomeController,\r\n                    onPressed: (vale) => _onUpdate(0, \"Nome\", vale),\r\n                  ),\r\n                  CustomInputForm(\r\n                    validator: EmailValidator.validate,\r\n                    focusNode: _focusNode,\r\n                    type: TextInputType.text,\r\n                    keyField: \"Marca\",\r\n                    controller: _marcaController,\r\n                    onPressed: (vale) => _onUpdate(0, \"Marca\", vale),\r\n                  ),\r\n                  CustomInputForm(\r\n                    validator: EmailValidator.validate,\r\n                    focusNode: _focusNode,\r\n                    type: TextInputType.text,\r\n                    keyField: \"Sabor\",\r\n                    controller: _saborController,\r\n                    onPressed: (vale) => _onUpdate(0, \"Sabor\", vale),\r\n                  ),\r\n                  CustomInputForm(\r\n                    validator: EmailValidator.validate,\r\n                    focusNode: _focusNode,\r\n                    type: TextInputType.text,\r\n                    keyField: \"Tamanho\",\r\n                    controller: _tamanhoController,\r\n                    onPressed: (vale) => _onUpdate(0, \"Sabor\", vale),\r\n                  ),\r\n                  CustomInputForm(\r\n                    validator: EmailValidator.validate,\r\n                    focusNode: _focusNode,\r\n                    type: TextInputType.datetime,\r\n                    keyField: \"Data ComeÃ§ou a Tomar\",\r\n                    controller: _dataIniController,\r\n                    onPressed: (vale) => _onUpdate(0, \"TELEFONE\", vale),\r\n                  ),\r\n                  CustomInputForm(\r\n                    validator: EmailValidator.validate,\r\n                    focusNode: _focusNode,\r\n                    type: TextInputType.datetime,\r\n                    keyField: \"Data que acabou de Tomar\",\r\n                    controller: _dataFinController,\r\n                    onPressed: (vale) => _onUpdate(0, \"CREF\", vale),\r\n                  ),\r\n                  CustomInputForm(\r\n                    validator: EmailValidator.validate,\r\n                    focusNode: _focusNode,\r\n                    type: TextInputType.datetime,\r\n                    keyField: \"Data Validade\",\r\n                    controller: _dataValController,\r\n                    onPressed: (vale) => _onUpdate(0, \"VLRAULA\", vale),\r\n                  ),\r\n                  InkWell(\r\n                    onTap: () {\r\n                      imagePicked();\r\n                    },\r\n                    child: Row(children: [\r\n                      Container(\r\n                        padding: const EdgeInsets.all(18),\r\n                        decoration: const BoxDecoration(\r\n                          color: Colors.grey,\r\n                          borderRadius: BorderRadius.only(\r\n                            topLeft: Radius.circular(8),\r\n                            bottomLeft: Radius.circular(8),\r\n                          ),\r\n                        ),\r\n                        child: const Text(\"Foto\"),\r\n                      ),\r\n                      Expanded(\r\n                        child: Container(\r\n                          padding: const EdgeInsets.all(18),\r\n                          decoration: BoxDecoration(\r\n                            color: CustomColors().getAppFundoImput(),\r\n                            borderRadius: const BorderRadius.only(\r\n                              topRight: Radius.circular(8),\r\n                              bottomRight: Radius.circular(8),\r\n                            ),\r\n                          ),\r\n                          child: Text(\r\n                            pickImage?.name ?? \"\",\r\n                            maxLines: 1,\r\n                            style: const TextStyle(\r\n                                overflow: TextOverflow.ellipsis),\r\n                          ),\r\n                        ),\r\n                      ),\r\n                    ]),\r\n                  ),\r\n                  CustomInputForm(\r\n                    validator: EmailValidator.validate,\r\n                    focusNode: _focusNode,\r\n                    type: TextInputType.datetime,\r\n                    keyField: \"Dosagem/Dia\",\r\n                    controller: _porcaoController,\r\n                    onPressed: (vale) => _onUpdate(0, \"PORCAO\", vale),\r\n                  ),\r\n                  CustomInputForm(\r\n                    validator: EmailValidator.validate,\r\n                    focusNode: _focusNode,\r\n                    type: TextInputType.datetime,\r\n                    keyField: \"Valor\",\r\n                    controller: _valorController,\r\n                    onPressed: (vale) => _onUpdate(0, \"PORCAO\", vale),\r\n                  ),\r\n                ],\r\n              ),\r\n            ),\r\n          ),\r\n        ),\r\n      ),\r\n      floatingActionButton: FloatingActionButton(\r\n        onPressed: () {\r\n          final form = _formKey.currentState!;\r\n          form.validate();\r\n          _focusNode.requestFocus();\r\n          updateProfile();\r\n        },\r\n        child: const Icon(Icons.check),\r\n      ),\r\n    );\r\n  }\r\n\r\n  void imagePicked() async {\r\n    showDialog(\r\n        context: context,\r\n        builder: (context) {\r\n          return AlertDialog(\r\n            title: const Text('Pick Image From:'),\r\n            content: Column(\r\n              mainAxisSize: MainAxisSize.min,\r\n              children: [\r\n                ListTile(\r\n                  onTap: () async {\r\n                    pickImage = await ImagePicker()\r\n                        .pickImage(source: ImageSource.camera);\r\n                    if (pickImage != null) {\r\n                      setState(() {});\r\n                      if (mounted) {\r\n                        Navigator.pop(context);\r\n                      }\r\n                    } else {}\r\n                  },\r\n                  leading: const Icon(Icons.camera),\r\n                  title: const Text('Camera'),\r\n                ),\r\n                ListTile(\r\n                  leading: const Icon(Icons.image),\r\n                  onTap: () async {\r\n                    pickImage = await ImagePicker()\r\n                        .pickImage(source: ImageSource.gallery);\r\n                    if (pickImage != null) {\r\n                      setState(() {});\r\n                      if (mounted) {\r\n                        Navigator.pop(context);\r\n                      }\r\n                    } else {}\r\n                  },\r\n                  title: const Text('Gallery'),\r\n                )\r\n              ],\r\n            ),\r\n          );\r\n        });\r\n  }\r\n}\r\n"
        }
    ]
}