{
    "sourceFile": "lib/ui/widgets/custom_selected_padrao.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1708373952822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708373993146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,25 +51,19 @@\n     _focusNode.dispose();\r\n     super.dispose();\r\n   }\r\n \r\n-  Future<void> insertAluno() async {\r\n+  Future<void> getSelected() async {\r\n     isLoading = true;\r\n     if (mounted) {\r\n       setState(() {});\r\n     }\r\n-    GetAcademiaDynamicForm myObjectInstance = GetAcademiaDynamicForm();\r\n-    List<Map<String, dynamic>> dayName = myObjectInstance.test();\r\n-\r\n-    String aa = MapToJson(dayName);\r\n-\r\n     Map<String, dynamic> requestBody = {\r\n-      \"aluno\": jsonDecode(aa),\r\n     };\r\n-    print(jsonEncode(requestBody));\r\n     final NetworkResponse response =\r\n         await NetworkCaller().postRequest(ApiLinks.insertAluno, requestBody);\r\n     isLoading = false;\r\n+    \r\n     if (mounted) {\r\n       setState(() {});\r\n     }\r\n     if (response.isSuccess) {\r\n"
                },
                {
                    "date": 1708374013265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,11 @@\n import 'package:flutter/material.dart';\r\n import 'package:task_manager_flutter/data/constants/custom_colors.dart';\r\n \r\n import 'package:dropdown_button2/dropdown_button2.dart';\r\n+import 'package:task_manager_flutter/data/utils/api_links.dart';\r\n+import 'package:task_manager_flutter/data/models/network_response.dart';\r\n+import 'package:task_manager_flutter/data/services/network_caller.dart';\r\n \r\n final List<Map<String, dynamic>> _dataArray = []; //add this\r\n String? _data = \"\"; //add this\r\n \r\n"
                },
                {
                    "date": 1708374133319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,18 +11,8 @@\n \r\n final List<Map<String, dynamic>> _dataArray = []; //add this\r\n String? _data = \"\"; //add this\r\n \r\n-var dias = [\r\n-  'Segunda',\r\n-  'Terça',\r\n-  'Quarta',\r\n-  'Quinta',\r\n-  'Sexta',\r\n-  'Sabado',\r\n-  'Domingo',\r\n-];\r\n-\r\n List<String> diasSelectedItems = [];\r\n \r\n class GetDiasSemana {\r\n   test() {\r\n@@ -46,8 +36,9 @@\n   @override\r\n   void initState() {\r\n     _focusNode = FocusNode();\r\n     super.initState();\r\n+    var dias = getSelected();\r\n   }\r\n \r\n   @override\r\n   void dispose() {\r\n@@ -61,9 +52,9 @@\n       setState(() {});\r\n     }\r\n     Map<String, dynamic> requestBody = {};\r\n     final NetworkResponse response =\r\n-        await NetworkCaller().postRequest(ApiLinks.insertAluno, requestBody);\r\n+        await NetworkCaller().postRequest(ApiLinks.allModalidade, requestBody);\r\n     isLoading = false;\r\n \r\n     if (mounted) {\r\n       setState(() {});\r\n"
                },
                {
                    "date": 1708374368937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n import 'package:task_manager_flutter/data/services/network_caller.dart';\r\n \r\n final List<Map<String, dynamic>> _dataArray = []; //add this\r\n String? _data = \"\"; //add this\r\n-\r\n+var dias;\r\n List<String> diasSelectedItems = [];\r\n \r\n class GetDiasSemana {\r\n   test() {\r\n@@ -36,9 +36,9 @@\n   @override\r\n   void initState() {\r\n     _focusNode = FocusNode();\r\n     super.initState();\r\n-    var dias = getSelected();\r\n+    dias = getSelected();\r\n   }\r\n \r\n   @override\r\n   void dispose() {\r\n"
                }
            ],
            "date": 1708373952822,
            "name": "Commit-0",
            "content": "// Copyright 2019 Aleksander Woźniak\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport 'package:flutter/material.dart';\r\nimport 'package:task_manager_flutter/data/constants/custom_colors.dart';\r\n\r\nimport 'package:dropdown_button2/dropdown_button2.dart';\r\n\r\nfinal List<Map<String, dynamic>> _dataArray = []; //add this\r\nString? _data = \"\"; //add this\r\n\r\nvar dias = [\r\n  'Segunda',\r\n  'Terça',\r\n  'Quarta',\r\n  'Quinta',\r\n  'Sexta',\r\n  'Sabado',\r\n  'Domingo',\r\n];\r\n\r\nList<String> diasSelectedItems = [];\r\n\r\nclass GetDiasSemana {\r\n  test() {\r\n    return _dataArray;\r\n  }\r\n}\r\n\r\nclass CustomDiasBoxForm extends StatefulWidget {\r\n  const CustomDiasBoxForm({super.key});\r\n\r\n  @override\r\n  State<CustomDiasBoxForm> createState() => _CustomDiasBoxForm();\r\n}\r\n\r\nclass _CustomDiasBoxForm extends State<CustomDiasBoxForm> {\r\n  int _formCount = 0; //add this\r\n  bool isLoading = true;\r\n\r\n  late FocusNode _focusNode;\r\n\r\n  @override\r\n  void initState() {\r\n    _focusNode = FocusNode();\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _focusNode.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  Future<void> insertAluno() async {\r\n    isLoading = true;\r\n    if (mounted) {\r\n      setState(() {});\r\n    }\r\n    GetAcademiaDynamicForm myObjectInstance = GetAcademiaDynamicForm();\r\n    List<Map<String, dynamic>> dayName = myObjectInstance.test();\r\n\r\n    String aa = MapToJson(dayName);\r\n\r\n    Map<String, dynamic> requestBody = {\r\n      \"aluno\": jsonDecode(aa),\r\n    };\r\n    print(jsonEncode(requestBody));\r\n    final NetworkResponse response =\r\n        await NetworkCaller().postRequest(ApiLinks.insertAluno, requestBody);\r\n    isLoading = false;\r\n    if (mounted) {\r\n      setState(() {});\r\n    }\r\n    if (response.isSuccess) {\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          const SnackBar(\r\n            content: Text(\"Profile update Successful\"),\r\n          ),\r\n        );\r\n      }\r\n    } else {\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          const SnackBar(\r\n            content: Text(\"Profile update Failed\"),\r\n          ),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  void _onUpdate(int key, String? value, chave) {\r\n    void addData() {\r\n      Map<String, dynamic> json = {\r\n        'id': key,\r\n        chave: value,\r\n        chave: value,\r\n        chave: value,\r\n        chave: value\r\n      };\r\n      _dataArray.add(json);\r\n      setState(() {\r\n        _data = _dataArray.toString();\r\n      });\r\n    }\r\n\r\n    if (_dataArray.isEmpty) {\r\n      addData();\r\n    } else {\r\n      _dataArray.asMap().entries.map((entry) {\r\n        if (entry.key == key && entry.value == chave) {\r\n          _dataArray[key][chave] = value;\r\n        }\r\n        print(entry.key);\r\n        print(entry.value);\r\n      });\r\n\r\n      for (var map in _dataArray) {\r\n        if (map[\"id\"] == key) {\r\n          _dataArray[key][chave] = value;\r\n          setState(() {\r\n            _data = _dataArray.toString();\r\n          });\r\n          break;\r\n        }\r\n      }\r\n\r\n      for (var map in _dataArray) {\r\n        if (map[\"id\"] == key) {\r\n          return;\r\n        }\r\n      }\r\n      addData();\r\n    }\r\n  }\r\n\r\n  Widget selected(\r\n          int key, String hit, int? maxLine, TextInputType tipo, chave) =>\r\n      Padding(\r\n        padding: const EdgeInsets.symmetric(vertical: 3),\r\n        child: Center(\r\n          child: Column(\r\n            mainAxisAlignment: MainAxisAlignment.center,\r\n            children: [\r\n              DropdownButtonHideUnderline(\r\n                child: DropdownButton2<String>(\r\n                  isExpanded: true,\r\n                  hint: Text(\r\n                    'Escolha Dia Semana',\r\n                    style: TextStyle(\r\n                      fontSize: 14,\r\n                      color: CustomColors().getAppLabelBotton(),\r\n                    ),\r\n                  ),\r\n                  items: dias.map((item) {\r\n                    return DropdownMenuItem(\r\n                      value: item,\r\n                      //disable default onTap to avoid closing menu when selecting an item\r\n                      enabled: false,\r\n                      child: StatefulBuilder(\r\n                        builder: (context, menuSetState) {\r\n                          final isSelected = diasSelectedItems.contains(item);\r\n                          return InkWell(\r\n                            onTap: () {\r\n                              isSelected\r\n                                  ? diasSelectedItems.remove(item)\r\n                                  : diasSelectedItems.add(item);\r\n                              //This rebuilds the StatefulWidget to update the button's text\r\n                              _onUpdate(\r\n                                  key, diasSelectedItems.join(\",\"), chave);\r\n                              setState(() {});\r\n                              //This rebuilds the dropdownMenu Widget to update the check mark\r\n                              menuSetState(() {\r\n                                print(item);\r\n                              });\r\n                            },\r\n                            child: Container(\r\n                              height: double.infinity,\r\n                              padding:\r\n                                  const EdgeInsets.symmetric(horizontal: 16.0),\r\n                              child: Row(\r\n                                children: [\r\n                                  if (isSelected)\r\n                                    const Icon(Icons.check_box_outlined)\r\n                                  else\r\n                                    const Icon(Icons.check_box_outline_blank),\r\n                                  const SizedBox(width: 16),\r\n                                  Expanded(\r\n                                    child: Text(\r\n                                      item,\r\n                                      style: const TextStyle(\r\n                                        fontSize: 14,\r\n                                      ),\r\n                                    ),\r\n                                  ),\r\n                                ],\r\n                              ),\r\n                            ),\r\n                          );\r\n                        },\r\n                      ),\r\n                    );\r\n                  }).toList(),\r\n                  //Use last selected item as the current value so if we've limited menu height, it scroll to last item.\r\n                  value:\r\n                      diasSelectedItems.isEmpty ? null : diasSelectedItems.last,\r\n                  onChanged: (vale) => _onUpdate(key, vale, chave),\r\n\r\n                  selectedItemBuilder: (context) {\r\n                    return diasSelectedItems.map(\r\n                      (item) {\r\n                        return Container(\r\n                          alignment: AlignmentDirectional.center,\r\n                          child: Text(\r\n                            diasSelectedItems.join(', '),\r\n                            style: const TextStyle(\r\n                              fontSize: 14,\r\n                              overflow: TextOverflow.ellipsis,\r\n                            ),\r\n                            maxLines: 1,\r\n                          ),\r\n                        );\r\n                      },\r\n                    ).toList();\r\n                  },\r\n                  buttonStyleData: ButtonStyleData(\r\n                    height: 50,\r\n                    width: 280,\r\n                    padding: const EdgeInsets.only(left: 14, right: 14),\r\n                    decoration: BoxDecoration(\r\n                      borderRadius: BorderRadius.circular(14),\r\n                      border: Border.all(\r\n                        color: Colors.black26,\r\n                      ),\r\n                      color: CustomColors().getAppBotton(),\r\n                    ),\r\n                    elevation: 2,\r\n                  ),\r\n                  iconStyleData: const IconStyleData(\r\n                    icon: Icon(\r\n                      Icons.arrow_forward_ios_outlined,\r\n                    ),\r\n                    iconSize: 14,\r\n                    iconEnabledColor: Colors.yellow,\r\n                    iconDisabledColor: Colors.grey,\r\n                  ),\r\n                  dropdownStyleData: DropdownStyleData(\r\n                    maxHeight: 200,\r\n                    width: 200,\r\n                    decoration: BoxDecoration(\r\n                      borderRadius: BorderRadius.circular(14),\r\n                      color: CustomColors().getAppBotton(),\r\n                    ),\r\n                    offset: const Offset(-20, 0),\r\n                    scrollbarTheme: ScrollbarThemeData(\r\n                      radius: const Radius.circular(40),\r\n                      thickness: MaterialStateProperty.all(6),\r\n                      thumbVisibility: MaterialStateProperty.all(true),\r\n                    ),\r\n                  ),\r\n                  menuItemStyleData: const MenuItemStyleData(\r\n                    height: 40,\r\n                    padding: EdgeInsets.only(left: 14, right: 14),\r\n                  ),\r\n                ),\r\n              ),\r\n            ],\r\n          ),\r\n        ),\r\n      );\r\n\r\n  Widget imput(int key, String hit, int? maxLine, TextInputType tipo, chave) =>\r\n      Padding(\r\n        padding: const EdgeInsets.symmetric(vertical: 2, horizontal: 10),\r\n        child: Column(\r\n          children: <Widget>[\r\n            TextFormField(\r\n              //    controller: controller,\r\n              maxLines: maxLine,\r\n              key: Key('$hit ${key + 1}'),\r\n              //    focusNode: _focusNode,\r\n              keyboardType: tipo ?? TextInputType.text,\r\n              decoration: InputDecoration(\r\n                fillColor: CustomColors().getAppFundoImput(),\r\n                filled: true,\r\n                border: const OutlineInputBorder(\r\n                  borderRadius: BorderRadius.all(\r\n                    Radius.circular(8.0),\r\n                  ),\r\n                  borderSide: BorderSide(\r\n                    color: Colors.yellow,\r\n                    width: 3.0,\r\n                  ),\r\n                ),\r\n                labelStyle:\r\n                    const TextStyle(color: Colors.black, fontSize: 16.0),\r\n                hintText: ' $hit ',\r\n              ),\r\n              onChanged: (val) => _onUpdate(key, val, chave),\r\n              //validator: validator,\r\n            ),\r\n          ],\r\n        ),\r\n      );\r\n\r\n  Widget form(int key) => Padding(\r\n        padding: const EdgeInsets.only(bottom: 15.0),\r\n        child: Container(\r\n          padding: EdgeInsets.zero,\r\n          color: CustomColors().getAppFundoClaro(),\r\n          child: Column(\r\n            mainAxisAlignment: MainAxisAlignment.center,\r\n            children: <Widget>[\r\n              selected(\r\n                  key, \"Titulo Plano\", null, TextInputType.text, 'diaAtene'),\r\n              imput(key, \"Hora Inicio\", null, TextInputType.text, 'dtInicio'),\r\n              imput(key, \"Hora Final\", null, TextInputType.number, 'dtFinal'),\r\n            ],\r\n          ),\r\n        ),\r\n      );\r\n\r\n  Widget buttonRow() => Row(\r\n        mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n        crossAxisAlignment: CrossAxisAlignment.center,\r\n        children: [\r\n          Visibility(\r\n            visible: _formCount > 0,\r\n            child: IconButton(\r\n                onPressed: () {\r\n                  if (_dataArray.isNotEmpty) {\r\n                    _dataArray.removeAt(_dataArray.length - 1);\r\n                  }\r\n                  setState(() {\r\n                    _data = _dataArray.toString();\r\n                    _formCount--;\r\n                  });\r\n                },\r\n                icon: CircleAvatar(\r\n                  backgroundColor: CustomColors().getAppBotton(),\r\n                  child: const Icon(\r\n                    Icons.remove,\r\n                  ),\r\n                )),\r\n          ),\r\n          IconButton(\r\n              onPressed: () {\r\n                setState(() => _formCount++);\r\n              },\r\n              icon: CircleAvatar(\r\n                backgroundColor: CustomColors().getAppBotton(),\r\n                child: const Icon(\r\n                  Icons.add,\r\n                ),\r\n              )),\r\n        ],\r\n      );\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final platform = Theme.of(context).platform;\r\n\r\n    return Padding(\r\n      padding: const EdgeInsets.symmetric(vertical: 3),\r\n      child: SingleChildScrollView(\r\n        child: Padding(\r\n          padding: const EdgeInsets.symmetric(horizontal: 25.0),\r\n          child: Column(\r\n            crossAxisAlignment: CrossAxisAlignment.center,\r\n            children: <Widget>[\r\n              const SizedBox(height: 19),\r\n              const Text('Horarios',\r\n                  style: TextStyle(\r\n                      fontWeight: FontWeight.bold,\r\n                      color: Colors.black87,\r\n                      fontSize: 22)),\r\n              const SizedBox(height: 20),\r\n              ...List.generate(_formCount, (index) => form(index)),\r\n              buttonRow(),\r\n              const SizedBox(height: 10),\r\n              //   Visibility(visible: _dataArray.isNotEmpty, child: Text(_data!)),\r\n              const SizedBox(height: 30),\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}