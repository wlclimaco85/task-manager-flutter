{
    "sourceFile": "lib/ui/widgets/status_change_botom_sheet.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1729002692231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1729002692231,
            "name": "Commit-0",
            "content": "// ignore_for_file: use_build_context_synchronously\r\n\r\nimport 'package:flutter/material.dart';\r\nimport 'package:task_manager_flutter/data/models/network_response.dart';\r\nimport 'package:task_manager_flutter/data/models/task_model.dart';\r\nimport 'package:task_manager_flutter/data/services/network_caller.dart';\r\nimport 'package:task_manager_flutter/data/utils/api_links.dart';\r\nimport 'package:task_manager_flutter/ui/widgets/custom_button.dart';\r\n\r\nclass UpdateStatus extends StatefulWidget {\r\n  final TaskData task;\r\n  const UpdateStatus(\r\n      {super.key, required this.task, required this.onTaskComplete});\r\n  final VoidCallback onTaskComplete;\r\n\r\n  @override\r\n  State<UpdateStatus> createState() => _UpdateStatusState();\r\n}\r\n\r\nclass _UpdateStatusState extends State<UpdateStatus> {\r\n  List<String> taskStatusList = ['Noticias', 'Cotação', 'Comprar', 'Vender', 'Entrar'];\r\n  late String _selectedTask;\r\n  bool updateTaskInProgress = false;\r\n\r\n  @override\r\n  void initState() {\r\n    _selectedTask = widget.task.status!.toLowerCase();\r\n    super.initState();\r\n  }\r\n\r\n  Future<void> updateTask(String taskId, String newStatus) async {\r\n    updateTaskInProgress = true;\r\n    if (mounted) {\r\n      setState(() {});\r\n    }\r\n    NetworkResponse response = await NetworkCaller()\r\n        .getRequest(ApiLinks.updateTask(taskId, newStatus));\r\n    updateTaskInProgress = false;\r\n    if (mounted) {\r\n      setState(() {});\r\n    }\r\n    if (response.isSuccess) {\r\n      widget.onTaskComplete();\r\n      if (mounted) {\r\n        Navigator.pop(context);\r\n      }\r\n    } else {\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n            const SnackBar(content: Text(\"Status Update failed\")));\r\n      }\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: [\r\n        const Padding(\r\n            padding: EdgeInsets.all(16),\r\n            child: Text(\r\n              'Update Status',\r\n              style: TextStyle(fontSize: 24, fontWeight: FontWeight.w300),\r\n            )),\r\n        Expanded(\r\n          child: ListView(\r\n            children: [\r\n              for (int index = 0; index < taskStatusList.length; index++)\r\n                RadioListTile<String>(\r\n                  value: taskStatusList[index],\r\n                  groupValue: _selectedTask,\r\n                  onChanged: (String? value) {\r\n                    setState(() {\r\n                      _selectedTask = value!;\r\n                    });\r\n                  },\r\n                  title: Text(taskStatusList[index].toUpperCase()),\r\n                ),\r\n            ],\r\n          ),\r\n        ),\r\n        Padding(\r\n          padding: const EdgeInsets.all(16),\r\n          child: Visibility(\r\n              visible: !updateTaskInProgress,\r\n              replacement: const Center(\r\n                child: CircularProgressIndicator(),\r\n              ),\r\n              child: CustomButton(\r\n                  onPresse: () {\r\n                    updateTask(widget.task.sId!, _selectedTask);\r\n                  },\r\n                  labels: \"teste\")),\r\n        )\r\n      ],\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}