{
    "sourceFile": "lib/ui/widgets/academia_dynamic_form.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1708034130016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708035404582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,9 +177,9 @@\n   @override\r\n   Widget build(BuildContext context) {\r\n     return Scaffold(\r\n       appBar: AppBar(\r\n-        title: const Text(\"Dynamic Form\"),\r\n+        title: const Text(\"Academia\"),\r\n       ),\r\n       body: isLoading\r\n           ? const Center(\r\n               child: CircularProgressIndicator(),\r\n@@ -314,8 +314,14 @@\n                     ? dropDownWidget(\r\n                         formResponse[index].fields![innerIndex].options,\r\n                         formResponse[index].fields![innerIndex].jsonName ??\r\n                             \"Field\")\r\n+                : formResponse[index].fields![innerIndex].fieldType ==\r\n+                        \"foto\"\r\n+                    ? dropDownWidget(\r\n+                        formResponse[index].fields![innerIndex].options,\r\n+                        formResponse[index].fields![innerIndex].jsonName ??\r\n+                            \"Field\")\r\n                     : formResponse[index].fields![innerIndex].fieldType ==\r\n                             \"SwitchInput\"\r\n                         ? SwitchListTile(\r\n                             value: switchValue,\r\n"
                },
                {
                    "date": 1708035494760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -440,5 +440,42 @@\n         });\r\n       },\r\n     );\r\n   }\r\n+\r\n+  fotoWidget(List<Options>? items, String value) {\r\n+    return DropdownButtonFormField<Options>(\r\n+      // Initial Value\r\n+      value: dropdownvalue,\r\n+      decoration: InputDecoration(\r\n+        border: const OutlineInputBorder(\r\n+          borderRadius: BorderRadius.all(\r\n+            Radius.circular(10.0),\r\n+          ),\r\n+        ),\r\n+        filled: true,\r\n+        hintStyle: TextStyle(color: Colors.grey[800]),\r\n+        hintText: items!.first.optionLabel!,\r\n+      ),\r\n+      borderRadius: BorderRadius.circular(10),\r\n+\r\n+      // Down Arrow Icon\r\n+      icon: const Icon(Icons.keyboard_arrow_down),\r\n+\r\n+      // Array list of items\r\n+      items: items.map((Options items) {\r\n+        return DropdownMenuItem<Options>(\r\n+          value: items,\r\n+          child: Text(items.optionValue!),\r\n+        );\r\n+      }).toList(),\r\n+      // After selecting the desired option,it will\r\n+      // change button value to selected value\r\n+      onChanged: (newValue) {\r\n+        setState(() {\r\n+          dropdownvalue = newValue!;\r\n+          _onUpdate(0, dropdownvalue.optionValue, value);\r\n+        });\r\n+      },\r\n+    );\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1708035636246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -442,40 +442,44 @@\n     );\r\n   }\r\n \r\n   fotoWidget(List<Options>? items, String value) {\r\n-    return DropdownButtonFormField<Options>(\r\n-      // Initial Value\r\n-      value: dropdownvalue,\r\n-      decoration: InputDecoration(\r\n-        border: const OutlineInputBorder(\r\n-          borderRadius: BorderRadius.all(\r\n-            Radius.circular(10.0),\r\n-          ),\r\n-        ),\r\n-        filled: true,\r\n-        hintStyle: TextStyle(color: Colors.grey[800]),\r\n-        hintText: items!.first.optionLabel!,\r\n-      ),\r\n-      borderRadius: BorderRadius.circular(10),\r\n+    return InkWell(\r\n+                    onTap: () {\r\n+                      imagePicked();\r\n+                    },\r\n+                    child: Row(children: [\r\n+                      Container(\r\n+                        padding: const EdgeInsets.all(18),\r\n+                        decoration: const BoxDecoration(\r\n+                          color: Colors.grey,\r\n+                          borderRadius: BorderRadius.only(\r\n+                            topLeft: Radius.circular(8),\r\n+                            bottomLeft: Radius.circular(8),\r\n+                          ),\r\n+                        ),\r\n+                        child: const Text(\"Foto\"),\r\n+                      ),\r\n+                      Expanded(\r\n+                        child: Container(\r\n+                          padding: const EdgeInsets.all(18),\r\n+                          decoration: BoxDecoration(\r\n+                            color: CustomColors().getAppFundoImput(),\r\n+                            borderRadius: const BorderRadius.only(\r\n+                              topRight: Radius.circular(8),\r\n+                              bottomRight: Radius.circular(8),\r\n+                            ),\r\n+                          ),\r\n+                          child: Text(\r\n+                            pickImage?.name ?? \"\",\r\n+                            maxLines: 1,\r\n+                            style: const TextStyle(\r\n+                                overflow: TextOverflow.ellipsis),\r\n+                          ),\r\n+                        ),\r\n+                      ),\r\n+                    ]),\r\n+                  );\r\n+  }\r\n \r\n-      // Down Arrow Icon\r\n-      icon: const Icon(Icons.keyboard_arrow_down),\r\n-\r\n-      // Array list of items\r\n-      items: items.map((Options items) {\r\n-        return DropdownMenuItem<Options>(\r\n-          value: items,\r\n-          child: Text(items.optionValue!),\r\n-        );\r\n-      }).toList(),\r\n-      // After selecting the desired option,it will\r\n-      // change button value to selected value\r\n-      onChanged: (newValue) {\r\n-        setState(() {\r\n-          dropdownvalue = newValue!;\r\n-          _onUpdate(0, dropdownvalue.optionValue, value);\r\n-        });\r\n-      },\r\n-    );\r\n-  }\r\n+  \r\n }\r\n"
                },
                {
                    "date": 1708035691946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n import 'dart:convert';\r\n import 'form_model.dart';\r\n import 'package:flutter/material.dart';\r\n+import 'package:image_picker/image_picker.dart';\r\n+import 'package:dropdown_button2/dropdown_button2.dart';\r\n import 'package:task_manager_flutter/data/utils/api_links.dart';\r\n import 'package:task_manager_flutter/data/models/network_response.dart';\r\n import 'package:task_manager_flutter/data/services/network_caller.dart';\r\n import 'package:task_manager_flutter/data/utils/personal_validation.dart';\r\n import 'package:task_manager_flutter/ui/widgets/custom_input_dynamic_form.dart';\r\n import 'package:task_manager_flutter/ui/screens/auth_screens/login_screen.dart';\r\n-import 'package:image_picker/image_picker.dart';\r\n-import 'package:dropdown_button2/dropdown_button2.dart';\r\n \r\n final List<Map<String, dynamic>> _dataArray = []; //add this\r\n \r\n class AcademiaDynamicForm extends StatefulWidget {\r\n"
                },
                {
                    "date": 1708035791113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,19 @@\n import 'dart:convert';\r\n+import 'dart:convert';\r\n+import 'dart:io' as io;\r\n import 'form_model.dart';\r\n import 'package:flutter/material.dart';\r\n+import 'package:flutter/material.dart';\r\n import 'package:image_picker/image_picker.dart';\r\n+import 'package:image_picker/image_picker.dart';\r\n import 'package:dropdown_button2/dropdown_button2.dart';\r\n import 'package:task_manager_flutter/data/utils/api_links.dart';\r\n import 'package:task_manager_flutter/data/models/network_response.dart';\r\n import 'package:task_manager_flutter/data/services/network_caller.dart';\r\n import 'package:task_manager_flutter/data/utils/personal_validation.dart';\r\n import 'package:task_manager_flutter/ui/widgets/custom_input_dynamic_form.dart';\r\n import 'package:task_manager_flutter/ui/screens/auth_screens/login_screen.dart';\r\n-import 'dart:convert';\r\n-import 'dart:io' as io;\r\n-import 'package:flutter/material.dart';\r\n-import 'package:image_picker/image_picker.dart';\r\n \r\n final List<Map<String, dynamic>> _dataArray = []; //add this\r\n \r\n class AcademiaDynamicForm extends StatefulWidget {\r\n"
                }
            ],
            "date": 1708034130016,
            "name": "Commit-0",
            "content": "import 'dart:convert';\r\nimport 'form_model.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:task_manager_flutter/data/utils/api_links.dart';\r\nimport 'package:task_manager_flutter/data/models/network_response.dart';\r\nimport 'package:task_manager_flutter/data/services/network_caller.dart';\r\nimport 'package:task_manager_flutter/data/utils/personal_validation.dart';\r\nimport 'package:task_manager_flutter/ui/widgets/custom_input_dynamic_form.dart';\r\nimport 'package:task_manager_flutter/ui/screens/auth_screens/login_screen.dart';\r\n\r\nfinal List<Map<String, dynamic>> _dataArray = []; //add this\r\n\r\nclass AcademiaDynamicForm extends StatefulWidget {\r\n  const AcademiaDynamicForm({super.key});\r\n\r\n  @override\r\n  State<AcademiaDynamicForm> createState() => _AcademiaDynamicFormState();\r\n}\r\n\r\nclass GetAcademiaDynamicForm {\r\n  test() {\r\n    return _dataArray;\r\n  }\r\n}\r\n\r\nclass _AcademiaDynamicFormState extends State<AcademiaDynamicForm> {\r\n  List<ResponseForm> formResponse = [];\r\n  bool isLoading = true;\r\n  late FocusNode _focusNode;\r\n  var dropdownvalue;\r\n  var dateController = TextEditingController();\r\n  bool switchValue = false;\r\n  String? _data = \"\"; //add this\r\n\r\n  void _onUpdate(int key, String value, chave) {\r\n    void addData() {\r\n      Map<String, dynamic> json = {\r\n        'id': key,\r\n        chave: value,\r\n        chave: value,\r\n        chave: value,\r\n        chave: value\r\n      };\r\n      _dataArray.add(json);\r\n      setState(() {\r\n        _data = _dataArray.toString();\r\n      });\r\n    }\r\n\r\n    if (_dataArray.isEmpty) {\r\n      addData();\r\n    } else {\r\n      _dataArray.asMap().entries.map((entry) {\r\n        if (entry.key == key && entry.value == chave) {\r\n          _dataArray[key][chave] = value;\r\n        }\r\n        print(entry.key);\r\n        print(entry.value);\r\n      });\r\n\r\n      for (var map in _dataArray) {\r\n        if (map[\"id\"] == key) {\r\n          _dataArray[key][chave] = value;\r\n          setState(() {\r\n            _data = _dataArray.toString();\r\n          });\r\n          break;\r\n        }\r\n      }\r\n\r\n      for (var map in _dataArray) {\r\n        if (map[\"id\"] == key) {\r\n          return;\r\n        }\r\n      }\r\n      addData();\r\n    }\r\n  }\r\n\r\n  String MapToJson(List<Map<String, dynamic>> map) {\r\n    String res = \"\";\r\n    bool isEntrou = false;\r\n    for (var s in map) {\r\n      res += \"{\";\r\n\r\n      for (String k in s.keys) {\r\n        //\"[{\"id\":\"0\",\"diaAtene\":\"Segunda,Segunda,Terça\",\"dtInicio\":\"10:00\"\r\n        res += '\"';\r\n        res += k;\r\n        res += '\":\"';\r\n        res += s[k].toString();\r\n        res += '\",';\r\n      }\r\n      res = res.substring(0, res.length - 1);\r\n\r\n      res += \"},\";\r\n      isEntrou = true;\r\n    }\r\n    if (isEntrou) {\r\n      res = res.substring(0, res.length - 1);\r\n    } else {\r\n      res = \"\";\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  Future<void> insertAluno() async {\r\n    isLoading = true;\r\n    if (mounted) {\r\n      setState(() {});\r\n    }\r\n    GetAcademiaDynamicForm myObjectInstance = GetAcademiaDynamicForm();\r\n    List<Map<String, dynamic>> dayName = myObjectInstance.test();\r\n\r\n    String aa = MapToJson(dayName);\r\n\r\n    Map<String, dynamic> requestBody = {\r\n      \"aluno\": jsonDecode(aa),\r\n    };\r\n    print(jsonEncode(requestBody));\r\n    final NetworkResponse response =\r\n        await NetworkCaller().postRequest(ApiLinks.insertAluno, requestBody);\r\n    isLoading = false;\r\n    if (mounted) {\r\n      setState(() {});\r\n    }\r\n    if (response.isSuccess) {\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          const SnackBar(\r\n            content: Text(\"Profile update Successful\"),\r\n          ),\r\n        );\r\n      }\r\n    } else {\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          const SnackBar(\r\n            content: Text(\"Profile update Failed\"),\r\n          ),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  @override\r\n  void initState() {\r\n    _focusNode = FocusNode();\r\n    super.initState();\r\n    WidgetsBinding.instance.addPostFrameCallback((_) async {\r\n      await getFromJson();\r\n    });\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _focusNode.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  getFromJson() async {\r\n    String data = await DefaultAssetBundle.of(context)\r\n        .loadString(\"assets/json/form.json\");\r\n    final jsonResult = jsonDecode(data);\r\n\r\n    setState(() {\r\n      jsonResult.forEach(\r\n          (element) => formResponse.add(ResponseForm.fromJson(element)));\r\n\r\n      isLoading = false;\r\n    });\r\n\r\n    print(formResponse.length);\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text(\"Dynamic Form\"),\r\n      ),\r\n      body: isLoading\r\n          ? const Center(\r\n              child: CircularProgressIndicator(),\r\n            )\r\n          : SingleChildScrollView(\r\n              child: Column(\r\n                  mainAxisAlignment: MainAxisAlignment.center,\r\n                  children: <Widget>[\r\n                    Container(\r\n                      color: const Color(0xFF5937B2),\r\n                      child: Padding(\r\n                        padding: const EdgeInsets.all(8.0),\r\n                        child: ListView.builder(\r\n                            itemCount: formResponse.length,\r\n                            shrinkWrap: true,\r\n                            itemBuilder: (context, index) {\r\n                              return Column(\r\n                                crossAxisAlignment: CrossAxisAlignment.start,\r\n                                children: [\r\n                                  Text(\r\n                                    formResponse[index].title!,\r\n                                    style: const TextStyle(\r\n                                        fontSize: 16,\r\n                                        fontWeight: FontWeight.bold),\r\n                                  ),\r\n                                  const SizedBox(height: 20),\r\n                                  myFormType(index),\r\n                                  Row(\r\n                                    mainAxisAlignment: MainAxisAlignment.center,\r\n                                    children: [\r\n                                      const Text(\r\n                                        \"Have an Account?\",\r\n                                        style: TextStyle(\r\n                                            fontWeight: FontWeight.w500),\r\n                                      ),\r\n                                      const SizedBox(\r\n                                        width: 2,\r\n                                      ),\r\n                                      TextButton(\r\n                                        onPressed: () {\r\n                                          Navigator.push(\r\n                                              context,\r\n                                              MaterialPageRoute(\r\n                                                  builder: (context) =>\r\n                                                      const LoginScreen()));\r\n                                        },\r\n                                        child: const Text(\r\n                                          \"Login\",\r\n                                          style: TextStyle(letterSpacing: .7),\r\n                                        ),\r\n                                      ),\r\n                                    ],\r\n                                  ),\r\n                                ],\r\n                              );\r\n                            }),\r\n                      ),\r\n                    ),\r\n                  ]),\r\n            ),\r\n      floatingActionButton: FloatingActionButton(\r\n        onPressed: () {\r\n          insertAluno();\r\n        },\r\n        child: const Icon(Icons.check),\r\n      ),\r\n    );\r\n  }\r\n\r\n  String? Function(String?)? validatord(String nameValidation) {\r\n    switch (nameValidation) {\r\n      case 'EMAIL':\r\n        return EmailValidator.validate;\r\n        break;\r\n      case 'TELEFONE':\r\n        return EmailValidator.validate;\r\n        break;\r\n      case 'CPF':\r\n        return EmailValidator.validate;\r\n        break;\r\n      case 'OBRIGATORIO':\r\n        return EmailValidator.validate;\r\n        break;\r\n      case 'NADA':\r\n        return EmailValidator.validate;\r\n        break;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  TextInputType? textInputType(String nameValidation) {\r\n    switch (nameValidation) {\r\n      case 'string':\r\n        return TextInputType.text;\r\n        break;\r\n      case 'email':\r\n        return TextInputType.emailAddress;\r\n        break;\r\n      case 'number':\r\n        return TextInputType.number;\r\n        break;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  myFormType(index) {\r\n    return ListView.separated(\r\n      itemCount: formResponse[index].fields!.length,\r\n      shrinkWrap: true,\r\n      itemBuilder: (context, innerIndex) {\r\n        return formResponse[index].fields![innerIndex].fieldType ==\r\n                \"DatetimePicker\"\r\n            ? myDatePicker(\r\n                formResponse[index].fields![innerIndex].jsonName ?? \"Field\")\r\n            : formResponse[index].fields![innerIndex].fieldType == \"TextInput\"\r\n                ? CustomInputForm(\r\n                    validator: validatord(\r\n                        formResponse[index].fields![innerIndex].label ??\r\n                            \"NADA\"),\r\n                    onPressed: (vale) => _onUpdate(\r\n                        0,\r\n                        vale ?? \"Field\",\r\n                        formResponse[index].fields![innerIndex].jsonName ??\r\n                            \"Field\"),\r\n                    focusNode: _focusNode,\r\n                    type: textInputType(\r\n                        formResponse[index].fields![innerIndex].type ?? \"NADA\"),\r\n                    keyField: formResponse[index].fields![innerIndex].label ??\r\n                        \"Field\")\r\n                : formResponse[index].fields![innerIndex].fieldType ==\r\n                        \"SelectList\"\r\n                    ? dropDownWidget(\r\n                        formResponse[index].fields![innerIndex].options,\r\n                        formResponse[index].fields![innerIndex].jsonName ??\r\n                            \"Field\")\r\n                    : formResponse[index].fields![innerIndex].fieldType ==\r\n                            \"SwitchInput\"\r\n                        ? SwitchListTile(\r\n                            value: switchValue,\r\n                            title: Text(\r\n                                formResponse[index].fields![innerIndex].label!),\r\n                            onChanged: (value) {\r\n                              setState(() {\r\n                                switchValue = !switchValue;\r\n                                _onUpdate(\r\n                                    0,\r\n                                    switchValue.toString(),\r\n                                    formResponse[index]\r\n                                            .fields![innerIndex]\r\n                                            .jsonName ??\r\n                                        \"Field\");\r\n                              });\r\n                            })\r\n                        : const Text(\"Other type\");\r\n      },\r\n      separatorBuilder: (BuildContext context, int index) {\r\n        return const SizedBox(height: 10);\r\n      },\r\n    );\r\n  }\r\n\r\n  Widget myDatePicker(String field) {\r\n    return GestureDetector(\r\n        onTap: () {\r\n          FocusScope.of(context).requestFocus(FocusNode());\r\n          _selectDate(context);\r\n        },\r\n        child: AbsorbPointer(\r\n          child: TextFormField(\r\n            onChanged: (value) {\r\n              _onUpdate(0, value, field);\r\n            },\r\n            controller: dateController,\r\n            obscureText: false,\r\n            cursorColor: Theme.of(context).primaryColor,\r\n            style: TextStyle(\r\n              color: Theme.of(context).primaryColor,\r\n              fontSize: 14.0,\r\n            ),\r\n            decoration: InputDecoration(\r\n              labelStyle: TextStyle(color: Theme.of(context).primaryColor),\r\n              focusColor: Theme.of(context).primaryColor,\r\n              filled: true,\r\n              enabledBorder: UnderlineInputBorder(\r\n                borderRadius: BorderRadius.circular(10),\r\n                borderSide: BorderSide.none,\r\n              ),\r\n              focusedBorder: OutlineInputBorder(\r\n                borderRadius: BorderRadius.circular(10),\r\n                borderSide: BorderSide(color: Theme.of(context).primaryColor),\r\n              ),\r\n              labelText: \"Date select\",\r\n              prefixIcon: const Icon(\r\n                Icons.calendar_today,\r\n                size: 18,\r\n              ),\r\n            ),\r\n          ),\r\n        ));\r\n  }\r\n\r\n  DateTime selectedDate = DateTime.now();\r\n\r\n  Future _selectDate(BuildContext context) async {\r\n    final DateTime? picked = await showDatePicker(\r\n        context: context,\r\n        initialDate: selectedDate,\r\n        firstDate: DateTime(1970),\r\n        lastDate: DateTime.now());\r\n    if (picked != null && picked != selectedDate) {\r\n      setState(() {\r\n        var date = DateTime.parse(picked.toString());\r\n        var formatted = \"${date.year}-${date.month}-${date.day}\";\r\n        dateController = TextEditingController();\r\n        dateController = TextEditingController(text: formatted.toString());\r\n      });\r\n    }\r\n  }\r\n\r\n  dropDownWidget(List<Options>? items, String value) {\r\n    return DropdownButtonFormField<Options>(\r\n      // Initial Value\r\n      value: dropdownvalue,\r\n      decoration: InputDecoration(\r\n        border: const OutlineInputBorder(\r\n          borderRadius: BorderRadius.all(\r\n            Radius.circular(10.0),\r\n          ),\r\n        ),\r\n        filled: true,\r\n        hintStyle: TextStyle(color: Colors.grey[800]),\r\n        hintText: items!.first.optionLabel!,\r\n      ),\r\n      borderRadius: BorderRadius.circular(10),\r\n\r\n      // Down Arrow Icon\r\n      icon: const Icon(Icons.keyboard_arrow_down),\r\n\r\n      // Array list of items\r\n      items: items.map((Options items) {\r\n        return DropdownMenuItem<Options>(\r\n          value: items,\r\n          child: Text(items.optionValue!),\r\n        );\r\n      }).toList(),\r\n      // After selecting the desired option,it will\r\n      // change button value to selected value\r\n      onChanged: (newValue) {\r\n        setState(() {\r\n          dropdownvalue = newValue!;\r\n          _onUpdate(0, dropdownvalue.optionValue, value);\r\n        });\r\n      },\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}