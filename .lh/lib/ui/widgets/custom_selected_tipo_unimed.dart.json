{
    "sourceFile": "lib/ui/widgets/custom_selected_tipo_unimed.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1709679597314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1709682177167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,306 @@\n+// Copyright 2019 Aleksander Woźniak\r\n+// SPDX-License-Identifier: Apache-2.0\r\n+\r\n+import 'package:flutter/material.dart';\r\n+import 'package:task_manager_flutter/data/constants/custom_colors.dart';\r\n+import 'package:dropdown_button2/dropdown_button2.dart';\r\n+import 'package:task_manager_flutter/data/utils/api_links.dart';\r\n+import 'package:task_manager_flutter/data/models/network_response.dart';\r\n+import 'package:task_manager_flutter/data/services/network_caller.dart';\r\n+\r\n+final List<Map<String, dynamic>> _dataArray = []; //add this\r\n+String? _data = \"\"; //add this\r\n+List<String> diasSelectedItems = [];\r\n+List<String> dias = [];\r\n+\r\n+class GetModalidade {\r\n+  test() {\r\n+    return _dataArray;\r\n+  }\r\n+}\r\n+\r\n+class SelectedFormUniMed extends StatefulWidget {\r\n+  const SelectedFormUniMed({super.key});\r\n+\r\n+  @override\r\n+  State<SelectedFormUniMed> createState() => _SelectedFormUniMed();\r\n+}\r\n+\r\n+class _SelectedFormUniMed extends State<SelectedFormUniMed> {\r\n+  final int _formCount = 1; //add this\r\n+  bool isLoading = true;\r\n+\r\n+  late FocusNode _focusNode;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    _focusNode = FocusNode();\r\n+    super.initState();\r\n+    getSelected();\r\n+  }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    _focusNode.dispose();\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  Future<List<String>> getSelected() async {\r\n+    isLoading = true;\r\n+    List<String> modalidadeList = [];\r\n+    if (mounted) {\r\n+      setState(() {});\r\n+    }\r\n+    Map<String, dynamic> requestBody = {};\r\n+    final NetworkResponse response =\r\n+        await NetworkCaller().postRequest(ApiLinks.allUniMeds, requestBody);\r\n+    isLoading = false;\r\n+\r\n+    if (mounted) {\r\n+      setState(() {\r\n+        dias = ['Deu Certo'];\r\n+      });\r\n+    }\r\n+    final decoded = (response.body) as Map;\r\n+\r\n+    if (response.isSuccess) {\r\n+      if (mounted) {\r\n+        // final datass = json.decode(response.body);\r\n+        final data = decoded['data'];\r\n+        print(data[0]['nome']); // prints 3.672940\r\n+        dias = [];\r\n+        for (final name in data) {\r\n+          final value = name['id'];\r\n+          final nome = name['nome'];\r\n+          modalidadeList.add(nome);\r\n+          dias.add(nome);\r\n+          print('$value,$nome'); // prints entries like \"AED,3.672940\"\r\n+        }\r\n+      }\r\n+    } else {\r\n+      if (mounted) {\r\n+        ScaffoldMessenger.of(context).showSnackBar(\r\n+          const SnackBar(\r\n+            content: Text(\"Profile update Failed\"),\r\n+          ),\r\n+        );\r\n+      }\r\n+    }\r\n+    return modalidadeList;\r\n+  }\r\n+\r\n+  void _onUpdate(int key, String? value, chave) {\r\n+    void addData() {\r\n+      Map<String, dynamic> json = {\r\n+        'id': key,\r\n+        chave: value,\r\n+        chave: value,\r\n+        chave: value,\r\n+        chave: value\r\n+      };\r\n+      _dataArray.add(json);\r\n+      setState(() {\r\n+        _data = _dataArray.toString();\r\n+      });\r\n+    }\r\n+\r\n+    if (_dataArray.isEmpty) {\r\n+      addData();\r\n+    } else {\r\n+      _dataArray.asMap().entries.map((entry) {\r\n+        if (entry.key == key && entry.value == chave) {\r\n+          _dataArray[key][chave] = value;\r\n+        }\r\n+        print(entry.key);\r\n+        print(entry.value);\r\n+      });\r\n+\r\n+      for (var map in _dataArray) {\r\n+        if (map[\"id\"] == key) {\r\n+          _dataArray[key][chave] = value;\r\n+          setState(() {\r\n+            _data = _dataArray.toString();\r\n+          });\r\n+          break;\r\n+        }\r\n+      }\r\n+\r\n+      for (var map in _dataArray) {\r\n+        if (map[\"id\"] == key) {\r\n+          return;\r\n+        }\r\n+      }\r\n+      addData();\r\n+    }\r\n+  }\r\n+\r\n+  Widget selected(\r\n+          int key, String hit, int? maxLine, TextInputType tipo, chave) =>\r\n+      Padding(\r\n+        padding: const EdgeInsets.symmetric(vertical: 3),\r\n+        child: Center(\r\n+          child: Column(\r\n+            mainAxisAlignment: MainAxisAlignment.center,\r\n+            children: [\r\n+              DropdownButtonHideUnderline(\r\n+                child: DropdownButton2<String>(\r\n+                  isExpanded: true,\r\n+                  hint: Text(\r\n+                    'Tipo Refeição',\r\n+                    style: TextStyle(\r\n+                      fontSize: 14,\r\n+                      color: CustomColors().getAppLabelBotton(),\r\n+                    ),\r\n+                  ),\r\n+                  items: dias.map((item) {\r\n+                    return DropdownMenuItem(\r\n+                      value: item,\r\n+                      //disable default onTap to avoid closing menu when selecting an item\r\n+                      enabled: false,\r\n+                      child: StatefulBuilder(\r\n+                        builder: (context, menuSetState) {\r\n+                          final isSelected = diasSelectedItems.contains(item);\r\n+                          return InkWell(\r\n+                            onTap: () {\r\n+                              isSelected\r\n+                                  ? diasSelectedItems.remove(item)\r\n+                                  : diasSelectedItems.add(item);\r\n+                              //This rebuilds the StatefulWidget to update the button's text\r\n+                              _onUpdate(\r\n+                                  key, diasSelectedItems.join(\",\"), chave);\r\n+                              setState(() {});\r\n+                              //This rebuilds the dropdownMenu Widget to update the check mark\r\n+                              menuSetState(() {\r\n+                                print(item);\r\n+                              });\r\n+                            },\r\n+                            child: Container(\r\n+                              height: double.infinity,\r\n+                              padding:\r\n+                                  const EdgeInsets.symmetric(horizontal: 16.0),\r\n+                              child: Row(\r\n+                                children: [\r\n+                                  if (isSelected)\r\n+                                    const Icon(Icons.check_box_outlined)\r\n+                                  else\r\n+                                    const Icon(Icons.check_box_outline_blank),\r\n+                                  const SizedBox(width: 16),\r\n+                                  Expanded(\r\n+                                    child: Text(\r\n+                                      item,\r\n+                                      style: const TextStyle(\r\n+                                        fontSize: 14,\r\n+                                      ),\r\n+                                    ),\r\n+                                  ),\r\n+                                ],\r\n+                              ),\r\n+                            ),\r\n+                          );\r\n+                        },\r\n+                      ),\r\n+                    );\r\n+                  }).toList(),\r\n+                  //Use last selected item as the current value so if we've limited menu height, it scroll to last item.\r\n+                  value:\r\n+                      diasSelectedItems.isEmpty ? null : diasSelectedItems.last,\r\n+                  onChanged: (vale) => _onUpdate(key, vale, chave),\r\n+\r\n+                  selectedItemBuilder: (context) {\r\n+                    return diasSelectedItems.map(\r\n+                      (item) {\r\n+                        return Container(\r\n+                          alignment: AlignmentDirectional.center,\r\n+                          child: Text(\r\n+                            diasSelectedItems.join(', '),\r\n+                            style: const TextStyle(\r\n+                              fontSize: 14,\r\n+                              overflow: TextOverflow.ellipsis,\r\n+                            ),\r\n+                            maxLines: 1,\r\n+                          ),\r\n+                        );\r\n+                      },\r\n+                    ).toList();\r\n+                  },\r\n+                  buttonStyleData: ButtonStyleData(\r\n+                    height: 50,\r\n+                    width: 280,\r\n+                    padding: const EdgeInsets.only(left: 14, right: 14),\r\n+                    decoration: BoxDecoration(\r\n+                      borderRadius: BorderRadius.circular(14),\r\n+                      border: Border.all(\r\n+                        color: Colors.black26,\r\n+                      ),\r\n+                      color: CustomColors().getAppBotton(),\r\n+                    ),\r\n+                    elevation: 2,\r\n+                  ),\r\n+                  iconStyleData: const IconStyleData(\r\n+                    icon: Icon(\r\n+                      Icons.arrow_forward_ios_outlined,\r\n+                    ),\r\n+                    iconSize: 14,\r\n+                    iconEnabledColor: Colors.yellow,\r\n+                    iconDisabledColor: Colors.grey,\r\n+                  ),\r\n+                  dropdownStyleData: DropdownStyleData(\r\n+                    maxHeight: 200,\r\n+                    width: 200,\r\n+                    decoration: BoxDecoration(\r\n+                      borderRadius: BorderRadius.circular(14),\r\n+                      color: CustomColors().getAppBotton(),\r\n+                    ),\r\n+                    offset: const Offset(-20, 0),\r\n+                    scrollbarTheme: ScrollbarThemeData(\r\n+                      radius: const Radius.circular(40),\r\n+                      thickness: MaterialStateProperty.all(6),\r\n+                      thumbVisibility: MaterialStateProperty.all(true),\r\n+                    ),\r\n+                  ),\r\n+                  menuItemStyleData: const MenuItemStyleData(\r\n+                    height: 40,\r\n+                    padding: EdgeInsets.only(left: 14, right: 14),\r\n+                  ),\r\n+                ),\r\n+              ),\r\n+            ],\r\n+          ),\r\n+        ),\r\n+      );\r\n+\r\n+  Widget form(int key) => Padding(\r\n+        padding: const EdgeInsets.only(bottom: 15.0),\r\n+        child: Container(\r\n+          padding: EdgeInsets.zero,\r\n+          color: CustomColors().getAppFundoClaro(),\r\n+          child: Column(\r\n+            mainAxisAlignment: MainAxisAlignment.center,\r\n+            children: <Widget>[\r\n+              selected(\r\n+                  key, \"Tipo Refeição\", null, TextInputType.text, 'diaAtene'),\r\n+            ],\r\n+          ),\r\n+        ),\r\n+      );\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    final platform = Theme.of(context).platform;\r\n+\r\n+    return Padding(\r\n+      padding: const EdgeInsets.symmetric(vertical: 3),\r\n+      child: SingleChildScrollView(\r\n+        child: Padding(\r\n+          padding: const EdgeInsets.symmetric(horizontal: 25.0),\r\n+          child: Column(\r\n+            crossAxisAlignment: CrossAxisAlignment.center,\r\n+            children: <Widget>[\r\n+              ...List.generate(_formCount, (index) => form(index)),\r\n+            ],\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1709743163315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,13 +66,13 @@\n     if (response.isSuccess) {\r\n       if (mounted) {\r\n         // final datass = json.decode(response.body);\r\n         final data = decoded['data'];\r\n-        print(data[0]['nome']); // prints 3.672940\r\n+        print(data[0]['descricao']); // prints 3.672940\r\n         dias = [];\r\n         for (final name in data) {\r\n           final value = name['id'];\r\n-          final nome = name['nome'];\r\n+          final nome = name['descricao'];\r\n           modalidadeList.add(nome);\r\n           dias.add(nome);\r\n           print('$value,$nome'); // prints entries like \"AED,3.672940\"\r\n         }\r\n"
                }
            ],
            "date": 1709679597314,
            "name": "Commit-0",
            "content": "// Copyright 2019 Aleksander Woźniak\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport 'package:flutter/material.dart';\r\nimport 'package:task_manager_flutter/data/constants/custom_colors.dart';\r\nimport 'package:dropdown_button2/dropdown_button2.dart';\r\nimport 'package:task_manager_flutter/data/utils/api_links.dart';\r\nimport 'package:task_manager_flutter/data/models/network_response.dart';\r\nimport 'package:task_manager_flutter/data/services/network_caller.dart';\r\n\r\nfinal List<Map<String, dynamic>> _dataArray = []; //add this\r\nString? _data = \"\"; //add this\r\nList<String> diasSelectedItems = [];\r\nList<String> dias = [];\r\n\r\nclass GetModalidade {\r\n  test() {\r\n    return _dataArray;\r\n  }\r\n}\r\n\r\nclass SelectedFormUniMed extends StatefulWidget {\r\n  const SelectedFormUniMed({super.key});\r\n\r\n  @override\r\n  State<SelectedFormUniMed> createState() => _SelectedFormUniMed();\r\n}\r\n\r\nclass _SelectedFormUniMed extends State<SelectedFormUniMed> {\r\n  final int _formCount = 1; //add this\r\n  bool isLoading = true;\r\n\r\n  late FocusNode _focusNode;\r\n\r\n  @override\r\n  void initState() {\r\n    _focusNode = FocusNode();\r\n    super.initState();\r\n    getSelected();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _focusNode.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  Future<List<String>> getSelected() async {\r\n    isLoading = true;\r\n    List<String> modalidadeList = [];\r\n    if (mounted) {\r\n      setState(() {});\r\n    }\r\n    Map<String, dynamic> requestBody = {};\r\n    final NetworkResponse response = await NetworkCaller()\r\n        .postRequest(ApiLinks.allTipoRefeicao, requestBody);\r\n    isLoading = false;\r\n\r\n    if (mounted) {\r\n      setState(() {\r\n        dias = ['Deu Certo'];\r\n      });\r\n    }\r\n    final decoded = (response.body) as Map;\r\n\r\n    if (response.isSuccess) {\r\n      if (mounted) {\r\n        // final datass = json.decode(response.body);\r\n        final data = decoded['data'];\r\n        print(data[0]['nome']); // prints 3.672940\r\n        dias = [];\r\n        for (final name in data) {\r\n          final value = name['id'];\r\n          final nome = name['nome'];\r\n          modalidadeList.add(nome);\r\n          dias.add(nome);\r\n          print('$value,$nome'); // prints entries like \"AED,3.672940\"\r\n        }\r\n      }\r\n    } else {\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          const SnackBar(\r\n            content: Text(\"Profile update Failed\"),\r\n          ),\r\n        );\r\n      }\r\n    }\r\n    return modalidadeList;\r\n  }\r\n\r\n  void _onUpdate(int key, String? value, chave) {\r\n    void addData() {\r\n      Map<String, dynamic> json = {\r\n        'id': key,\r\n        chave: value,\r\n        chave: value,\r\n        chave: value,\r\n        chave: value\r\n      };\r\n      _dataArray.add(json);\r\n      setState(() {\r\n        _data = _dataArray.toString();\r\n      });\r\n    }\r\n\r\n    if (_dataArray.isEmpty) {\r\n      addData();\r\n    } else {\r\n      _dataArray.asMap().entries.map((entry) {\r\n        if (entry.key == key && entry.value == chave) {\r\n          _dataArray[key][chave] = value;\r\n        }\r\n        print(entry.key);\r\n        print(entry.value);\r\n      });\r\n\r\n      for (var map in _dataArray) {\r\n        if (map[\"id\"] == key) {\r\n          _dataArray[key][chave] = value;\r\n          setState(() {\r\n            _data = _dataArray.toString();\r\n          });\r\n          break;\r\n        }\r\n      }\r\n\r\n      for (var map in _dataArray) {\r\n        if (map[\"id\"] == key) {\r\n          return;\r\n        }\r\n      }\r\n      addData();\r\n    }\r\n  }\r\n\r\n  Widget selected(\r\n          int key, String hit, int? maxLine, TextInputType tipo, chave) =>\r\n      Padding(\r\n        padding: const EdgeInsets.symmetric(vertical: 3),\r\n        child: Center(\r\n          child: Column(\r\n            mainAxisAlignment: MainAxisAlignment.center,\r\n            children: [\r\n              DropdownButtonHideUnderline(\r\n                child: DropdownButton2<String>(\r\n                  isExpanded: true,\r\n                  hint: Text(\r\n                    'Tipo Refeição',\r\n                    style: TextStyle(\r\n                      fontSize: 14,\r\n                      color: CustomColors().getAppLabelBotton(),\r\n                    ),\r\n                  ),\r\n                  items: dias.map((item) {\r\n                    return DropdownMenuItem(\r\n                      value: item,\r\n                      //disable default onTap to avoid closing menu when selecting an item\r\n                      enabled: false,\r\n                      child: StatefulBuilder(\r\n                        builder: (context, menuSetState) {\r\n                          final isSelected = diasSelectedItems.contains(item);\r\n                          return InkWell(\r\n                            onTap: () {\r\n                              isSelected\r\n                                  ? diasSelectedItems.remove(item)\r\n                                  : diasSelectedItems.add(item);\r\n                              //This rebuilds the StatefulWidget to update the button's text\r\n                              _onUpdate(\r\n                                  key, diasSelectedItems.join(\",\"), chave);\r\n                              setState(() {});\r\n                              //This rebuilds the dropdownMenu Widget to update the check mark\r\n                              menuSetState(() {\r\n                                print(item);\r\n                              });\r\n                            },\r\n                            child: Container(\r\n                              height: double.infinity,\r\n                              padding:\r\n                                  const EdgeInsets.symmetric(horizontal: 16.0),\r\n                              child: Row(\r\n                                children: [\r\n                                  if (isSelected)\r\n                                    const Icon(Icons.check_box_outlined)\r\n                                  else\r\n                                    const Icon(Icons.check_box_outline_blank),\r\n                                  const SizedBox(width: 16),\r\n                                  Expanded(\r\n                                    child: Text(\r\n                                      item,\r\n                                      style: const TextStyle(\r\n                                        fontSize: 14,\r\n                                      ),\r\n                                    ),\r\n                                  ),\r\n                                ],\r\n                              ),\r\n                            ),\r\n                          );\r\n                        },\r\n                      ),\r\n                    );\r\n                  }).toList(),\r\n                  //Use last selected item as the current value so if we've limited menu height, it scroll to last item.\r\n                  value:\r\n                      diasSelectedItems.isEmpty ? null : diasSelectedItems.last,\r\n                  onChanged: (vale) => _onUpdate(key, vale, chave),\r\n\r\n                  selectedItemBuilder: (context) {\r\n                    return diasSelectedItems.map(\r\n                      (item) {\r\n                        return Container(\r\n                          alignment: AlignmentDirectional.center,\r\n                          child: Text(\r\n                            diasSelectedItems.join(', '),\r\n                            style: const TextStyle(\r\n                              fontSize: 14,\r\n                              overflow: TextOverflow.ellipsis,\r\n                            ),\r\n                            maxLines: 1,\r\n                          ),\r\n                        );\r\n                      },\r\n                    ).toList();\r\n                  },\r\n                  buttonStyleData: ButtonStyleData(\r\n                    height: 50,\r\n                    width: 280,\r\n                    padding: const EdgeInsets.only(left: 14, right: 14),\r\n                    decoration: BoxDecoration(\r\n                      borderRadius: BorderRadius.circular(14),\r\n                      border: Border.all(\r\n                        color: Colors.black26,\r\n                      ),\r\n                      color: CustomColors().getAppBotton(),\r\n                    ),\r\n                    elevation: 2,\r\n                  ),\r\n                  iconStyleData: const IconStyleData(\r\n                    icon: Icon(\r\n                      Icons.arrow_forward_ios_outlined,\r\n                    ),\r\n                    iconSize: 14,\r\n                    iconEnabledColor: Colors.yellow,\r\n                    iconDisabledColor: Colors.grey,\r\n                  ),\r\n                  dropdownStyleData: DropdownStyleData(\r\n                    maxHeight: 200,\r\n                    width: 200,\r\n                    decoration: BoxDecoration(\r\n                      borderRadius: BorderRadius.circular(14),\r\n                      color: CustomColors().getAppBotton(),\r\n                    ),\r\n                    offset: const Offset(-20, 0),\r\n                    scrollbarTheme: ScrollbarThemeData(\r\n                      radius: const Radius.circular(40),\r\n                      thickness: MaterialStateProperty.all(6),\r\n                      thumbVisibility: MaterialStateProperty.all(true),\r\n                    ),\r\n                  ),\r\n                  menuItemStyleData: const MenuItemStyleData(\r\n                    height: 40,\r\n                    padding: EdgeInsets.only(left: 14, right: 14),\r\n                  ),\r\n                ),\r\n              ),\r\n            ],\r\n          ),\r\n        ),\r\n      );\r\n\r\n  Widget form(int key) => Padding(\r\n        padding: const EdgeInsets.only(bottom: 15.0),\r\n        child: Container(\r\n          padding: EdgeInsets.zero,\r\n          color: CustomColors().getAppFundoClaro(),\r\n          child: Column(\r\n            mainAxisAlignment: MainAxisAlignment.center,\r\n            children: <Widget>[\r\n              selected(\r\n                  key, \"Tipo Refeição\", null, TextInputType.text, 'diaAtene'),\r\n            ],\r\n          ),\r\n        ),\r\n      );\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final platform = Theme.of(context).platform;\r\n\r\n    return Padding(\r\n      padding: const EdgeInsets.symmetric(vertical: 3),\r\n      child: SingleChildScrollView(\r\n        child: Padding(\r\n          padding: const EdgeInsets.symmetric(horizontal: 25.0),\r\n          child: Column(\r\n            crossAxisAlignment: CrossAxisAlignment.center,\r\n            children: <Widget>[\r\n              ...List.generate(_formCount, (index) => form(index)),\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}