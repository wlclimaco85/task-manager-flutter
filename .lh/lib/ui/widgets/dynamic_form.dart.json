{
    "sourceFile": "lib/ui/widgets/dynamic_form.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1707188148366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1707190492628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,13 +64,38 @@\n                           style: const TextStyle(\r\n                               fontSize: 16, fontWeight: FontWeight.bold),\r\n                         ),\r\n                         const SizedBox(height: 20),\r\n-                        myFormType(index)\r\n+                        myFormType(index),\r\n+                        Row(\r\n+                  mainAxisAlignment: MainAxisAlignment.center,\r\n+                  children: [\r\n+                    const Text(\r\n+                      \"Have an Account?\",\r\n+                      style: TextStyle(fontWeight: FontWeight.w500),\r\n+                    ),\r\n+                    const SizedBox(\r\n+                      width: 2,\r\n+                    ),\r\n+                    TextButton(\r\n+                      onPressed: () {\r\n+                        Navigator.push(\r\n+                            context,\r\n+                            MaterialPageRoute(\r\n+                                builder: (context) => const LoginScreen()));\r\n+                      },\r\n+                      child: const Text(\r\n+                        \"Login\",\r\n+                        style: TextStyle(letterSpacing: .7),\r\n+                      ),\r\n+                    ),\r\n+                  ],\r\n+                ),\r\n                       ],\r\n                     );\r\n                   }),\r\n             ),\r\n+            \r\n     );\r\n   }\r\n \r\n   myFormType(index) {\r\n"
                },
                {
                    "date": 1707190509091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import 'dart:convert';\r\n \r\n import 'package:flutter/material.dart';\r\n-\r\n+import 'package:task_manager_flutter/ui/screens/auth_screens/login_screen.dart';\r\n import 'form_model.dart';\r\n \r\n class DynamicForm extends StatefulWidget {\r\n   const DynamicForm({super.key});\r\n"
                },
                {
                    "date": 1707238430057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,15 @@\n       body: isLoading\r\n           ? const Center(\r\n               child: CircularProgressIndicator(),\r\n             )\r\n-          : Padding(\r\n+          : Flexible(\r\n+                child: Container(\r\n+                  height: 140,\r\n+                  color: const Color(0xFF5937B2),\r\n+                  child: Column(\r\n+                    children: [ \r\n+                      Padding(\r\n               padding: const EdgeInsets.all(8.0),\r\n               child: ListView.builder(\r\n                   itemCount: formResponse.length,\r\n                   shrinkWrap: true,\r\n@@ -93,8 +99,9 @@\n                       ],\r\n                     );\r\n                   }),\r\n             ),\r\n+                    ],\r\n             \r\n     );\r\n   }\r\n \r\n"
                },
                {
                    "date": 1707238446790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,8 +99,9 @@\n                       ],\r\n                     );\r\n                   }),\r\n             ),\r\n+                  ),\r\n                     ],\r\n             \r\n     );\r\n   }\r\n"
                },
                {
                    "date": 1707238483229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,10 +99,11 @@\n                       ],\r\n                     );\r\n                   }),\r\n             ),\r\n+                    ],\r\n                   ),\r\n-                    ],\r\n+                  ),\r\n             \r\n     );\r\n   }\r\n \r\n"
                },
                {
                    "date": 1707238493669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,8 +103,9 @@\n                     ],\r\n                   ),\r\n                   ),\r\n             \r\n+    ),\r\n     );\r\n   }\r\n \r\n   myFormType(index) {\r\n"
                },
                {
                    "date": 1707238507238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,240 @@\n+import 'dart:convert';\r\n+\r\n+import 'package:flutter/material.dart';\r\n+import 'package:task_manager_flutter/ui/screens/auth_screens/login_screen.dart';\r\n+import 'form_model.dart';\r\n+\r\n+class DynamicForm extends StatefulWidget {\r\n+  const DynamicForm({super.key});\r\n+\r\n+  @override\r\n+  State<DynamicForm> createState() => _DynamicFormState();\r\n+}\r\n+\r\n+class _DynamicFormState extends State<DynamicForm> {\r\n+  List<ResponseForm> formResponse = [];\r\n+  bool isLoading = true;\r\n+  var dropdownvalue;\r\n+  var dateController = TextEditingController();\r\n+  bool switchValue = false;\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    WidgetsBinding.instance.addPostFrameCallback((_) async {\r\n+      await getFromJson();\r\n+    });\r\n+  }\r\n+\r\n+  getFromJson() async {\r\n+    String data = await DefaultAssetBundle.of(context)\r\n+        .loadString(\"assets/json/form.json\");\r\n+    final jsonResult = jsonDecode(data);\r\n+\r\n+    setState(() {\r\n+      jsonResult.forEach(\r\n+          (element) => formResponse.add(ResponseForm.fromJson(element)));\r\n+\r\n+      isLoading = false;\r\n+    });\r\n+\r\n+    print(formResponse.length);\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Scaffold(\r\n+      appBar: AppBar(\r\n+        title: const Text(\"Dynamic Form\"),\r\n+      ),\r\n+      body: isLoading\r\n+          ? const Center(\r\n+              child: CircularProgressIndicator(),\r\n+            )\r\n+          : Flexible(\r\n+                child: Container(\r\n+                  color: const Color(0xFF5937B2),\r\n+                  child: Column(\r\n+                    children: [ \r\n+                      Padding(\r\n+              padding: const EdgeInsets.all(8.0),\r\n+              child: ListView.builder(\r\n+                  itemCount: formResponse.length,\r\n+                  shrinkWrap: true,\r\n+                  itemBuilder: (context, index) {\r\n+                    return Column(\r\n+                      crossAxisAlignment: CrossAxisAlignment.start,\r\n+                      children: [\r\n+                        Text(\r\n+                          formResponse[index].title!,\r\n+                          style: const TextStyle(\r\n+                              fontSize: 16, fontWeight: FontWeight.bold),\r\n+                        ),\r\n+                        const SizedBox(height: 20),\r\n+                        myFormType(index),\r\n+                        Row(\r\n+                  mainAxisAlignment: MainAxisAlignment.center,\r\n+                  children: [\r\n+                    const Text(\r\n+                      \"Have an Account?\",\r\n+                      style: TextStyle(fontWeight: FontWeight.w500),\r\n+                    ),\r\n+                    const SizedBox(\r\n+                      width: 2,\r\n+                    ),\r\n+                    TextButton(\r\n+                      onPressed: () {\r\n+                        Navigator.push(\r\n+                            context,\r\n+                            MaterialPageRoute(\r\n+                                builder: (context) => const LoginScreen()));\r\n+                      },\r\n+                      child: const Text(\r\n+                        \"Login\",\r\n+                        style: TextStyle(letterSpacing: .7),\r\n+                      ),\r\n+                    ),\r\n+                  ],\r\n+                ),\r\n+                      ],\r\n+                    );\r\n+                  }),\r\n+            ),\r\n+                    ],\r\n+                  ),\r\n+                  ),\r\n+            \r\n+    ),\r\n+    );\r\n+  }\r\n+\r\n+  myFormType(index) {\r\n+    return ListView.separated(\r\n+      itemCount: formResponse[index].fields!.length,\r\n+      shrinkWrap: true,\r\n+      itemBuilder: (context, innerIndex) {\r\n+        return formResponse[index].fields![innerIndex].fieldType ==\r\n+                \"DatetimePicker\"\r\n+            ? myDatePicker()\r\n+            : formResponse[index].fields![innerIndex].fieldType == \"TextInput\"\r\n+                ? TextField(\r\n+                    decoration: InputDecoration(\r\n+                      border: const OutlineInputBorder(),\r\n+                      hintText: formResponse[index].fields![innerIndex].label,\r\n+                    ),\r\n+                  )\r\n+                : formResponse[index].fields![innerIndex].fieldType ==\r\n+                        \"SelectList\"\r\n+                    ? dropDownWidget(\r\n+                        formResponse[index].fields![innerIndex].options)\r\n+                    : formResponse[index].fields![innerIndex].fieldType ==\r\n+                            \"SwitchInput\"\r\n+                        ? SwitchListTile(\r\n+                            value: switchValue,\r\n+                            title: Text(\r\n+                                formResponse[index].fields![innerIndex].label!),\r\n+                            onChanged: (value) {\r\n+                              setState(() {\r\n+                                switchValue = !switchValue;\r\n+                              });\r\n+                            })\r\n+                        : const Text(\"Other type\");\r\n+      },\r\n+      separatorBuilder: (BuildContext context, int index) {\r\n+        return const SizedBox(height: 10);\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  Widget myDatePicker() {\r\n+    return GestureDetector(\r\n+        onTap: () {\r\n+          FocusScope.of(context).requestFocus(FocusNode());\r\n+          _selectDate(context);\r\n+        },\r\n+        child: AbsorbPointer(\r\n+          child: TextFormField(\r\n+            onChanged: (value) {},\r\n+            controller: dateController,\r\n+            obscureText: false,\r\n+            cursorColor: Theme.of(context).primaryColor,\r\n+            style: TextStyle(\r\n+              color: Theme.of(context).primaryColor,\r\n+              fontSize: 14.0,\r\n+            ),\r\n+            decoration: InputDecoration(\r\n+              labelStyle: TextStyle(color: Theme.of(context).primaryColor),\r\n+              focusColor: Theme.of(context).primaryColor,\r\n+              filled: true,\r\n+              enabledBorder: UnderlineInputBorder(\r\n+                borderRadius: BorderRadius.circular(10),\r\n+                borderSide: BorderSide.none,\r\n+              ),\r\n+              focusedBorder: OutlineInputBorder(\r\n+                borderRadius: BorderRadius.circular(10),\r\n+                borderSide: BorderSide(color: Theme.of(context).primaryColor),\r\n+              ),\r\n+              labelText: \"Date select\",\r\n+              prefixIcon: const Icon(\r\n+                Icons.calendar_today,\r\n+                size: 18,\r\n+              ),\r\n+            ),\r\n+          ),\r\n+        ));\r\n+  }\r\n+\r\n+  DateTime selectedDate = DateTime.now();\r\n+\r\n+  Future _selectDate(BuildContext context) async {\r\n+    final DateTime? picked = await showDatePicker(\r\n+        context: context,\r\n+        initialDate: selectedDate,\r\n+        firstDate: DateTime(1970),\r\n+        lastDate: DateTime.now());\r\n+    if (picked != null && picked != selectedDate) {\r\n+      setState(() {\r\n+        var date = DateTime.parse(picked.toString());\r\n+        var formatted = \"${date.year}-${date.month}-${date.day}\";\r\n+        dateController = TextEditingController();\r\n+        dateController = TextEditingController(text: formatted.toString());\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  dropDownWidget(List<Options>? items) {\r\n+    return DropdownButtonFormField<Options>(\r\n+      // Initial Value\r\n+      value: dropdownvalue,\r\n+      decoration: InputDecoration(\r\n+        border: const OutlineInputBorder(\r\n+          borderRadius: BorderRadius.all(\r\n+            Radius.circular(10.0),\r\n+          ),\r\n+        ),\r\n+        filled: true,\r\n+        hintStyle: TextStyle(color: Colors.grey[800]),\r\n+        hintText: items!.first.optionLabel!,\r\n+      ),\r\n+      borderRadius: BorderRadius.circular(10),\r\n+\r\n+\r\n+      // Down Arrow Icon\r\n+      icon: const Icon(Icons.keyboard_arrow_down),\r\n+\r\n+      // Array list of items\r\n+      items: items.map((Options items) {\r\n+        return DropdownMenuItem<Options>(\r\n+          value: items,\r\n+          child: Text(items.optionValue!),\r\n+        );\r\n+      }).toList(),\r\n+      // After selecting the desired option,it will\r\n+      // change button value to selected value\r\n+      onChanged: (newValue) {\r\n+        setState(() {\r\n+          dropdownvalue = newValue!;\r\n+        });\r\n+      },\r\n+    );\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1707238583426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,238 @@\n+import 'dart:convert';\r\n+\r\n+import 'package:flutter/material.dart';\r\n+import 'package:task_manager_flutter/ui/screens/auth_screens/login_screen.dart';\r\n+import 'form_model.dart';\r\n+\r\n+class DynamicForm extends StatefulWidget {\r\n+  const DynamicForm({super.key});\r\n+\r\n+  @override\r\n+  State<DynamicForm> createState() => _DynamicFormState();\r\n+}\r\n+\r\n+class _DynamicFormState extends State<DynamicForm> {\r\n+  List<ResponseForm> formResponse = [];\r\n+  bool isLoading = true;\r\n+  var dropdownvalue;\r\n+  var dateController = TextEditingController();\r\n+  bool switchValue = false;\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    WidgetsBinding.instance.addPostFrameCallback((_) async {\r\n+      await getFromJson();\r\n+    });\r\n+  }\r\n+\r\n+  getFromJson() async {\r\n+    String data = await DefaultAssetBundle.of(context)\r\n+        .loadString(\"assets/json/form.json\");\r\n+    final jsonResult = jsonDecode(data);\r\n+\r\n+    setState(() {\r\n+      jsonResult.forEach(\r\n+          (element) => formResponse.add(ResponseForm.fromJson(element)));\r\n+\r\n+      isLoading = false;\r\n+    });\r\n+\r\n+    print(formResponse.length);\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Scaffold(\r\n+      appBar: AppBar(\r\n+        title: const Text(\"Dynamic Form\"),\r\n+      ),\r\n+      body: isLoading\r\n+          ? const Center(\r\n+              child: CircularProgressIndicator(),\r\n+            )\r\n+          : Flexible(\r\n+                child: Container(\r\n+                  color: const Color(0xFF5937B2),\r\n+                  child: Padding(\r\n+              padding: const EdgeInsets.all(8.0),\r\n+              child: ListView.builder(\r\n+                  itemCount: formResponse.length,\r\n+                  shrinkWrap: true,\r\n+                  itemBuilder: (context, index) {\r\n+                    return Column(\r\n+                      crossAxisAlignment: CrossAxisAlignment.start,\r\n+                      children: [\r\n+                        Text(\r\n+                          formResponse[index].title!,\r\n+                          style: const TextStyle(\r\n+                              fontSize: 16, fontWeight: FontWeight.bold),\r\n+                        ),\r\n+                        const SizedBox(height: 20),\r\n+                        myFormType(index),\r\n+                        Row(\r\n+                  mainAxisAlignment: MainAxisAlignment.center,\r\n+                  children: [\r\n+                    const Text(\r\n+                      \"Have an Account?\",\r\n+                      style: TextStyle(fontWeight: FontWeight.w500),\r\n+                    ),\r\n+                    const SizedBox(\r\n+                      width: 2,\r\n+                    ),\r\n+                    TextButton(\r\n+                      onPressed: () {\r\n+                        Navigator.push(\r\n+                            context,\r\n+                            MaterialPageRoute(\r\n+                                builder: (context) => const LoginScreen()));\r\n+                      },\r\n+                      child: const Text(\r\n+                        \"Login\",\r\n+                        style: TextStyle(letterSpacing: .7),\r\n+                      ),\r\n+                    ),\r\n+                  ],\r\n+                ),\r\n+                      ],\r\n+                    );\r\n+                  }),\r\n+            \r\n+                    ],\r\n+                  ),\r\n+                  ),\r\n+            \r\n+    ),\r\n+    );\r\n+  }\r\n+\r\n+  myFormType(index) {\r\n+    return ListView.separated(\r\n+      itemCount: formResponse[index].fields!.length,\r\n+      shrinkWrap: true,\r\n+      itemBuilder: (context, innerIndex) {\r\n+        return formResponse[index].fields![innerIndex].fieldType ==\r\n+                \"DatetimePicker\"\r\n+            ? myDatePicker()\r\n+            : formResponse[index].fields![innerIndex].fieldType == \"TextInput\"\r\n+                ? TextField(\r\n+                    decoration: InputDecoration(\r\n+                      border: const OutlineInputBorder(),\r\n+                      hintText: formResponse[index].fields![innerIndex].label,\r\n+                    ),\r\n+                  )\r\n+                : formResponse[index].fields![innerIndex].fieldType ==\r\n+                        \"SelectList\"\r\n+                    ? dropDownWidget(\r\n+                        formResponse[index].fields![innerIndex].options)\r\n+                    : formResponse[index].fields![innerIndex].fieldType ==\r\n+                            \"SwitchInput\"\r\n+                        ? SwitchListTile(\r\n+                            value: switchValue,\r\n+                            title: Text(\r\n+                                formResponse[index].fields![innerIndex].label!),\r\n+                            onChanged: (value) {\r\n+                              setState(() {\r\n+                                switchValue = !switchValue;\r\n+                              });\r\n+                            })\r\n+                        : const Text(\"Other type\");\r\n+      },\r\n+      separatorBuilder: (BuildContext context, int index) {\r\n+        return const SizedBox(height: 10);\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  Widget myDatePicker() {\r\n+    return GestureDetector(\r\n+        onTap: () {\r\n+          FocusScope.of(context).requestFocus(FocusNode());\r\n+          _selectDate(context);\r\n+        },\r\n+        child: AbsorbPointer(\r\n+          child: TextFormField(\r\n+            onChanged: (value) {},\r\n+            controller: dateController,\r\n+            obscureText: false,\r\n+            cursorColor: Theme.of(context).primaryColor,\r\n+            style: TextStyle(\r\n+              color: Theme.of(context).primaryColor,\r\n+              fontSize: 14.0,\r\n+            ),\r\n+            decoration: InputDecoration(\r\n+              labelStyle: TextStyle(color: Theme.of(context).primaryColor),\r\n+              focusColor: Theme.of(context).primaryColor,\r\n+              filled: true,\r\n+              enabledBorder: UnderlineInputBorder(\r\n+                borderRadius: BorderRadius.circular(10),\r\n+                borderSide: BorderSide.none,\r\n+              ),\r\n+              focusedBorder: OutlineInputBorder(\r\n+                borderRadius: BorderRadius.circular(10),\r\n+                borderSide: BorderSide(color: Theme.of(context).primaryColor),\r\n+              ),\r\n+              labelText: \"Date select\",\r\n+              prefixIcon: const Icon(\r\n+                Icons.calendar_today,\r\n+                size: 18,\r\n+              ),\r\n+            ),\r\n+          ),\r\n+        ));\r\n+  }\r\n+\r\n+  DateTime selectedDate = DateTime.now();\r\n+\r\n+  Future _selectDate(BuildContext context) async {\r\n+    final DateTime? picked = await showDatePicker(\r\n+        context: context,\r\n+        initialDate: selectedDate,\r\n+        firstDate: DateTime(1970),\r\n+        lastDate: DateTime.now());\r\n+    if (picked != null && picked != selectedDate) {\r\n+      setState(() {\r\n+        var date = DateTime.parse(picked.toString());\r\n+        var formatted = \"${date.year}-${date.month}-${date.day}\";\r\n+        dateController = TextEditingController();\r\n+        dateController = TextEditingController(text: formatted.toString());\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  dropDownWidget(List<Options>? items) {\r\n+    return DropdownButtonFormField<Options>(\r\n+      // Initial Value\r\n+      value: dropdownvalue,\r\n+      decoration: InputDecoration(\r\n+        border: const OutlineInputBorder(\r\n+          borderRadius: BorderRadius.all(\r\n+            Radius.circular(10.0),\r\n+          ),\r\n+        ),\r\n+        filled: true,\r\n+        hintStyle: TextStyle(color: Colors.grey[800]),\r\n+        hintText: items!.first.optionLabel!,\r\n+      ),\r\n+      borderRadius: BorderRadius.circular(10),\r\n+\r\n+\r\n+      // Down Arrow Icon\r\n+      icon: const Icon(Icons.keyboard_arrow_down),\r\n+\r\n+      // Array list of items\r\n+      items: items.map((Options items) {\r\n+        return DropdownMenuItem<Options>(\r\n+          value: items,\r\n+          child: Text(items.optionValue!),\r\n+        );\r\n+      }).toList(),\r\n+      // After selecting the desired option,it will\r\n+      // change button value to selected value\r\n+      onChanged: (newValue) {\r\n+        setState(() {\r\n+          dropdownvalue = newValue!;\r\n+        });\r\n+      },\r\n+    );\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1707238590610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,10 +95,8 @@\n                 ),\r\n                       ],\r\n                     );\r\n                   }),\r\n-            \r\n-                    ],\r\n                   ),\r\n                   ),\r\n             \r\n     ),\r\n@@ -234,486 +232,5 @@\n         });\r\n       },\r\n     );\r\n   }\r\n-}\n-import 'dart:convert';\r\n-\r\n-import 'package:flutter/material.dart';\r\n-import 'package:task_manager_flutter/ui/screens/auth_screens/login_screen.dart';\r\n-import 'form_model.dart';\r\n-\r\n-class DynamicForm extends StatefulWidget {\r\n-  const DynamicForm({super.key});\r\n-\r\n-  @override\r\n-  State<DynamicForm> createState() => _DynamicFormState();\r\n-}\r\n-\r\n-class _DynamicFormState extends State<DynamicForm> {\r\n-  List<ResponseForm> formResponse = [];\r\n-  bool isLoading = true;\r\n-  var dropdownvalue;\r\n-  var dateController = TextEditingController();\r\n-  bool switchValue = false;\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    WidgetsBinding.instance.addPostFrameCallback((_) async {\r\n-      await getFromJson();\r\n-    });\r\n-  }\r\n-\r\n-  getFromJson() async {\r\n-    String data = await DefaultAssetBundle.of(context)\r\n-        .loadString(\"assets/json/form.json\");\r\n-    final jsonResult = jsonDecode(data);\r\n-\r\n-    setState(() {\r\n-      jsonResult.forEach(\r\n-          (element) => formResponse.add(ResponseForm.fromJson(element)));\r\n-\r\n-      isLoading = false;\r\n-    });\r\n-\r\n-    print(formResponse.length);\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return Scaffold(\r\n-      appBar: AppBar(\r\n-        title: const Text(\"Dynamic Form\"),\r\n-      ),\r\n-      body: isLoading\r\n-          ? const Center(\r\n-              child: CircularProgressIndicator(),\r\n-            )\r\n-          : Flexible(\r\n-                child: Container(\r\n-                  color: const Color(0xFF5937B2),\r\n-                  child: Column(\r\n-                    children: [ \r\n-                      Padding(\r\n-              padding: const EdgeInsets.all(8.0),\r\n-              child: ListView.builder(\r\n-                  itemCount: formResponse.length,\r\n-                  shrinkWrap: true,\r\n-                  itemBuilder: (context, index) {\r\n-                    return Column(\r\n-                      crossAxisAlignment: CrossAxisAlignment.start,\r\n-                      children: [\r\n-                        Text(\r\n-                          formResponse[index].title!,\r\n-                          style: const TextStyle(\r\n-                              fontSize: 16, fontWeight: FontWeight.bold),\r\n-                        ),\r\n-                        const SizedBox(height: 20),\r\n-                        myFormType(index),\r\n-                        Row(\r\n-                  mainAxisAlignment: MainAxisAlignment.center,\r\n-                  children: [\r\n-                    const Text(\r\n-                      \"Have an Account?\",\r\n-                      style: TextStyle(fontWeight: FontWeight.w500),\r\n-                    ),\r\n-                    const SizedBox(\r\n-                      width: 2,\r\n-                    ),\r\n-                    TextButton(\r\n-                      onPressed: () {\r\n-                        Navigator.push(\r\n-                            context,\r\n-                            MaterialPageRoute(\r\n-                                builder: (context) => const LoginScreen()));\r\n-                      },\r\n-                      child: const Text(\r\n-                        \"Login\",\r\n-                        style: TextStyle(letterSpacing: .7),\r\n-                      ),\r\n-                    ),\r\n-                  ],\r\n-                ),\r\n-                      ],\r\n-                    );\r\n-                  }),\r\n-            ),\r\n-                    ],\r\n-                  ),\r\n-                  ),\r\n-            \r\n-    ),\r\n-    );\r\n-  }\r\n-\r\n-  myFormType(index) {\r\n-    return ListView.separated(\r\n-      itemCount: formResponse[index].fields!.length,\r\n-      shrinkWrap: true,\r\n-      itemBuilder: (context, innerIndex) {\r\n-        return formResponse[index].fields![innerIndex].fieldType ==\r\n-                \"DatetimePicker\"\r\n-            ? myDatePicker()\r\n-            : formResponse[index].fields![innerIndex].fieldType == \"TextInput\"\r\n-                ? TextField(\r\n-                    decoration: InputDecoration(\r\n-                      border: const OutlineInputBorder(),\r\n-                      hintText: formResponse[index].fields![innerIndex].label,\r\n-                    ),\r\n-                  )\r\n-                : formResponse[index].fields![innerIndex].fieldType ==\r\n-                        \"SelectList\"\r\n-                    ? dropDownWidget(\r\n-                        formResponse[index].fields![innerIndex].options)\r\n-                    : formResponse[index].fields![innerIndex].fieldType ==\r\n-                            \"SwitchInput\"\r\n-                        ? SwitchListTile(\r\n-                            value: switchValue,\r\n-                            title: Text(\r\n-                                formResponse[index].fields![innerIndex].label!),\r\n-                            onChanged: (value) {\r\n-                              setState(() {\r\n-                                switchValue = !switchValue;\r\n-                              });\r\n-                            })\r\n-                        : const Text(\"Other type\");\r\n-      },\r\n-      separatorBuilder: (BuildContext context, int index) {\r\n-        return const SizedBox(height: 10);\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  Widget myDatePicker() {\r\n-    return GestureDetector(\r\n-        onTap: () {\r\n-          FocusScope.of(context).requestFocus(FocusNode());\r\n-          _selectDate(context);\r\n-        },\r\n-        child: AbsorbPointer(\r\n-          child: TextFormField(\r\n-            onChanged: (value) {},\r\n-            controller: dateController,\r\n-            obscureText: false,\r\n-            cursorColor: Theme.of(context).primaryColor,\r\n-            style: TextStyle(\r\n-              color: Theme.of(context).primaryColor,\r\n-              fontSize: 14.0,\r\n-            ),\r\n-            decoration: InputDecoration(\r\n-              labelStyle: TextStyle(color: Theme.of(context).primaryColor),\r\n-              focusColor: Theme.of(context).primaryColor,\r\n-              filled: true,\r\n-              enabledBorder: UnderlineInputBorder(\r\n-                borderRadius: BorderRadius.circular(10),\r\n-                borderSide: BorderSide.none,\r\n-              ),\r\n-              focusedBorder: OutlineInputBorder(\r\n-                borderRadius: BorderRadius.circular(10),\r\n-                borderSide: BorderSide(color: Theme.of(context).primaryColor),\r\n-              ),\r\n-              labelText: \"Date select\",\r\n-              prefixIcon: const Icon(\r\n-                Icons.calendar_today,\r\n-                size: 18,\r\n-              ),\r\n-            ),\r\n-          ),\r\n-        ));\r\n-  }\r\n-\r\n-  DateTime selectedDate = DateTime.now();\r\n-\r\n-  Future _selectDate(BuildContext context) async {\r\n-    final DateTime? picked = await showDatePicker(\r\n-        context: context,\r\n-        initialDate: selectedDate,\r\n-        firstDate: DateTime(1970),\r\n-        lastDate: DateTime.now());\r\n-    if (picked != null && picked != selectedDate) {\r\n-      setState(() {\r\n-        var date = DateTime.parse(picked.toString());\r\n-        var formatted = \"${date.year}-${date.month}-${date.day}\";\r\n-        dateController = TextEditingController();\r\n-        dateController = TextEditingController(text: formatted.toString());\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  dropDownWidget(List<Options>? items) {\r\n-    return DropdownButtonFormField<Options>(\r\n-      // Initial Value\r\n-      value: dropdownvalue,\r\n-      decoration: InputDecoration(\r\n-        border: const OutlineInputBorder(\r\n-          borderRadius: BorderRadius.all(\r\n-            Radius.circular(10.0),\r\n-          ),\r\n-        ),\r\n-        filled: true,\r\n-        hintStyle: TextStyle(color: Colors.grey[800]),\r\n-        hintText: items!.first.optionLabel!,\r\n-      ),\r\n-      borderRadius: BorderRadius.circular(10),\r\n-\r\n-\r\n-      // Down Arrow Icon\r\n-      icon: const Icon(Icons.keyboard_arrow_down),\r\n-\r\n-      // Array list of items\r\n-      items: items.map((Options items) {\r\n-        return DropdownMenuItem<Options>(\r\n-          value: items,\r\n-          child: Text(items.optionValue!),\r\n-        );\r\n-      }).toList(),\r\n-      // After selecting the desired option,it will\r\n-      // change button value to selected value\r\n-      onChanged: (newValue) {\r\n-        setState(() {\r\n-          dropdownvalue = newValue!;\r\n-        });\r\n-      },\r\n-    );\r\n-  }\r\n-}\n-import 'dart:convert';\r\n-\r\n-import 'package:flutter/material.dart';\r\n-import 'package:task_manager_flutter/ui/screens/auth_screens/login_screen.dart';\r\n-import 'form_model.dart';\r\n-\r\n-class DynamicForm extends StatefulWidget {\r\n-  const DynamicForm({super.key});\r\n-\r\n-  @override\r\n-  State<DynamicForm> createState() => _DynamicFormState();\r\n-}\r\n-\r\n-class _DynamicFormState extends State<DynamicForm> {\r\n-  List<ResponseForm> formResponse = [];\r\n-  bool isLoading = true;\r\n-  var dropdownvalue;\r\n-  var dateController = TextEditingController();\r\n-  bool switchValue = false;\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    WidgetsBinding.instance.addPostFrameCallback((_) async {\r\n-      await getFromJson();\r\n-    });\r\n-  }\r\n-\r\n-  getFromJson() async {\r\n-    String data = await DefaultAssetBundle.of(context)\r\n-        .loadString(\"assets/json/form.json\");\r\n-    final jsonResult = jsonDecode(data);\r\n-\r\n-    setState(() {\r\n-      jsonResult.forEach(\r\n-          (element) => formResponse.add(ResponseForm.fromJson(element)));\r\n-\r\n-      isLoading = false;\r\n-    });\r\n-\r\n-    print(formResponse.length);\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return Scaffold(\r\n-      appBar: AppBar(\r\n-        title: const Text(\"Dynamic Form\"),\r\n-      ),\r\n-      body: isLoading\r\n-          ? const Center(\r\n-              child: CircularProgressIndicator(),\r\n-            )\r\n-          : Flexible(\r\n-                child: Container(\r\n-                  height: 140,\r\n-                  color: const Color(0xFF5937B2),\r\n-                  child: Column(\r\n-                    children: [ \r\n-                      Padding(\r\n-              padding: const EdgeInsets.all(8.0),\r\n-              child: ListView.builder(\r\n-                  itemCount: formResponse.length,\r\n-                  shrinkWrap: true,\r\n-                  itemBuilder: (context, index) {\r\n-                    return Column(\r\n-                      crossAxisAlignment: CrossAxisAlignment.start,\r\n-                      children: [\r\n-                        Text(\r\n-                          formResponse[index].title!,\r\n-                          style: const TextStyle(\r\n-                              fontSize: 16, fontWeight: FontWeight.bold),\r\n-                        ),\r\n-                        const SizedBox(height: 20),\r\n-                        myFormType(index),\r\n-                        Row(\r\n-                  mainAxisAlignment: MainAxisAlignment.center,\r\n-                  children: [\r\n-                    const Text(\r\n-                      \"Have an Account?\",\r\n-                      style: TextStyle(fontWeight: FontWeight.w500),\r\n-                    ),\r\n-                    const SizedBox(\r\n-                      width: 2,\r\n-                    ),\r\n-                    TextButton(\r\n-                      onPressed: () {\r\n-                        Navigator.push(\r\n-                            context,\r\n-                            MaterialPageRoute(\r\n-                                builder: (context) => const LoginScreen()));\r\n-                      },\r\n-                      child: const Text(\r\n-                        \"Login\",\r\n-                        style: TextStyle(letterSpacing: .7),\r\n-                      ),\r\n-                    ),\r\n-                  ],\r\n-                ),\r\n-                      ],\r\n-                    );\r\n-                  }),\r\n-            ),\r\n-                    ],\r\n-                  ),\r\n-                  ),\r\n-            \r\n-    ),\r\n-    );\r\n-  }\r\n-\r\n-  myFormType(index) {\r\n-    return ListView.separated(\r\n-      itemCount: formResponse[index].fields!.length,\r\n-      shrinkWrap: true,\r\n-      itemBuilder: (context, innerIndex) {\r\n-        return formResponse[index].fields![innerIndex].fieldType ==\r\n-                \"DatetimePicker\"\r\n-            ? myDatePicker()\r\n-            : formResponse[index].fields![innerIndex].fieldType == \"TextInput\"\r\n-                ? TextField(\r\n-                    decoration: InputDecoration(\r\n-                      border: const OutlineInputBorder(),\r\n-                      hintText: formResponse[index].fields![innerIndex].label,\r\n-                    ),\r\n-                  )\r\n-                : formResponse[index].fields![innerIndex].fieldType ==\r\n-                        \"SelectList\"\r\n-                    ? dropDownWidget(\r\n-                        formResponse[index].fields![innerIndex].options)\r\n-                    : formResponse[index].fields![innerIndex].fieldType ==\r\n-                            \"SwitchInput\"\r\n-                        ? SwitchListTile(\r\n-                            value: switchValue,\r\n-                            title: Text(\r\n-                                formResponse[index].fields![innerIndex].label!),\r\n-                            onChanged: (value) {\r\n-                              setState(() {\r\n-                                switchValue = !switchValue;\r\n-                              });\r\n-                            })\r\n-                        : const Text(\"Other type\");\r\n-      },\r\n-      separatorBuilder: (BuildContext context, int index) {\r\n-        return const SizedBox(height: 10);\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  Widget myDatePicker() {\r\n-    return GestureDetector(\r\n-        onTap: () {\r\n-          FocusScope.of(context).requestFocus(FocusNode());\r\n-          _selectDate(context);\r\n-        },\r\n-        child: AbsorbPointer(\r\n-          child: TextFormField(\r\n-            onChanged: (value) {},\r\n-            controller: dateController,\r\n-            obscureText: false,\r\n-            cursorColor: Theme.of(context).primaryColor,\r\n-            style: TextStyle(\r\n-              color: Theme.of(context).primaryColor,\r\n-              fontSize: 14.0,\r\n-            ),\r\n-            decoration: InputDecoration(\r\n-              labelStyle: TextStyle(color: Theme.of(context).primaryColor),\r\n-              focusColor: Theme.of(context).primaryColor,\r\n-              filled: true,\r\n-              enabledBorder: UnderlineInputBorder(\r\n-                borderRadius: BorderRadius.circular(10),\r\n-                borderSide: BorderSide.none,\r\n-              ),\r\n-              focusedBorder: OutlineInputBorder(\r\n-                borderRadius: BorderRadius.circular(10),\r\n-                borderSide: BorderSide(color: Theme.of(context).primaryColor),\r\n-              ),\r\n-              labelText: \"Date select\",\r\n-              prefixIcon: const Icon(\r\n-                Icons.calendar_today,\r\n-                size: 18,\r\n-              ),\r\n-            ),\r\n-          ),\r\n-        ));\r\n-  }\r\n-\r\n-  DateTime selectedDate = DateTime.now();\r\n-\r\n-  Future _selectDate(BuildContext context) async {\r\n-    final DateTime? picked = await showDatePicker(\r\n-        context: context,\r\n-        initialDate: selectedDate,\r\n-        firstDate: DateTime(1970),\r\n-        lastDate: DateTime.now());\r\n-    if (picked != null && picked != selectedDate) {\r\n-      setState(() {\r\n-        var date = DateTime.parse(picked.toString());\r\n-        var formatted = \"${date.year}-${date.month}-${date.day}\";\r\n-        dateController = TextEditingController();\r\n-        dateController = TextEditingController(text: formatted.toString());\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  dropDownWidget(List<Options>? items) {\r\n-    return DropdownButtonFormField<Options>(\r\n-      // Initial Value\r\n-      value: dropdownvalue,\r\n-      decoration: InputDecoration(\r\n-        border: const OutlineInputBorder(\r\n-          borderRadius: BorderRadius.all(\r\n-            Radius.circular(10.0),\r\n-          ),\r\n-        ),\r\n-        filled: true,\r\n-        hintStyle: TextStyle(color: Colors.grey[800]),\r\n-        hintText: items!.first.optionLabel!,\r\n-      ),\r\n-      borderRadius: BorderRadius.circular(10),\r\n-\r\n-\r\n-      // Down Arrow Icon\r\n-      icon: const Icon(Icons.keyboard_arrow_down),\r\n-\r\n-      // Array list of items\r\n-      items: items.map((Options items) {\r\n-        return DropdownMenuItem<Options>(\r\n-          value: items,\r\n-          child: Text(items.optionValue!),\r\n-        );\r\n-      }).toList(),\r\n-      // After selecting the desired option,it will\r\n-      // change button value to selected value\r\n-      onChanged: (newValue) {\r\n-        setState(() {\r\n-          dropdownvalue = newValue!;\r\n-        });\r\n-      },\r\n-    );\r\n-  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1707239069906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n       body: isLoading\r\n           ? const Center(\r\n               child: CircularProgressIndicator(),\r\n             )\r\n-          : Flexible(\r\n+          : SingleChildScrollView(\r\n                 child: Container(\r\n                   color: const Color(0xFF5937B2),\r\n                   child: Padding(\r\n               padding: const EdgeInsets.all(8.0),\r\n"
                },
                {
                    "date": 1707239156512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,12 @@\n           ? const Center(\r\n               child: CircularProgressIndicator(),\r\n             )\r\n           : SingleChildScrollView(\r\n-                child: Container(\r\n+                child: Column(\r\n+                mainAxisAlignment: MainAxisAlignment.center,\r\n+                children: <Widget>[\r\n+                  Container(\r\n                   color: const Color(0xFF5937B2),\r\n                   child: Padding(\r\n               padding: const EdgeInsets.all(8.0),\r\n               child: ListView.builder(\r\n"
                },
                {
                    "date": 1707239270655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,241 @@\n+import 'dart:convert';\r\n+\r\n+import 'package:flutter/material.dart';\r\n+import 'package:task_manager_flutter/ui/screens/auth_screens/login_screen.dart';\r\n+import 'form_model.dart';\r\n+\r\n+class DynamicForm extends StatefulWidget {\r\n+  const DynamicForm({super.key});\r\n+\r\n+  @override\r\n+  State<DynamicForm> createState() => _DynamicFormState();\r\n+}\r\n+\r\n+class _DynamicFormState extends State<DynamicForm> {\r\n+  List<ResponseForm> formResponse = [];\r\n+  bool isLoading = true;\r\n+  var dropdownvalue;\r\n+  var dateController = TextEditingController();\r\n+  bool switchValue = false;\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    WidgetsBinding.instance.addPostFrameCallback((_) async {\r\n+      await getFromJson();\r\n+    });\r\n+  }\r\n+\r\n+  getFromJson() async {\r\n+    String data = await DefaultAssetBundle.of(context)\r\n+        .loadString(\"assets/json/form.json\");\r\n+    final jsonResult = jsonDecode(data);\r\n+\r\n+    setState(() {\r\n+      jsonResult.forEach(\r\n+          (element) => formResponse.add(ResponseForm.fromJson(element)));\r\n+\r\n+      isLoading = false;\r\n+    });\r\n+\r\n+    print(formResponse.length);\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Scaffold(\r\n+      appBar: AppBar(\r\n+        title: const Text(\"Dynamic Form\"),\r\n+      ),\r\n+      body: isLoading\r\n+          ? const Center(\r\n+              child: CircularProgressIndicator(),\r\n+            )\r\n+          : SingleChildScrollView(\r\n+                child: Column(\r\n+                mainAxisAlignment: MainAxisAlignment.center,\r\n+                children: <Widget>[\r\n+                  Container(\r\n+                  color: const Color(0xFF5937B2),\r\n+                  child: Padding(\r\n+              padding: const EdgeInsets.all(8.0),\r\n+              child: ListView.builder(\r\n+                  itemCount: formResponse.length,\r\n+                  shrinkWrap: true,\r\n+                  itemBuilder: (context, index) {\r\n+                    return Column(\r\n+                      crossAxisAlignment: CrossAxisAlignment.start,\r\n+                      children: [\r\n+                        Text(\r\n+                          formResponse[index].title!,\r\n+                          style: const TextStyle(\r\n+                              fontSize: 16, fontWeight: FontWeight.bold),\r\n+                        ),\r\n+                        const SizedBox(height: 20),\r\n+                        myFormType(index),\r\n+                        Row(\r\n+                  mainAxisAlignment: MainAxisAlignment.center,\r\n+                  children: [\r\n+                    const Text(\r\n+                      \"Have an Account?\",\r\n+                      style: TextStyle(fontWeight: FontWeight.w500),\r\n+                    ),\r\n+                    const SizedBox(\r\n+                      width: 2,\r\n+                    ),\r\n+                    TextButton(\r\n+                      onPressed: () {\r\n+                        Navigator.push(\r\n+                            context,\r\n+                            MaterialPageRoute(\r\n+                                builder: (context) => const LoginScreen()));\r\n+                      },\r\n+                      child: const Text(\r\n+                        \"Login\",\r\n+                        style: TextStyle(letterSpacing: .7),\r\n+                      ),\r\n+                    ),\r\n+                  ],\r\n+                ),\r\n+                      ],\r\n+                    );\r\n+                  }),\r\n+                  ),\r\n+                  ),\r\n+                ]\r\n+                ),\r\n+          ),\r\n+\r\n+    );\r\n+  }\r\n+\r\n+  myFormType(index) {\r\n+    return ListView.separated(\r\n+      itemCount: formResponse[index].fields!.length,\r\n+      shrinkWrap: true,\r\n+      itemBuilder: (context, innerIndex) {\r\n+        return formResponse[index].fields![innerIndex].fieldType ==\r\n+                \"DatetimePicker\"\r\n+            ? myDatePicker()\r\n+            : formResponse[index].fields![innerIndex].fieldType == \"TextInput\"\r\n+                ? TextField(\r\n+                    decoration: InputDecoration(\r\n+                      border: const OutlineInputBorder(),\r\n+                      hintText: formResponse[index].fields![innerIndex].label,\r\n+                    ),\r\n+                  )\r\n+                : formResponse[index].fields![innerIndex].fieldType ==\r\n+                        \"SelectList\"\r\n+                    ? dropDownWidget(\r\n+                        formResponse[index].fields![innerIndex].options)\r\n+                    : formResponse[index].fields![innerIndex].fieldType ==\r\n+                            \"SwitchInput\"\r\n+                        ? SwitchListTile(\r\n+                            value: switchValue,\r\n+                            title: Text(\r\n+                                formResponse[index].fields![innerIndex].label!),\r\n+                            onChanged: (value) {\r\n+                              setState(() {\r\n+                                switchValue = !switchValue;\r\n+                              });\r\n+                            })\r\n+                        : const Text(\"Other type\");\r\n+      },\r\n+      separatorBuilder: (BuildContext context, int index) {\r\n+        return const SizedBox(height: 10);\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  Widget myDatePicker() {\r\n+    return GestureDetector(\r\n+        onTap: () {\r\n+          FocusScope.of(context).requestFocus(FocusNode());\r\n+          _selectDate(context);\r\n+        },\r\n+        child: AbsorbPointer(\r\n+          child: TextFormField(\r\n+            onChanged: (value) {},\r\n+            controller: dateController,\r\n+            obscureText: false,\r\n+            cursorColor: Theme.of(context).primaryColor,\r\n+            style: TextStyle(\r\n+              color: Theme.of(context).primaryColor,\r\n+              fontSize: 14.0,\r\n+            ),\r\n+            decoration: InputDecoration(\r\n+              labelStyle: TextStyle(color: Theme.of(context).primaryColor),\r\n+              focusColor: Theme.of(context).primaryColor,\r\n+              filled: true,\r\n+              enabledBorder: UnderlineInputBorder(\r\n+                borderRadius: BorderRadius.circular(10),\r\n+                borderSide: BorderSide.none,\r\n+              ),\r\n+              focusedBorder: OutlineInputBorder(\r\n+                borderRadius: BorderRadius.circular(10),\r\n+                borderSide: BorderSide(color: Theme.of(context).primaryColor),\r\n+              ),\r\n+              labelText: \"Date select\",\r\n+              prefixIcon: const Icon(\r\n+                Icons.calendar_today,\r\n+                size: 18,\r\n+              ),\r\n+            ),\r\n+          ),\r\n+        ));\r\n+  }\r\n+\r\n+  DateTime selectedDate = DateTime.now();\r\n+\r\n+  Future _selectDate(BuildContext context) async {\r\n+    final DateTime? picked = await showDatePicker(\r\n+        context: context,\r\n+        initialDate: selectedDate,\r\n+        firstDate: DateTime(1970),\r\n+        lastDate: DateTime.now());\r\n+    if (picked != null && picked != selectedDate) {\r\n+      setState(() {\r\n+        var date = DateTime.parse(picked.toString());\r\n+        var formatted = \"${date.year}-${date.month}-${date.day}\";\r\n+        dateController = TextEditingController();\r\n+        dateController = TextEditingController(text: formatted.toString());\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  dropDownWidget(List<Options>? items) {\r\n+    return DropdownButtonFormField<Options>(\r\n+      // Initial Value\r\n+      value: dropdownvalue,\r\n+      decoration: InputDecoration(\r\n+        border: const OutlineInputBorder(\r\n+          borderRadius: BorderRadius.all(\r\n+            Radius.circular(10.0),\r\n+          ),\r\n+        ),\r\n+        filled: true,\r\n+        hintStyle: TextStyle(color: Colors.grey[800]),\r\n+        hintText: items!.first.optionLabel!,\r\n+      ),\r\n+      borderRadius: BorderRadius.circular(10),\r\n+\r\n+\r\n+      // Down Arrow Icon\r\n+      icon: const Icon(Icons.keyboard_arrow_down),\r\n+\r\n+      // Array list of items\r\n+      items: items.map((Options items) {\r\n+        return DropdownMenuItem<Options>(\r\n+          value: items,\r\n+          child: Text(items.optionValue!),\r\n+        );\r\n+      }).toList(),\r\n+      // After selecting the desired option,it will\r\n+      // change button value to selected value\r\n+      onChanged: (newValue) {\r\n+        setState(() {\r\n+          dropdownvalue = newValue!;\r\n+        });\r\n+      },\r\n+    );\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1707239319638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n import 'dart:convert';\r\n-\r\n+import 'form_model.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:task_manager_flutter/ui/screens/auth_screens/login_screen.dart';\r\n-import 'form_model.dart';\r\n \r\n+\r\n class DynamicForm extends StatefulWidget {\r\n   const DynamicForm({super.key});\r\n \r\n   @override\r\n"
                },
                {
                    "date": 1707239333788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n import 'dart:convert';\r\n-\r\n+import 'form_model.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:task_manager_flutter/ui/screens/auth_screens/login_screen.dart';\r\n-import 'form_model.dart';\r\n \r\n class DynamicForm extends StatefulWidget {\r\n   const DynamicForm({super.key});\r\n \r\n@@ -50,62 +49,63 @@\n           ? const Center(\r\n               child: CircularProgressIndicator(),\r\n             )\r\n           : SingleChildScrollView(\r\n-                child: Column(\r\n-                mainAxisAlignment: MainAxisAlignment.center,\r\n-                children: <Widget>[\r\n-                  Container(\r\n-                  color: const Color(0xFF5937B2),\r\n-                  child: Padding(\r\n-              padding: const EdgeInsets.all(8.0),\r\n-              child: ListView.builder(\r\n-                  itemCount: formResponse.length,\r\n-                  shrinkWrap: true,\r\n-                  itemBuilder: (context, index) {\r\n-                    return Column(\r\n-                      crossAxisAlignment: CrossAxisAlignment.start,\r\n-                      children: [\r\n-                        Text(\r\n-                          formResponse[index].title!,\r\n-                          style: const TextStyle(\r\n-                              fontSize: 16, fontWeight: FontWeight.bold),\r\n-                        ),\r\n-                        const SizedBox(height: 20),\r\n-                        myFormType(index),\r\n-                        Row(\r\n+              child: Column(\r\n                   mainAxisAlignment: MainAxisAlignment.center,\r\n-                  children: [\r\n-                    const Text(\r\n-                      \"Have an Account?\",\r\n-                      style: TextStyle(fontWeight: FontWeight.w500),\r\n-                    ),\r\n-                    const SizedBox(\r\n-                      width: 2,\r\n-                    ),\r\n-                    TextButton(\r\n-                      onPressed: () {\r\n-                        Navigator.push(\r\n-                            context,\r\n-                            MaterialPageRoute(\r\n-                                builder: (context) => const LoginScreen()));\r\n-                      },\r\n-                      child: const Text(\r\n-                        \"Login\",\r\n-                        style: TextStyle(letterSpacing: .7),\r\n+                  children: <Widget>[\r\n+                    Container(\r\n+                      color: const Color(0xFF5937B2),\r\n+                      child: Padding(\r\n+                        padding: const EdgeInsets.all(8.0),\r\n+                        child: ListView.builder(\r\n+                            itemCount: formResponse.length,\r\n+                            shrinkWrap: true,\r\n+                            itemBuilder: (context, index) {\r\n+                              return Column(\r\n+                                crossAxisAlignment: CrossAxisAlignment.start,\r\n+                                children: [\r\n+                                  Text(\r\n+                                    formResponse[index].title!,\r\n+                                    style: const TextStyle(\r\n+                                        fontSize: 16,\r\n+                                        fontWeight: FontWeight.bold),\r\n+                                  ),\r\n+                                  const SizedBox(height: 20),\r\n+                                  myFormType(index),\r\n+                                  Row(\r\n+                                    mainAxisAlignment: MainAxisAlignment.center,\r\n+                                    children: [\r\n+                                      const Text(\r\n+                                        \"Have an Account?\",\r\n+                                        style: TextStyle(\r\n+                                            fontWeight: FontWeight.w500),\r\n+                                      ),\r\n+                                      const SizedBox(\r\n+                                        width: 2,\r\n+                                      ),\r\n+                                      TextButton(\r\n+                                        onPressed: () {\r\n+                                          Navigator.push(\r\n+                                              context,\r\n+                                              MaterialPageRoute(\r\n+                                                  builder: (context) =>\r\n+                                                      const LoginScreen()));\r\n+                                        },\r\n+                                        child: const Text(\r\n+                                          \"Login\",\r\n+                                          style: TextStyle(letterSpacing: .7),\r\n+                                        ),\r\n+                                      ),\r\n+                                    ],\r\n+                                  ),\r\n+                                ],\r\n+                              );\r\n+                            }),\r\n                       ),\r\n                     ),\r\n-                  ],\r\n-                ),\r\n-                      ],\r\n-                    );\r\n-                  }),\r\n-                  ),\r\n-                  ),\r\n-                ]\r\n-                ),\r\n-          ),\r\n-\r\n+                  ]),\r\n+            ),\r\n     );\r\n   }\r\n \r\n   myFormType(index) {\r\n@@ -217,9 +217,8 @@\n         hintText: items!.first.optionLabel!,\r\n       ),\r\n       borderRadius: BorderRadius.circular(10),\r\n \r\n-\r\n       // Down Arrow Icon\r\n       icon: const Icon(Icons.keyboard_arrow_down),\r\n \r\n       // Array list of items\r\n@@ -237,5 +236,5 @@\n         });\r\n       },\r\n     );\r\n   }\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1707239410014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,246 @@\n+import 'dart:convert';\r\n+import 'form_model.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:task_manager_flutter/ui/screens/auth_screens/login_screen.dart';\r\n+\r\n+class DynamicForm extends StatefulWidget {\r\n+  const DynamicForm({super.key});\r\n+\r\n+  @override\r\n+  State<DynamicForm> createState() => _DynamicFormState();\r\n+}\r\n+\r\n+class _DynamicFormState extends State<DynamicForm> {\r\n+  List<ResponseForm> formResponse = [];\r\n+  bool isLoading = true;\r\n+  var dropdownvalue;\r\n+  var dateController = TextEditingController();\r\n+  bool switchValue = false;\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    WidgetsBinding.instance.addPostFrameCallback((_) async {\r\n+      await getFromJson();\r\n+    });\r\n+  }\r\n+\r\n+  getFromJson() async {\r\n+    String data = await DefaultAssetBundle.of(context)\r\n+        .loadString(\"assets/json/form.json\");\r\n+    final jsonResult = jsonDecode(data);\r\n+\r\n+    setState(() {\r\n+      jsonResult.forEach(\r\n+          (element) => formResponse.add(ResponseForm.fromJson(element)));\r\n+\r\n+      isLoading = false;\r\n+    });\r\n+\r\n+    print(formResponse.length);\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Scaffold(\r\n+      appBar: AppBar(\r\n+        title: const Text(\"Dynamic Form\"),\r\n+      ),\r\n+      body: isLoading\r\n+          ? const Center(\r\n+              child: CircularProgressIndicator(),\r\n+            )\r\n+          : SingleChildScrollView(\r\n+              child: Column(\r\n+                  mainAxisAlignment: MainAxisAlignment.center,\r\n+                  children: <Widget>[\r\n+                    Container(\r\n+                      color: const Color(0xFF5937B2),\r\n+                      child: Padding(\r\n+                        padding: const EdgeInsets.all(8.0),\r\n+                        child: ListView.builder(\r\n+                            itemCount: formResponse.length,\r\n+                            shrinkWrap: true,\r\n+                            itemBuilder: (context, index) {\r\n+                              return Column(\r\n+                                crossAxisAlignment: CrossAxisAlignment.start,\r\n+                                children: [\r\n+                                  Text(\r\n+                                    formResponse[index].title!,\r\n+                                    style: const TextStyle(\r\n+                                        fontSize: 16,\r\n+                                        fontWeight: FontWeight.bold),\r\n+                                  ),\r\n+                                  const SizedBox(height: 20),\r\n+                                  myFormType(index),\r\n+                                  Row(\r\n+                                    mainAxisAlignment: MainAxisAlignment.center,\r\n+                                    children: [\r\n+                                      const Text(\r\n+                                        \"Have an Account?\",\r\n+                                        style: TextStyle(\r\n+                                            fontWeight: FontWeight.w500),\r\n+                                      ),\r\n+                                      const SizedBox(\r\n+                                        width: 2,\r\n+                                      ),\r\n+                                      TextButton(\r\n+                                        onPressed: () {\r\n+                                          Navigator.push(\r\n+                                              context,\r\n+                                              MaterialPageRoute(\r\n+                                                  builder: (context) =>\r\n+                                                      const LoginScreen()));\r\n+                                        },\r\n+                                        child: const Text(\r\n+                                          \"Login\",\r\n+                                          style: TextStyle(letterSpacing: .7),\r\n+                                        ),\r\n+                                      ),\r\n+                                    ],\r\n+                                  ),\r\n+                                ],\r\n+                              );\r\n+                            }),\r\n+                      ),\r\n+                    ),\r\n+                  ]),\r\n+            ),\r\n+            floatingActionButton: FloatingActionButton(\r\n+            onPressed: () {\r\n+              print(object;)\r\n+        },\r\n+        child: const Icon(Icons.check),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  myFormType(index) {\r\n+    return ListView.separated(\r\n+      itemCount: formResponse[index].fields!.length,\r\n+      shrinkWrap: true,\r\n+      itemBuilder: (context, innerIndex) {\r\n+        return formResponse[index].fields![innerIndex].fieldType ==\r\n+                \"DatetimePicker\"\r\n+            ? myDatePicker()\r\n+            : formResponse[index].fields![innerIndex].fieldType == \"TextInput\"\r\n+                ? TextField(\r\n+                    decoration: InputDecoration(\r\n+                      border: const OutlineInputBorder(),\r\n+                      hintText: formResponse[index].fields![innerIndex].label,\r\n+                    ),\r\n+                  )\r\n+                : formResponse[index].fields![innerIndex].fieldType ==\r\n+                        \"SelectList\"\r\n+                    ? dropDownWidget(\r\n+                        formResponse[index].fields![innerIndex].options)\r\n+                    : formResponse[index].fields![innerIndex].fieldType ==\r\n+                            \"SwitchInput\"\r\n+                        ? SwitchListTile(\r\n+                            value: switchValue,\r\n+                            title: Text(\r\n+                                formResponse[index].fields![innerIndex].label!),\r\n+                            onChanged: (value) {\r\n+                              setState(() {\r\n+                                switchValue = !switchValue;\r\n+                              });\r\n+                            })\r\n+                        : const Text(\"Other type\");\r\n+      },\r\n+      separatorBuilder: (BuildContext context, int index) {\r\n+        return const SizedBox(height: 10);\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  Widget myDatePicker() {\r\n+    return GestureDetector(\r\n+        onTap: () {\r\n+          FocusScope.of(context).requestFocus(FocusNode());\r\n+          _selectDate(context);\r\n+        },\r\n+        child: AbsorbPointer(\r\n+          child: TextFormField(\r\n+            onChanged: (value) {},\r\n+            controller: dateController,\r\n+            obscureText: false,\r\n+            cursorColor: Theme.of(context).primaryColor,\r\n+            style: TextStyle(\r\n+              color: Theme.of(context).primaryColor,\r\n+              fontSize: 14.0,\r\n+            ),\r\n+            decoration: InputDecoration(\r\n+              labelStyle: TextStyle(color: Theme.of(context).primaryColor),\r\n+              focusColor: Theme.of(context).primaryColor,\r\n+              filled: true,\r\n+              enabledBorder: UnderlineInputBorder(\r\n+                borderRadius: BorderRadius.circular(10),\r\n+                borderSide: BorderSide.none,\r\n+              ),\r\n+              focusedBorder: OutlineInputBorder(\r\n+                borderRadius: BorderRadius.circular(10),\r\n+                borderSide: BorderSide(color: Theme.of(context).primaryColor),\r\n+              ),\r\n+              labelText: \"Date select\",\r\n+              prefixIcon: const Icon(\r\n+                Icons.calendar_today,\r\n+                size: 18,\r\n+              ),\r\n+            ),\r\n+          ),\r\n+        ));\r\n+  }\r\n+\r\n+  DateTime selectedDate = DateTime.now();\r\n+\r\n+  Future _selectDate(BuildContext context) async {\r\n+    final DateTime? picked = await showDatePicker(\r\n+        context: context,\r\n+        initialDate: selectedDate,\r\n+        firstDate: DateTime(1970),\r\n+        lastDate: DateTime.now());\r\n+    if (picked != null && picked != selectedDate) {\r\n+      setState(() {\r\n+        var date = DateTime.parse(picked.toString());\r\n+        var formatted = \"${date.year}-${date.month}-${date.day}\";\r\n+        dateController = TextEditingController();\r\n+        dateController = TextEditingController(text: formatted.toString());\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  dropDownWidget(List<Options>? items) {\r\n+    return DropdownButtonFormField<Options>(\r\n+      // Initial Value\r\n+      value: dropdownvalue,\r\n+      decoration: InputDecoration(\r\n+        border: const OutlineInputBorder(\r\n+          borderRadius: BorderRadius.all(\r\n+            Radius.circular(10.0),\r\n+          ),\r\n+        ),\r\n+        filled: true,\r\n+        hintStyle: TextStyle(color: Colors.grey[800]),\r\n+        hintText: items!.first.optionLabel!,\r\n+      ),\r\n+      borderRadius: BorderRadius.circular(10),\r\n+\r\n+      // Down Arrow Icon\r\n+      icon: const Icon(Icons.keyboard_arrow_down),\r\n+\r\n+      // Array list of items\r\n+      items: items.map((Options items) {\r\n+        return DropdownMenuItem<Options>(\r\n+          value: items,\r\n+          child: Text(items.optionValue!),\r\n+        );\r\n+      }).toList(),\r\n+      // After selecting the desired option,it will\r\n+      // change button value to selected value\r\n+      onChanged: (newValue) {\r\n+        setState(() {\r\n+          dropdownvalue = newValue!;\r\n+        });\r\n+      },\r\n+    );\r\n+  }\r\n+}\r\n"
                }
            ],
            "date": 1707188148366,
            "name": "Commit-0",
            "content": "import 'dart:convert';\r\n\r\nimport 'package:flutter/material.dart';\r\n\r\nimport 'form_model.dart';\r\n\r\nclass DynamicForm extends StatefulWidget {\r\n  const DynamicForm({super.key});\r\n\r\n  @override\r\n  State<DynamicForm> createState() => _DynamicFormState();\r\n}\r\n\r\nclass _DynamicFormState extends State<DynamicForm> {\r\n  List<ResponseForm> formResponse = [];\r\n  bool isLoading = true;\r\n  var dropdownvalue;\r\n  var dateController = TextEditingController();\r\n  bool switchValue = false;\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    WidgetsBinding.instance.addPostFrameCallback((_) async {\r\n      await getFromJson();\r\n    });\r\n  }\r\n\r\n  getFromJson() async {\r\n    String data = await DefaultAssetBundle.of(context)\r\n        .loadString(\"assets/json/form.json\");\r\n    final jsonResult = jsonDecode(data);\r\n\r\n    setState(() {\r\n      jsonResult.forEach(\r\n          (element) => formResponse.add(ResponseForm.fromJson(element)));\r\n\r\n      isLoading = false;\r\n    });\r\n\r\n    print(formResponse.length);\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text(\"Dynamic Form\"),\r\n      ),\r\n      body: isLoading\r\n          ? const Center(\r\n              child: CircularProgressIndicator(),\r\n            )\r\n          : Padding(\r\n              padding: const EdgeInsets.all(8.0),\r\n              child: ListView.builder(\r\n                  itemCount: formResponse.length,\r\n                  shrinkWrap: true,\r\n                  itemBuilder: (context, index) {\r\n                    return Column(\r\n                      crossAxisAlignment: CrossAxisAlignment.start,\r\n                      children: [\r\n                        Text(\r\n                          formResponse[index].title!,\r\n                          style: const TextStyle(\r\n                              fontSize: 16, fontWeight: FontWeight.bold),\r\n                        ),\r\n                        const SizedBox(height: 20),\r\n                        myFormType(index)\r\n                      ],\r\n                    );\r\n                  }),\r\n            ),\r\n    );\r\n  }\r\n\r\n  myFormType(index) {\r\n    return ListView.separated(\r\n      itemCount: formResponse[index].fields!.length,\r\n      shrinkWrap: true,\r\n      itemBuilder: (context, innerIndex) {\r\n        return formResponse[index].fields![innerIndex].fieldType ==\r\n                \"DatetimePicker\"\r\n            ? myDatePicker()\r\n            : formResponse[index].fields![innerIndex].fieldType == \"TextInput\"\r\n                ? TextField(\r\n                    decoration: InputDecoration(\r\n                      border: const OutlineInputBorder(),\r\n                      hintText: formResponse[index].fields![innerIndex].label,\r\n                    ),\r\n                  )\r\n                : formResponse[index].fields![innerIndex].fieldType ==\r\n                        \"SelectList\"\r\n                    ? dropDownWidget(\r\n                        formResponse[index].fields![innerIndex].options)\r\n                    : formResponse[index].fields![innerIndex].fieldType ==\r\n                            \"SwitchInput\"\r\n                        ? SwitchListTile(\r\n                            value: switchValue,\r\n                            title: Text(\r\n                                formResponse[index].fields![innerIndex].label!),\r\n                            onChanged: (value) {\r\n                              setState(() {\r\n                                switchValue = !switchValue;\r\n                              });\r\n                            })\r\n                        : const Text(\"Other type\");\r\n      },\r\n      separatorBuilder: (BuildContext context, int index) {\r\n        return const SizedBox(height: 10);\r\n      },\r\n    );\r\n  }\r\n\r\n  Widget myDatePicker() {\r\n    return GestureDetector(\r\n        onTap: () {\r\n          FocusScope.of(context).requestFocus(FocusNode());\r\n          _selectDate(context);\r\n        },\r\n        child: AbsorbPointer(\r\n          child: TextFormField(\r\n            onChanged: (value) {},\r\n            controller: dateController,\r\n            obscureText: false,\r\n            cursorColor: Theme.of(context).primaryColor,\r\n            style: TextStyle(\r\n              color: Theme.of(context).primaryColor,\r\n              fontSize: 14.0,\r\n            ),\r\n            decoration: InputDecoration(\r\n              labelStyle: TextStyle(color: Theme.of(context).primaryColor),\r\n              focusColor: Theme.of(context).primaryColor,\r\n              filled: true,\r\n              enabledBorder: UnderlineInputBorder(\r\n                borderRadius: BorderRadius.circular(10),\r\n                borderSide: BorderSide.none,\r\n              ),\r\n              focusedBorder: OutlineInputBorder(\r\n                borderRadius: BorderRadius.circular(10),\r\n                borderSide: BorderSide(color: Theme.of(context).primaryColor),\r\n              ),\r\n              labelText: \"Date select\",\r\n              prefixIcon: const Icon(\r\n                Icons.calendar_today,\r\n                size: 18,\r\n              ),\r\n            ),\r\n          ),\r\n        ));\r\n  }\r\n\r\n  DateTime selectedDate = DateTime.now();\r\n\r\n  Future _selectDate(BuildContext context) async {\r\n    final DateTime? picked = await showDatePicker(\r\n        context: context,\r\n        initialDate: selectedDate,\r\n        firstDate: DateTime(1970),\r\n        lastDate: DateTime.now());\r\n    if (picked != null && picked != selectedDate) {\r\n      setState(() {\r\n        var date = DateTime.parse(picked.toString());\r\n        var formatted = \"${date.year}-${date.month}-${date.day}\";\r\n        dateController = TextEditingController();\r\n        dateController = TextEditingController(text: formatted.toString());\r\n      });\r\n    }\r\n  }\r\n\r\n  dropDownWidget(List<Options>? items) {\r\n    return DropdownButtonFormField<Options>(\r\n      // Initial Value\r\n      value: dropdownvalue,\r\n      decoration: InputDecoration(\r\n        border: const OutlineInputBorder(\r\n          borderRadius: BorderRadius.all(\r\n            Radius.circular(10.0),\r\n          ),\r\n        ),\r\n        filled: true,\r\n        hintStyle: TextStyle(color: Colors.grey[800]),\r\n        hintText: items!.first.optionLabel!,\r\n      ),\r\n      borderRadius: BorderRadius.circular(10),\r\n\r\n\r\n      // Down Arrow Icon\r\n      icon: const Icon(Icons.keyboard_arrow_down),\r\n\r\n      // Array list of items\r\n      items: items.map((Options items) {\r\n        return DropdownMenuItem<Options>(\r\n          value: items,\r\n          child: Text(items.optionValue!),\r\n        );\r\n      }).toList(),\r\n      // After selecting the desired option,it will\r\n      // change button value to selected value\r\n      onChanged: (newValue) {\r\n        setState(() {\r\n          dropdownvalue = newValue!;\r\n        });\r\n      },\r\n    );\r\n  }\r\n}"
        }
    ]
}