{
    "sourceFile": "lib/ui/widgets/simple_tag.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1708611484063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708611529605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,79 +1,748 @@\n+import 'dart:convert';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n \r\n import 'package:flutter_tags/flutter_tags.dart';\r\n-.\r\n-.\r\n-.\r\n-List _items;\r\n-double _fontSize = 14;\r\n \r\n-@override\r\n-void initState(){\r\n-    super.initState();\r\n-    // if you store data on a local database (sqflite), then you could do something like this\r\n-    Model().getItems().then((items){\r\n-            _items = items;\r\n-        });\r\n+void main() => runApp(MyApp());\r\n+\r\n+class MyApp extends StatelessWidget {\r\n+  // This widget is the root of your application.\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return MaterialApp(\r\n+      title: 'Flutter Tags Demo',\r\n+      theme: ThemeData(\r\n+        primarySwatch: Colors.blueGrey,\r\n+      ),\r\n+      home: MyHomePage(title: 'Flutter Tags'),\r\n+    );\r\n+  }\r\n }\r\n \r\n-@override\r\n-Widget build(BuildContext context) {\r\n+class MyHomePage extends StatefulWidget {\r\n+  MyHomePage({Key key, this.title}) : super(key: key);\r\n+  final String title;\r\n+\r\n+  @override\r\n+  _MyHomePageState createState() => _MyHomePageState();\r\n+}\r\n+\r\n+class _MyHomePageState extends State<MyHomePage>\r\n+    with SingleTickerProviderStateMixin {\r\n+  TabController _tabController;\r\n+  ScrollController _scrollViewController;\r\n+\r\n+  final List<String> _list = [\r\n+    '0',\r\n+    'SDK',\r\n+    'plugin updates',\r\n+    'Facebook',\r\n+    '哔了狗了QP又不够了',\r\n+    'Kirchhoff',\r\n+    'Italy',\r\n+    'France',\r\n+    'Spain',\r\n+    '美',\r\n+    'Dart',\r\n+    'SDK',\r\n+    'Foo',\r\n+    'Select',\r\n+    'lorem ip',\r\n+    '9',\r\n+    'Star',\r\n+    'Flutter Selectable Tags',\r\n+    '1',\r\n+    'Hubble',\r\n+    '2',\r\n+    'Input flutter tags',\r\n+    'A B C',\r\n+    '8',\r\n+    'Android Studio developer',\r\n+    'welcome to the jungle',\r\n+    'Gauss',\r\n+    '美术',\r\n+    '互联网',\r\n+    '炫舞时代',\r\n+    '篝火营地',\r\n+  ];\r\n+\r\n+  bool _symmetry = false;\r\n+  bool _removeButton = true;\r\n+  bool _singleItem = true;\r\n+  bool _startDirection = false;\r\n+  bool _horizontalScroll = true;\r\n+  bool _withSuggesttions = false;\r\n+  int _count = 0;\r\n+  int _column = 0;\r\n+  double _fontSize = 14;\r\n+\r\n+  String _itemCombine = 'withTextBefore';\r\n+\r\n+  String _onPressed = '';\r\n+\r\n+  List _icon = [Icons.home, Icons.language, Icons.headset];\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    _tabController = TabController(length: 2, vsync: this);\r\n+    _scrollViewController = ScrollController();\r\n+\r\n+    _items = _list.toList();\r\n+  }\r\n+\r\n+  List _items;\r\n+\r\n+  final GlobalKey<TagsState> _tagStateKey = GlobalKey<TagsState>();\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    //List<Item> lst = _tagStateKey.currentState?.getAllItem; lst.forEach((f) => print(f.title));\r\n+    return Scaffold(\r\n+      body: NestedScrollView(\r\n+          controller: _scrollViewController,\r\n+          headerSliverBuilder: (BuildContext context, bool boxIsScrolled) {\r\n+            return <Widget>[\r\n+              SliverAppBar(\r\n+                title: Text(\"flutter tags\"),\r\n+                centerTitle: true,\r\n+                pinned: true,\r\n+                expandedHeight: 0,\r\n+                floating: true,\r\n+                forceElevated: boxIsScrolled,\r\n+                bottom: TabBar(\r\n+                  isScrollable: false,\r\n+                  indicatorSize: TabBarIndicatorSize.label,\r\n+                  labelStyle: TextStyle(fontSize: 18.0),\r\n+                  tabs: [\r\n+                    Tab(text: \"Demo 1\"),\r\n+                    Tab(text: \"Demo 2\"),\r\n+                  ],\r\n+                  controller: _tabController,\r\n+                ),\r\n+              )\r\n+            ];\r\n+          },\r\n+          body: TabBarView(\r\n+            controller: _tabController,\r\n+            children: [\r\n+              CustomScrollView(\r\n+                slivers: <Widget>[\r\n+                  SliverList(\r\n+                      delegate: SliverChildListDelegate([\r\n+                    Container(\r\n+                      decoration: BoxDecoration(\r\n+                          border: Border(\r\n+                              bottom: BorderSide(\r\n+                                  color: Colors.grey[300], width: 0.5))),\r\n+                      margin:\r\n+                          EdgeInsets.symmetric(horizontal: 10, vertical: 10),\r\n+                      child: ExpansionTile(\r\n+                        title: Text(\"Settings\"),\r\n+                        children: <Widget>[\r\n+                          Row(\r\n+                            mainAxisAlignment: MainAxisAlignment.center,\r\n+                            children: <Widget>[\r\n+                              GestureDetector(\r\n+                                child: Row(\r\n+                                  children: <Widget>[\r\n+                                    Checkbox(\r\n+                                        value: _removeButton,\r\n+                                        onChanged: (a) {\r\n+                                          setState(() {\r\n+                                            _removeButton = !_removeButton;\r\n+                                          });\r\n+                                        }),\r\n+                                    Text('Remove Button')\r\n+                                  ],\r\n+                                ),\r\n+                                onTap: () {\r\n+                                  setState(() {\r\n+                                    _removeButton = !_removeButton;\r\n+                                  });\r\n+                                },\r\n+                              ),\r\n+                              Padding(\r\n+                                padding: EdgeInsets.all(5),\r\n+                              ),\r\n+                              GestureDetector(\r\n+                                child: Row(\r\n+                                  children: <Widget>[\r\n+                                    Checkbox(\r\n+                                        value: _symmetry,\r\n+                                        onChanged: (a) {\r\n+                                          setState(() {\r\n+                                            _symmetry = !_symmetry;\r\n+                                          });\r\n+                                        }),\r\n+                                    Text('Symmetry')\r\n+                                  ],\r\n+                                ),\r\n+                                onTap: () {\r\n+                                  setState(() {\r\n+                                    _symmetry = !_symmetry;\r\n+                                  });\r\n+                                },\r\n+                              ),\r\n+                              Padding(\r\n+                                padding: EdgeInsets.all(5),\r\n+                              ),\r\n+                              DropdownButton(\r\n+                                hint: _column == 0\r\n+                                    ? Text(\"Not set\")\r\n+                                    : Text(_column.toString()),\r\n+                                items: _buildItems(),\r\n+                                onChanged: (a) {\r\n+                                  setState(() {\r\n+                                    _column = a;\r\n+                                  });\r\n+                                },\r\n+                              ),\r\n+                            ],\r\n+                          ),\r\n+                          Row(\r\n+                            mainAxisAlignment: MainAxisAlignment.center,\r\n+                            children: <Widget>[\r\n+                              GestureDetector(\r\n+                                child: Row(\r\n+                                  children: <Widget>[\r\n+                                    Checkbox(\r\n+                                        value: _horizontalScroll,\r\n+                                        onChanged: (a) {\r\n+                                          setState(() {\r\n+                                            _horizontalScroll =\r\n+                                                !_horizontalScroll;\r\n+                                          });\r\n+                                        }),\r\n+                                    Text('Horizontal scroll')\r\n+                                  ],\r\n+                                ),\r\n+                                onTap: () {\r\n+                                  setState(() {\r\n+                                    _horizontalScroll = !_horizontalScroll;\r\n+                                  });\r\n+                                },\r\n+                              ),\r\n+                              GestureDetector(\r\n+                                child: Row(\r\n+                                  children: <Widget>[\r\n+                                    Checkbox(\r\n+                                        value: _singleItem,\r\n+                                        onChanged: (a) {\r\n+                                          setState(() {\r\n+                                            _singleItem = !_singleItem;\r\n+                                          });\r\n+                                        }),\r\n+                                    Text('Single Item')\r\n+                                  ],\r\n+                                ),\r\n+                                onTap: () {\r\n+                                  setState(() {\r\n+                                    _singleItem = !_singleItem;\r\n+                                  });\r\n+                                },\r\n+                              ),\r\n+                            ],\r\n+                          ),\r\n+                          Column(\r\n+                            children: <Widget>[\r\n+                              Text('Font Size'),\r\n+                              Row(\r\n+                                mainAxisAlignment: MainAxisAlignment.center,\r\n+                                children: <Widget>[\r\n+                                  Slider(\r\n+                                    value: _fontSize,\r\n+                                    min: 6,\r\n+                                    max: 30,\r\n+                                    onChanged: (a) {\r\n+                                      setState(() {\r\n+                                        _fontSize = (a.round()).toDouble();\r\n+                                      });\r\n+                                    },\r\n+                                  ),\r\n+                                  Text(_fontSize.toString()),\r\n+                                  Padding(\r\n+                                    padding:\r\n+                                        EdgeInsets.symmetric(horizontal: 20),\r\n+                                  ),\r\n+                                  Container(\r\n+                                    height: 30,\r\n+                                    width: 30,\r\n+                                    //color: Colors.blueGrey,\r\n+                                    child: IconButton(\r\n+                                      padding: EdgeInsets.all(0),\r\n+                                      //color: Colors.white,\r\n+                                      icon: Icon(Icons.add),\r\n+                                      onPressed: () {\r\n+                                        setState(() {\r\n+                                          _count++;\r\n+                                          _items.add(_count.toString());\r\n+                                          //_items.removeAt(3); _items.removeAt(10);\r\n+                                        });\r\n+                                      },\r\n+                                    ),\r\n+                                  ),\r\n+                                  Padding(\r\n+                                    padding:\r\n+                                        EdgeInsets.symmetric(horizontal: 5),\r\n+                                  ),\r\n+                                  Container(\r\n+                                    height: 30,\r\n+                                    width: 30,\r\n+                                    //color: Colors.grey,\r\n+                                    child: IconButton(\r\n+                                      padding: EdgeInsets.all(0),\r\n+                                      //color: Colors.white,\r\n+                                      icon: Icon(Icons.refresh),\r\n+                                      onPressed: () {\r\n+                                        setState(() {\r\n+                                          _items = _list.toList();\r\n+                                        });\r\n+                                      },\r\n+                                    ),\r\n+                                  ),\r\n+                                ],\r\n+                              ),\r\n+                            ],\r\n+                          ),\r\n+                        ],\r\n+                      ),\r\n+                    ),\r\n+                    Padding(\r\n+                      padding: EdgeInsets.all(20),\r\n+                    ),\r\n+                    _tags1,\r\n+                    Container(\r\n+                        padding: EdgeInsets.all(20),\r\n+                        child: Column(\r\n+                          children: <Widget>[\r\n+                            Divider(\r\n+                              color: Colors.blueGrey,\r\n+                            ),\r\n+                            Padding(\r\n+                              padding: EdgeInsets.symmetric(vertical: 20),\r\n+                              child: Text(_onPressed),\r\n+                            ),\r\n+                          ],\r\n+                        )),\r\n+                  ])),\r\n+                ],\r\n+              ),\r\n+              CustomScrollView(\r\n+                slivers: <Widget>[\r\n+                  SliverList(\r\n+                      delegate: SliverChildListDelegate([\r\n+                    Container(\r\n+                      decoration: BoxDecoration(\r\n+                          border: Border(\r\n+                              bottom: BorderSide(\r\n+                                  color: Colors.grey[300], width: 0.5))),\r\n+                      margin:\r\n+                          EdgeInsets.symmetric(horizontal: 10, vertical: 10),\r\n+                      child: ExpansionTile(\r\n+                        title: Text(\"Settings\"),\r\n+                        children: <Widget>[\r\n+                          Row(\r\n+                            mainAxisAlignment: MainAxisAlignment.center,\r\n+                            children: <Widget>[\r\n+                              GestureDetector(\r\n+                                child: Row(\r\n+                                  children: <Widget>[\r\n+                                    Checkbox(\r\n+                                        value: _withSuggesttions,\r\n+                                        onChanged: (a) {\r\n+                                          setState(() {\r\n+                                            _withSuggesttions =\r\n+                                                !_withSuggesttions;\r\n+                                          });\r\n+                                        }),\r\n+                                    Text('Suggestions')\r\n+                                  ],\r\n+                                ),\r\n+                                onTap: () {\r\n+                                  setState(() {\r\n+                                    _withSuggesttions = !_withSuggesttions;\r\n+                                  });\r\n+                                },\r\n+                              ),\r\n+                              Padding(\r\n+                                padding: EdgeInsets.all(20),\r\n+                              ),\r\n+                              DropdownButton(\r\n+                                hint: Text(_itemCombine),\r\n+                                items: _buildItems2(),\r\n+                                onChanged: (val) {\r\n+                                  setState(() {\r\n+                                    _itemCombine = val;\r\n+                                  });\r\n+                                },\r\n+                              ),\r\n+                            ],\r\n+                          ),\r\n+                          Row(\r\n+                            mainAxisAlignment: MainAxisAlignment.center,\r\n+                            children: <Widget>[\r\n+                              GestureDetector(\r\n+                                child: Row(\r\n+                                  children: <Widget>[\r\n+                                    Checkbox(\r\n+                                        value: _horizontalScroll,\r\n+                                        onChanged: (a) {\r\n+                                          setState(() {\r\n+                                            _horizontalScroll =\r\n+                                                !_horizontalScroll;\r\n+                                          });\r\n+                                        }),\r\n+                                    Text('Horizontal scroll')\r\n+                                  ],\r\n+                                ),\r\n+                                onTap: () {\r\n+                                  setState(() {\r\n+                                    _horizontalScroll = !_horizontalScroll;\r\n+                                  });\r\n+                                },\r\n+                              ),\r\n+                              GestureDetector(\r\n+                                child: Row(\r\n+                                  children: <Widget>[\r\n+                                    Checkbox(\r\n+                                        value: _startDirection,\r\n+                                        onChanged: (a) {\r\n+                                          setState(() {\r\n+                                            _startDirection = !_startDirection;\r\n+                                          });\r\n+                                        }),\r\n+                                    Text('Start Direction')\r\n+                                  ],\r\n+                                ),\r\n+                                onTap: () {\r\n+                                  setState(() {\r\n+                                    _startDirection = !_startDirection;\r\n+                                  });\r\n+                                },\r\n+                              ),\r\n+                            ],\r\n+                          ),\r\n+                          Column(\r\n+                            children: <Widget>[\r\n+                              Text('Font Size'),\r\n+                              Row(\r\n+                                mainAxisAlignment: MainAxisAlignment.center,\r\n+                                children: <Widget>[\r\n+                                  Slider(\r\n+                                    value: _fontSize,\r\n+                                    min: 6,\r\n+                                    max: 30,\r\n+                                    onChanged: (a) {\r\n+                                      setState(() {\r\n+                                        _fontSize = (a.round()).toDouble();\r\n+                                      });\r\n+                                    },\r\n+                                  ),\r\n+                                  Text(_fontSize.toString()),\r\n+                                ],\r\n+                              ),\r\n+                            ],\r\n+                          ),\r\n+                        ],\r\n+                      ),\r\n+                    ),\r\n+                    Padding(\r\n+                      padding: EdgeInsets.all(20),\r\n+                    ),\r\n+                    _tags2,\r\n+                    Container(\r\n+                        padding: EdgeInsets.all(20),\r\n+                        child: Column(\r\n+                          children: <Widget>[\r\n+                            Divider(\r\n+                              color: Colors.blueGrey,\r\n+                            ),\r\n+                            Padding(\r\n+                              padding: EdgeInsets.symmetric(vertical: 20),\r\n+                              child: Text(_onPressed),\r\n+                            ),\r\n+                          ],\r\n+                        )),\r\n+                  ])),\r\n+                ],\r\n+              ),\r\n+            ],\r\n+          )),\r\n+    );\r\n+  }\r\n+\r\n+  Widget get _tags1 {\r\n     return Tags(\r\n-      key:_tagStateKey,\r\n-      textField: TagsTextField(\r\n-        textStyle: TextStyle(fontSize: _fontSize),\r\n-        constraintSuggestion: true, suggestions: [],\r\n-        //width: double.infinity, padding: EdgeInsets.symmetric(horizontal: 10),\r\n-        onSubmitted: (String str) {\r\n-          // Add item to the data source.\r\n-          setState(() {\r\n-              // required\r\n-            _items.add(str);\r\n-          });\r\n-        },\r\n+      key: _tagStateKey,\r\n+      symmetry: _symmetry,\r\n+      columns: _column,\r\n+      horizontalScroll: _horizontalScroll,\r\n+      //verticalDirection: VerticalDirection.up, textDirection: TextDirection.rtl,\r\n+      heightHorizontalScroll: 60 * (_fontSize / 14),\r\n+      itemCount: _items.length,\r\n+      itemBuilder: (index) {\r\n+        final item = _items[index];\r\n+\r\n+        return ItemTags(\r\n+          key: Key(index.toString()),\r\n+          index: index,\r\n+          title: item,\r\n+          pressEnabled: true,\r\n+          activeColor: Colors.blueGrey[600],\r\n+          singleItem: _singleItem,\r\n+          splashColor: Colors.green,\r\n+          combine: ItemTagsCombine.withTextBefore,\r\n+          image: index > 0 && index < 5\r\n+              ? ItemTagsImage(\r\n+                  //image: AssetImage(\"img/p$index.jpg\"),\r\n+                  child: Image.network(\r\n+                  \"http://www.clipartpanda.com/clipart_images/user-66327738/download\",\r\n+                  width: 16 * _fontSize / 14,\r\n+                  height: 16 * _fontSize / 14,\r\n+                ))\r\n+              : (1 == 1\r\n+                  ? ItemTagsImage(\r\n+                      image: NetworkImage(\r\n+                          \"https://d32ogoqmya1dw8.cloudfront.net/images/serc/empty_user_icon_256.v2.png\"),\r\n+                    )\r\n+                  : null),\r\n+          icon: (item == '0' || item == '1' || item == '2')\r\n+              ? ItemTagsIcon(\r\n+                  icon: _icon[int.parse(item)],\r\n+                )\r\n+              : null,\r\n+          removeButton: _removeButton\r\n+              ? ItemTagsRemoveButton(\r\n+                  onRemoved: () {\r\n+                    setState(() {\r\n+                      _items.removeAt(index);\r\n+                    });\r\n+                    return true;\r\n+                  },\r\n+                )\r\n+              : null,\r\n+          textScaleFactor:\r\n+              utf8.encode(item.substring(0, 1)).length > 2 ? 0.8 : 1,\r\n+          textStyle: TextStyle(\r\n+            fontSize: _fontSize,\r\n+          ),\r\n+          onPressed: (item) => print(item),\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  // Position for popup menu\r\n+  Offset _tapPosition;\r\n+\r\n+  Widget get _tags2 {\r\n+    //popup Menu\r\n+    final RenderBox overlay = Overlay.of(context).context?.findRenderObject();\r\n+\r\n+    ItemTagsCombine combine = ItemTagsCombine.onlyText;\r\n+\r\n+    switch (_itemCombine) {\r\n+      case 'onlyText':\r\n+        combine = ItemTagsCombine.onlyText;\r\n+        break;\r\n+      case 'onlyIcon':\r\n+        combine = ItemTagsCombine.onlyIcon;\r\n+        break;\r\n+      case 'onlyIcon':\r\n+        combine = ItemTagsCombine.onlyIcon;\r\n+        break;\r\n+      case 'onlyImage':\r\n+        combine = ItemTagsCombine.onlyImage;\r\n+        break;\r\n+      case 'imageOrIconOrText':\r\n+        combine = ItemTagsCombine.imageOrIconOrText;\r\n+        break;\r\n+      case 'withTextAfter':\r\n+        combine = ItemTagsCombine.withTextAfter;\r\n+        break;\r\n+      case 'withTextBefore':\r\n+        combine = ItemTagsCombine.withTextBefore;\r\n+        break;\r\n+    }\r\n+\r\n+    return Tags(\r\n+      key: Key(\"2\"),\r\n+      symmetry: _symmetry,\r\n+      columns: _column,\r\n+      horizontalScroll: _horizontalScroll,\r\n+      verticalDirection:\r\n+          _startDirection ? VerticalDirection.up : VerticalDirection.down,\r\n+      textDirection: _startDirection ? TextDirection.rtl : TextDirection.ltr,\r\n+      heightHorizontalScroll: 60 * (_fontSize / 14),\r\n+      textField: _textField,\r\n+      itemCount: _items.length,\r\n+      itemBuilder: (index) {\r\n+        final item = _items[index];\r\n+\r\n+        return GestureDetector(\r\n+          child: ItemTags(\r\n+            key: Key(index.toString()),\r\n+            index: index,\r\n+            title: item,\r\n+            pressEnabled: false,\r\n+            activeColor: Colors.green[400],\r\n+            combine: combine,\r\n+            image: index > 0 && index < 5\r\n+                ? ItemTagsImage(image: AssetImage(\"img/p$index.jpg\"))\r\n+                : (1 == 1\r\n+                    ? ItemTagsImage(\r\n+                        image: NetworkImage(\r\n+                            \"https://image.flaticon.com/icons/png/512/44/44948.png\"))\r\n+                    : null),\r\n+            icon: (item == '0' || item == '1' || item == '2')\r\n+                ? ItemTagsIcon(\r\n+                    icon: _icon[int.parse(item)],\r\n+                  )\r\n+                : null,\r\n+            removeButton: ItemTagsRemoveButton(\r\n+              backgroundColor: Colors.green[900],\r\n+              onRemoved: () {\r\n+                setState(() {\r\n+                  _items.removeAt(index);\r\n+                });\r\n+                return true;\r\n+              },\r\n+            ),\r\n+            textScaleFactor:\r\n+                utf8.encode(item.substring(0, 1)).length > 2 ? 0.8 : 1,\r\n+            textStyle: TextStyle(\r\n+              fontSize: _fontSize,\r\n+            ),\r\n+          ),\r\n+          onTapDown: (details) => _tapPosition = details.globalPosition,\r\n+          onLongPress: () {\r\n+            showMenu(\r\n+                    //semanticLabel: item,\r\n+                    items: <PopupMenuEntry>[\r\n+                  PopupMenuItem(\r\n+                    child: Text(item, style: TextStyle(color: Colors.blueGrey)),\r\n+                    enabled: false,\r\n+                  ),\r\n+                  PopupMenuDivider(),\r\n+                  PopupMenuItem(\r\n+                    value: 1,\r\n+                    child: Row(\r\n+                      children: <Widget>[\r\n+                        Icon(Icons.content_copy),\r\n+                        Text(\"Copy text\"),\r\n+                      ],\r\n+                    ),\r\n+                  ),\r\n+                ],\r\n+                    context: context,\r\n+                    position: RelativeRect.fromRect(\r\n+                        _tapPosition & Size(40, 40),\r\n+                        Offset.zero &\r\n+                            overlay\r\n+                                .size) // & RelativeRect.fromLTRB(65.0, 40.0, 0.0, 0.0),\r\n+                    )\r\n+                .then((value) {\r\n+              if (value == 1) Clipboard.setData(ClipboardData(text: item));\r\n+            });\r\n+          },\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  TagsTextField get _textField {\r\n+    return TagsTextField(\r\n+      autofocus: false,\r\n+      width: double.infinity,\r\n+      padding: EdgeInsets.symmetric(horizontal: 10),\r\n+      textStyle: TextStyle(\r\n+        fontSize: _fontSize,\r\n+        //height: 1\r\n       ),\r\n-      itemCount: _items.length, // required\r\n-      itemBuilder: (int index){          \r\n-            final item = _items[index];\r\n-    \r\n-            return ItemTags(\r\n-                  // Each ItemTags must contain a Key. Keys allow Flutter to\r\n-                  // uniquely identify widgets.\r\n-                  key: Key(index.toString()),\r\n-                  index: index, // required\r\n-                  title: item.title,\r\n-                  active: item.active,\r\n-                  customData: item.customData,\r\n-                  textStyle: TextStyle( fontSize: _fontSize, ),\r\n-                  combine: ItemTagsCombine.withTextBefore,\r\n-                  image: ItemTagsImage(\r\n-                    image: AssetImage(\"img.jpg\") // OR NetworkImage(\"https://...image.png\")\r\n-                  ), // OR null,\r\n-                  icon: ItemTagsIcon(\r\n-                    icon: Icons.add,\r\n-                  ), // OR null,\r\n-                  removeButton: ItemTagsRemoveButton(\r\n-                    onRemoved: (){\r\n-                        // Remove the item from the data source.\r\n-                        setState(() {\r\n-                            // required\r\n-                            _items.removeAt(index);\r\n-                        });\r\n-                        //required\r\n-                        return true;\r\n-                    },\r\n-                  ), // OR null,\r\n-                  onPressed: (item) => print(item),\r\n-                  onLongPressed: (item) => print(item),\r\n-            );\r\n-    \r\n+      enabled: true,\r\n+      constraintSuggestion: true,\r\n+      suggestions: _withSuggesttions\r\n+          ? [\r\n+              \"One\",\r\n+              \"two\",\r\n+              \"android\",\r\n+              \"Dart\",\r\n+              \"flutter\",\r\n+              \"test\",\r\n+              \"tests\",\r\n+              \"androids\",\r\n+              \"androidsaaa\",\r\n+              \"Test\",\r\n+              \"suggest\",\r\n+              \"suggestions\",\r\n+              \"互联网\",\r\n+              \"last\",\r\n+              \"lest\",\r\n+              \"炫舞时代\"\r\n+            ]\r\n+          : null,\r\n+      onSubmitted: (String str) {\r\n+        setState(() {\r\n+          _items.add(str);\r\n+        });\r\n       },\r\n-    );    \r\n-}\r\n+    );\r\n+  }\r\n \r\n-final GlobalKey<TagsState> _tagStateKey = GlobalKey<TagsState>();\r\n-// Allows you to get a list of all the ItemTags\r\n-_getAllItem(){\r\n-    List<Item> lst = _tagStateKey.currentState?.getAllItem;\r\n-    if(lst!=null)\r\n-        lst.where((a) => a.active==true).forEach( ( a) => print(a.title));        \r\n+  List<DropdownMenuItem> _buildItems() {\r\n+    List<DropdownMenuItem> list = [];\r\n+\r\n+    int count = 19;\r\n+\r\n+    list.add(\r\n+      DropdownMenuItem(\r\n+        child: Text(\"Not set\"),\r\n+        value: 0,\r\n+      ),\r\n+    );\r\n+\r\n+    for (int i = 1; i < count; i++)\r\n+      list.add(\r\n+        DropdownMenuItem(\r\n+          child: Text(i.toString()),\r\n+          value: i,\r\n+        ),\r\n+      );\r\n+\r\n+    return list;\r\n+  }\r\n+\r\n+  List<DropdownMenuItem> _buildItems2() {\r\n+    List<DropdownMenuItem> list = [];\r\n+\r\n+    list.add(DropdownMenuItem(\r\n+      child: Text(\"onlyText\"),\r\n+      value: 'onlyText',\r\n+    ));\r\n+\r\n+    list.add(DropdownMenuItem(\r\n+      child: Text(\"onlyIcon\"),\r\n+      value: 'onlyIcon',\r\n+    ));\r\n+    list.add(DropdownMenuItem(\r\n+      child: Text(\"onlyImage\"),\r\n+      value: 'onlyImage',\r\n+    ));\r\n+    list.add(DropdownMenuItem(\r\n+      child: Text(\"imageOrIconOrText\"),\r\n+      value: 'imageOrIconOrText',\r\n+    ));\r\n+    list.add(DropdownMenuItem(\r\n+      child: Text(\"withTextBefore\"),\r\n+      value: 'withTextBefore',\r\n+    ));\r\n+    list.add(DropdownMenuItem(\r\n+      child: Text(\"withTextAfter\"),\r\n+      value: 'withTextAfter',\r\n+    ));\r\n+\r\n+    return list;\r\n+  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708611877682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -654,10 +654,10 @@\n \r\n   TagsTextField get _textField {\r\n     return TagsTextField(\r\n       autofocus: false,\r\n-      width: double.infinity,\r\n-      padding: EdgeInsets.symmetric(horizontal: 10),\r\n+      //width: double.infinity,\r\n+      padding: EdgeInsets.symmetric(horizontal: 10, vertical: 0),\r\n       textStyle: TextStyle(\r\n         fontSize: _fontSize,\r\n         //height: 1\r\n       ),\r\n@@ -744,5 +744,5 @@\n     ));\r\n \r\n     return list;\r\n   }\r\n-}\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708612140106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,748 +1,78 @@\n-import 'dart:convert';\r\n import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n+import 'package:simple_tags/simple_tags.dart';\r\n \r\n-import 'package:flutter_tags/flutter_tags.dart';\r\n+void main() {\r\n+  runApp(MyApp());\r\n+}\r\n \r\n-void main() => runApp(MyApp());\r\n-\r\n class MyApp extends StatelessWidget {\r\n-  // This widget is the root of your application.\r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return MaterialApp(\r\n-      title: 'Flutter Tags Demo',\r\n+      title: 'Simple Tags Demo',\r\n       theme: ThemeData(\r\n-        primarySwatch: Colors.blueGrey,\r\n+        primarySwatch: Colors.blue,\r\n       ),\r\n-      home: MyHomePage(title: 'Flutter Tags'),\r\n+      home: SimpleTagExample(title: 'Simple Tags Demo'),\r\n     );\r\n   }\r\n }\r\n \r\n-class MyHomePage extends StatefulWidget {\r\n-  MyHomePage({Key key, this.title}) : super(key: key);\r\n+class SimpleTagExample extends StatefulWidget {\r\n+  SimpleTagExample({Key key, this.title}) : super(key: key);\r\n+\r\n   final String title;\r\n+  final List<String> content = [\r\n+    'Apple',\r\n+    'Banana',\r\n+    'Orange',\r\n+    'Pomme',\r\n+    'Carambola',\r\n+    'Cherries',\r\n+    'Date Fruit',\r\n+    'A Fruit with a really long name',\r\n+    'A Fruit with a really, really, really, really, very, very, very, very long name',\r\n+    'Durian',\r\n+    'Grapefruit'\r\n+  ];\r\n \r\n   @override\r\n-  _MyHomePageState createState() => _MyHomePageState();\r\n+  _SimpleTagExampleState createState() => _SimpleTagExampleState();\r\n }\r\n \r\n-class _MyHomePageState extends State<MyHomePage>\r\n-    with SingleTickerProviderStateMixin {\r\n-  TabController _tabController;\r\n-  ScrollController _scrollViewController;\r\n-\r\n-  final List<String> _list = [\r\n-    '0',\r\n-    'SDK',\r\n-    'plugin updates',\r\n-    'Facebook',\r\n-    '哔了狗了QP又不够了',\r\n-    'Kirchhoff',\r\n-    'Italy',\r\n-    'France',\r\n-    'Spain',\r\n-    '美',\r\n-    'Dart',\r\n-    'SDK',\r\n-    'Foo',\r\n-    'Select',\r\n-    'lorem ip',\r\n-    '9',\r\n-    'Star',\r\n-    'Flutter Selectable Tags',\r\n-    '1',\r\n-    'Hubble',\r\n-    '2',\r\n-    'Input flutter tags',\r\n-    'A B C',\r\n-    '8',\r\n-    'Android Studio developer',\r\n-    'welcome to the jungle',\r\n-    'Gauss',\r\n-    '美术',\r\n-    '互联网',\r\n-    '炫舞时代',\r\n-    '篝火营地',\r\n-  ];\r\n-\r\n-  bool _symmetry = false;\r\n-  bool _removeButton = true;\r\n-  bool _singleItem = true;\r\n-  bool _startDirection = false;\r\n-  bool _horizontalScroll = true;\r\n-  bool _withSuggesttions = false;\r\n-  int _count = 0;\r\n-  int _column = 0;\r\n-  double _fontSize = 14;\r\n-\r\n-  String _itemCombine = 'withTextBefore';\r\n-\r\n-  String _onPressed = '';\r\n-\r\n-  List _icon = [Icons.home, Icons.language, Icons.headset];\r\n-\r\n+class _SimpleTagExampleState extends State<SimpleTagExample> {\r\n   @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _tabController = TabController(length: 2, vsync: this);\r\n-    _scrollViewController = ScrollController();\r\n-\r\n-    _items = _list.toList();\r\n-  }\r\n-\r\n-  List _items;\r\n-\r\n-  final GlobalKey<TagsState> _tagStateKey = GlobalKey<TagsState>();\r\n-\r\n-  @override\r\n   Widget build(BuildContext context) {\r\n-    //List<Item> lst = _tagStateKey.currentState?.getAllItem; lst.forEach((f) => print(f.title));\r\n     return Scaffold(\r\n-      body: NestedScrollView(\r\n-          controller: _scrollViewController,\r\n-          headerSliverBuilder: (BuildContext context, bool boxIsScrolled) {\r\n-            return <Widget>[\r\n-              SliverAppBar(\r\n-                title: Text(\"flutter tags\"),\r\n-                centerTitle: true,\r\n-                pinned: true,\r\n-                expandedHeight: 0,\r\n-                floating: true,\r\n-                forceElevated: boxIsScrolled,\r\n-                bottom: TabBar(\r\n-                  isScrollable: false,\r\n-                  indicatorSize: TabBarIndicatorSize.label,\r\n-                  labelStyle: TextStyle(fontSize: 18.0),\r\n-                  tabs: [\r\n-                    Tab(text: \"Demo 1\"),\r\n-                    Tab(text: \"Demo 2\"),\r\n-                  ],\r\n-                  controller: _tabController,\r\n-                ),\r\n-              )\r\n-            ];\r\n-          },\r\n-          body: TabBarView(\r\n-            controller: _tabController,\r\n-            children: [\r\n-              CustomScrollView(\r\n-                slivers: <Widget>[\r\n-                  SliverList(\r\n-                      delegate: SliverChildListDelegate([\r\n-                    Container(\r\n-                      decoration: BoxDecoration(\r\n-                          border: Border(\r\n-                              bottom: BorderSide(\r\n-                                  color: Colors.grey[300], width: 0.5))),\r\n-                      margin:\r\n-                          EdgeInsets.symmetric(horizontal: 10, vertical: 10),\r\n-                      child: ExpansionTile(\r\n-                        title: Text(\"Settings\"),\r\n-                        children: <Widget>[\r\n-                          Row(\r\n-                            mainAxisAlignment: MainAxisAlignment.center,\r\n-                            children: <Widget>[\r\n-                              GestureDetector(\r\n-                                child: Row(\r\n-                                  children: <Widget>[\r\n-                                    Checkbox(\r\n-                                        value: _removeButton,\r\n-                                        onChanged: (a) {\r\n-                                          setState(() {\r\n-                                            _removeButton = !_removeButton;\r\n-                                          });\r\n-                                        }),\r\n-                                    Text('Remove Button')\r\n-                                  ],\r\n-                                ),\r\n-                                onTap: () {\r\n-                                  setState(() {\r\n-                                    _removeButton = !_removeButton;\r\n-                                  });\r\n-                                },\r\n-                              ),\r\n-                              Padding(\r\n-                                padding: EdgeInsets.all(5),\r\n-                              ),\r\n-                              GestureDetector(\r\n-                                child: Row(\r\n-                                  children: <Widget>[\r\n-                                    Checkbox(\r\n-                                        value: _symmetry,\r\n-                                        onChanged: (a) {\r\n-                                          setState(() {\r\n-                                            _symmetry = !_symmetry;\r\n-                                          });\r\n-                                        }),\r\n-                                    Text('Symmetry')\r\n-                                  ],\r\n-                                ),\r\n-                                onTap: () {\r\n-                                  setState(() {\r\n-                                    _symmetry = !_symmetry;\r\n-                                  });\r\n-                                },\r\n-                              ),\r\n-                              Padding(\r\n-                                padding: EdgeInsets.all(5),\r\n-                              ),\r\n-                              DropdownButton(\r\n-                                hint: _column == 0\r\n-                                    ? Text(\"Not set\")\r\n-                                    : Text(_column.toString()),\r\n-                                items: _buildItems(),\r\n-                                onChanged: (a) {\r\n-                                  setState(() {\r\n-                                    _column = a;\r\n-                                  });\r\n-                                },\r\n-                              ),\r\n-                            ],\r\n-                          ),\r\n-                          Row(\r\n-                            mainAxisAlignment: MainAxisAlignment.center,\r\n-                            children: <Widget>[\r\n-                              GestureDetector(\r\n-                                child: Row(\r\n-                                  children: <Widget>[\r\n-                                    Checkbox(\r\n-                                        value: _horizontalScroll,\r\n-                                        onChanged: (a) {\r\n-                                          setState(() {\r\n-                                            _horizontalScroll =\r\n-                                                !_horizontalScroll;\r\n-                                          });\r\n-                                        }),\r\n-                                    Text('Horizontal scroll')\r\n-                                  ],\r\n-                                ),\r\n-                                onTap: () {\r\n-                                  setState(() {\r\n-                                    _horizontalScroll = !_horizontalScroll;\r\n-                                  });\r\n-                                },\r\n-                              ),\r\n-                              GestureDetector(\r\n-                                child: Row(\r\n-                                  children: <Widget>[\r\n-                                    Checkbox(\r\n-                                        value: _singleItem,\r\n-                                        onChanged: (a) {\r\n-                                          setState(() {\r\n-                                            _singleItem = !_singleItem;\r\n-                                          });\r\n-                                        }),\r\n-                                    Text('Single Item')\r\n-                                  ],\r\n-                                ),\r\n-                                onTap: () {\r\n-                                  setState(() {\r\n-                                    _singleItem = !_singleItem;\r\n-                                  });\r\n-                                },\r\n-                              ),\r\n-                            ],\r\n-                          ),\r\n-                          Column(\r\n-                            children: <Widget>[\r\n-                              Text('Font Size'),\r\n-                              Row(\r\n-                                mainAxisAlignment: MainAxisAlignment.center,\r\n-                                children: <Widget>[\r\n-                                  Slider(\r\n-                                    value: _fontSize,\r\n-                                    min: 6,\r\n-                                    max: 30,\r\n-                                    onChanged: (a) {\r\n-                                      setState(() {\r\n-                                        _fontSize = (a.round()).toDouble();\r\n-                                      });\r\n-                                    },\r\n-                                  ),\r\n-                                  Text(_fontSize.toString()),\r\n-                                  Padding(\r\n-                                    padding:\r\n-                                        EdgeInsets.symmetric(horizontal: 20),\r\n-                                  ),\r\n-                                  Container(\r\n-                                    height: 30,\r\n-                                    width: 30,\r\n-                                    //color: Colors.blueGrey,\r\n-                                    child: IconButton(\r\n-                                      padding: EdgeInsets.all(0),\r\n-                                      //color: Colors.white,\r\n-                                      icon: Icon(Icons.add),\r\n-                                      onPressed: () {\r\n-                                        setState(() {\r\n-                                          _count++;\r\n-                                          _items.add(_count.toString());\r\n-                                          //_items.removeAt(3); _items.removeAt(10);\r\n-                                        });\r\n-                                      },\r\n-                                    ),\r\n-                                  ),\r\n-                                  Padding(\r\n-                                    padding:\r\n-                                        EdgeInsets.symmetric(horizontal: 5),\r\n-                                  ),\r\n-                                  Container(\r\n-                                    height: 30,\r\n-                                    width: 30,\r\n-                                    //color: Colors.grey,\r\n-                                    child: IconButton(\r\n-                                      padding: EdgeInsets.all(0),\r\n-                                      //color: Colors.white,\r\n-                                      icon: Icon(Icons.refresh),\r\n-                                      onPressed: () {\r\n-                                        setState(() {\r\n-                                          _items = _list.toList();\r\n-                                        });\r\n-                                      },\r\n-                                    ),\r\n-                                  ),\r\n-                                ],\r\n-                              ),\r\n-                            ],\r\n-                          ),\r\n-                        ],\r\n-                      ),\r\n-                    ),\r\n-                    Padding(\r\n-                      padding: EdgeInsets.all(20),\r\n-                    ),\r\n-                    _tags1,\r\n-                    Container(\r\n-                        padding: EdgeInsets.all(20),\r\n-                        child: Column(\r\n-                          children: <Widget>[\r\n-                            Divider(\r\n-                              color: Colors.blueGrey,\r\n-                            ),\r\n-                            Padding(\r\n-                              padding: EdgeInsets.symmetric(vertical: 20),\r\n-                              child: Text(_onPressed),\r\n-                            ),\r\n-                          ],\r\n-                        )),\r\n-                  ])),\r\n-                ],\r\n-              ),\r\n-              CustomScrollView(\r\n-                slivers: <Widget>[\r\n-                  SliverList(\r\n-                      delegate: SliverChildListDelegate([\r\n-                    Container(\r\n-                      decoration: BoxDecoration(\r\n-                          border: Border(\r\n-                              bottom: BorderSide(\r\n-                                  color: Colors.grey[300], width: 0.5))),\r\n-                      margin:\r\n-                          EdgeInsets.symmetric(horizontal: 10, vertical: 10),\r\n-                      child: ExpansionTile(\r\n-                        title: Text(\"Settings\"),\r\n-                        children: <Widget>[\r\n-                          Row(\r\n-                            mainAxisAlignment: MainAxisAlignment.center,\r\n-                            children: <Widget>[\r\n-                              GestureDetector(\r\n-                                child: Row(\r\n-                                  children: <Widget>[\r\n-                                    Checkbox(\r\n-                                        value: _withSuggesttions,\r\n-                                        onChanged: (a) {\r\n-                                          setState(() {\r\n-                                            _withSuggesttions =\r\n-                                                !_withSuggesttions;\r\n-                                          });\r\n-                                        }),\r\n-                                    Text('Suggestions')\r\n-                                  ],\r\n-                                ),\r\n-                                onTap: () {\r\n-                                  setState(() {\r\n-                                    _withSuggesttions = !_withSuggesttions;\r\n-                                  });\r\n-                                },\r\n-                              ),\r\n-                              Padding(\r\n-                                padding: EdgeInsets.all(20),\r\n-                              ),\r\n-                              DropdownButton(\r\n-                                hint: Text(_itemCombine),\r\n-                                items: _buildItems2(),\r\n-                                onChanged: (val) {\r\n-                                  setState(() {\r\n-                                    _itemCombine = val;\r\n-                                  });\r\n-                                },\r\n-                              ),\r\n-                            ],\r\n-                          ),\r\n-                          Row(\r\n-                            mainAxisAlignment: MainAxisAlignment.center,\r\n-                            children: <Widget>[\r\n-                              GestureDetector(\r\n-                                child: Row(\r\n-                                  children: <Widget>[\r\n-                                    Checkbox(\r\n-                                        value: _horizontalScroll,\r\n-                                        onChanged: (a) {\r\n-                                          setState(() {\r\n-                                            _horizontalScroll =\r\n-                                                !_horizontalScroll;\r\n-                                          });\r\n-                                        }),\r\n-                                    Text('Horizontal scroll')\r\n-                                  ],\r\n-                                ),\r\n-                                onTap: () {\r\n-                                  setState(() {\r\n-                                    _horizontalScroll = !_horizontalScroll;\r\n-                                  });\r\n-                                },\r\n-                              ),\r\n-                              GestureDetector(\r\n-                                child: Row(\r\n-                                  children: <Widget>[\r\n-                                    Checkbox(\r\n-                                        value: _startDirection,\r\n-                                        onChanged: (a) {\r\n-                                          setState(() {\r\n-                                            _startDirection = !_startDirection;\r\n-                                          });\r\n-                                        }),\r\n-                                    Text('Start Direction')\r\n-                                  ],\r\n-                                ),\r\n-                                onTap: () {\r\n-                                  setState(() {\r\n-                                    _startDirection = !_startDirection;\r\n-                                  });\r\n-                                },\r\n-                              ),\r\n-                            ],\r\n-                          ),\r\n-                          Column(\r\n-                            children: <Widget>[\r\n-                              Text('Font Size'),\r\n-                              Row(\r\n-                                mainAxisAlignment: MainAxisAlignment.center,\r\n-                                children: <Widget>[\r\n-                                  Slider(\r\n-                                    value: _fontSize,\r\n-                                    min: 6,\r\n-                                    max: 30,\r\n-                                    onChanged: (a) {\r\n-                                      setState(() {\r\n-                                        _fontSize = (a.round()).toDouble();\r\n-                                      });\r\n-                                    },\r\n-                                  ),\r\n-                                  Text(_fontSize.toString()),\r\n-                                ],\r\n-                              ),\r\n-                            ],\r\n-                          ),\r\n-                        ],\r\n-                      ),\r\n-                    ),\r\n-                    Padding(\r\n-                      padding: EdgeInsets.all(20),\r\n-                    ),\r\n-                    _tags2,\r\n-                    Container(\r\n-                        padding: EdgeInsets.all(20),\r\n-                        child: Column(\r\n-                          children: <Widget>[\r\n-                            Divider(\r\n-                              color: Colors.blueGrey,\r\n-                            ),\r\n-                            Padding(\r\n-                              padding: EdgeInsets.symmetric(vertical: 20),\r\n-                              child: Text(_onPressed),\r\n-                            ),\r\n-                          ],\r\n-                        )),\r\n-                  ])),\r\n-                ],\r\n-              ),\r\n-            ],\r\n-          )),\r\n-    );\r\n-  }\r\n-\r\n-  Widget get _tags1 {\r\n-    return Tags(\r\n-      key: _tagStateKey,\r\n-      symmetry: _symmetry,\r\n-      columns: _column,\r\n-      horizontalScroll: _horizontalScroll,\r\n-      //verticalDirection: VerticalDirection.up, textDirection: TextDirection.rtl,\r\n-      heightHorizontalScroll: 60 * (_fontSize / 14),\r\n-      itemCount: _items.length,\r\n-      itemBuilder: (index) {\r\n-        final item = _items[index];\r\n-\r\n-        return ItemTags(\r\n-          key: Key(index.toString()),\r\n-          index: index,\r\n-          title: item,\r\n-          pressEnabled: true,\r\n-          activeColor: Colors.blueGrey[600],\r\n-          singleItem: _singleItem,\r\n-          splashColor: Colors.green,\r\n-          combine: ItemTagsCombine.withTextBefore,\r\n-          image: index > 0 && index < 5\r\n-              ? ItemTagsImage(\r\n-                  //image: AssetImage(\"img/p$index.jpg\"),\r\n-                  child: Image.network(\r\n-                  \"http://www.clipartpanda.com/clipart_images/user-66327738/download\",\r\n-                  width: 16 * _fontSize / 14,\r\n-                  height: 16 * _fontSize / 14,\r\n-                ))\r\n-              : (1 == 1\r\n-                  ? ItemTagsImage(\r\n-                      image: NetworkImage(\r\n-                          \"https://d32ogoqmya1dw8.cloudfront.net/images/serc/empty_user_icon_256.v2.png\"),\r\n-                    )\r\n-                  : null),\r\n-          icon: (item == '0' || item == '1' || item == '2')\r\n-              ? ItemTagsIcon(\r\n-                  icon: _icon[int.parse(item)],\r\n-                )\r\n-              : null,\r\n-          removeButton: _removeButton\r\n-              ? ItemTagsRemoveButton(\r\n-                  onRemoved: () {\r\n-                    setState(() {\r\n-                      _items.removeAt(index);\r\n-                    });\r\n-                    return true;\r\n-                  },\r\n-                )\r\n-              : null,\r\n-          textScaleFactor:\r\n-              utf8.encode(item.substring(0, 1)).length > 2 ? 0.8 : 1,\r\n-          textStyle: TextStyle(\r\n-            fontSize: _fontSize,\r\n+      appBar: AppBar(\r\n+        title: Text(widget.title),\r\n+      ),\r\n+      body: SimpleTags(\r\n+        content: widget.content,\r\n+        wrapSpacing: 4,\r\n+        wrapRunSpacing: 4,\r\n+        onTagPress: (tag) {print('pressed $tag');},\r\n+        onTagLongPress: (tag) {print('long pressed $tag');},\r\n+        onTagDoubleTap: (tag) {print('double tapped $tag');},\r\n+        tagContainerPadding: EdgeInsets.all(6),\r\n+        tagTextStyle: TextStyle(color: Colors.deepPurple),\r\n+        tagIcon: Icon(Icons.clear, size: 12),\r\n+        tagContainerDecoration: BoxDecoration(\r\n+          color: Colors.white,\r\n+          border: Border.all(color: Colors.grey),\r\n+          borderRadius: BorderRadius.all(\r\n+            Radius.circular(20),\r\n           ),\r\n-          onPressed: (item) => print(item),\r\n-        );\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  // Position for popup menu\r\n-  Offset _tapPosition;\r\n-\r\n-  Widget get _tags2 {\r\n-    //popup Menu\r\n-    final RenderBox overlay = Overlay.of(context).context?.findRenderObject();\r\n-\r\n-    ItemTagsCombine combine = ItemTagsCombine.onlyText;\r\n-\r\n-    switch (_itemCombine) {\r\n-      case 'onlyText':\r\n-        combine = ItemTagsCombine.onlyText;\r\n-        break;\r\n-      case 'onlyIcon':\r\n-        combine = ItemTagsCombine.onlyIcon;\r\n-        break;\r\n-      case 'onlyIcon':\r\n-        combine = ItemTagsCombine.onlyIcon;\r\n-        break;\r\n-      case 'onlyImage':\r\n-        combine = ItemTagsCombine.onlyImage;\r\n-        break;\r\n-      case 'imageOrIconOrText':\r\n-        combine = ItemTagsCombine.imageOrIconOrText;\r\n-        break;\r\n-      case 'withTextAfter':\r\n-        combine = ItemTagsCombine.withTextAfter;\r\n-        break;\r\n-      case 'withTextBefore':\r\n-        combine = ItemTagsCombine.withTextBefore;\r\n-        break;\r\n-    }\r\n-\r\n-    return Tags(\r\n-      key: Key(\"2\"),\r\n-      symmetry: _symmetry,\r\n-      columns: _column,\r\n-      horizontalScroll: _horizontalScroll,\r\n-      verticalDirection:\r\n-          _startDirection ? VerticalDirection.up : VerticalDirection.down,\r\n-      textDirection: _startDirection ? TextDirection.rtl : TextDirection.ltr,\r\n-      heightHorizontalScroll: 60 * (_fontSize / 14),\r\n-      textField: _textField,\r\n-      itemCount: _items.length,\r\n-      itemBuilder: (index) {\r\n-        final item = _items[index];\r\n-\r\n-        return GestureDetector(\r\n-          child: ItemTags(\r\n-            key: Key(index.toString()),\r\n-            index: index,\r\n-            title: item,\r\n-            pressEnabled: false,\r\n-            activeColor: Colors.green[400],\r\n-            combine: combine,\r\n-            image: index > 0 && index < 5\r\n-                ? ItemTagsImage(image: AssetImage(\"img/p$index.jpg\"))\r\n-                : (1 == 1\r\n-                    ? ItemTagsImage(\r\n-                        image: NetworkImage(\r\n-                            \"https://image.flaticon.com/icons/png/512/44/44948.png\"))\r\n-                    : null),\r\n-            icon: (item == '0' || item == '1' || item == '2')\r\n-                ? ItemTagsIcon(\r\n-                    icon: _icon[int.parse(item)],\r\n-                  )\r\n-                : null,\r\n-            removeButton: ItemTagsRemoveButton(\r\n-              backgroundColor: Colors.green[900],\r\n-              onRemoved: () {\r\n-                setState(() {\r\n-                  _items.removeAt(index);\r\n-                });\r\n-                return true;\r\n-              },\r\n-            ),\r\n-            textScaleFactor:\r\n-                utf8.encode(item.substring(0, 1)).length > 2 ? 0.8 : 1,\r\n-            textStyle: TextStyle(\r\n-              fontSize: _fontSize,\r\n-            ),\r\n-          ),\r\n-          onTapDown: (details) => _tapPosition = details.globalPosition,\r\n-          onLongPress: () {\r\n-            showMenu(\r\n-                    //semanticLabel: item,\r\n-                    items: <PopupMenuEntry>[\r\n-                  PopupMenuItem(\r\n-                    child: Text(item, style: TextStyle(color: Colors.blueGrey)),\r\n-                    enabled: false,\r\n-                  ),\r\n-                  PopupMenuDivider(),\r\n-                  PopupMenuItem(\r\n-                    value: 1,\r\n-                    child: Row(\r\n-                      children: <Widget>[\r\n-                        Icon(Icons.content_copy),\r\n-                        Text(\"Copy text\"),\r\n-                      ],\r\n-                    ),\r\n-                  ),\r\n-                ],\r\n-                    context: context,\r\n-                    position: RelativeRect.fromRect(\r\n-                        _tapPosition & Size(40, 40),\r\n-                        Offset.zero &\r\n-                            overlay\r\n-                                .size) // & RelativeRect.fromLTRB(65.0, 40.0, 0.0, 0.0),\r\n-                    )\r\n-                .then((value) {\r\n-              if (value == 1) Clipboard.setData(ClipboardData(text: item));\r\n-            });\r\n-          },\r\n-        );\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  TagsTextField get _textField {\r\n-    return TagsTextField(\r\n-      autofocus: false,\r\n-      //width: double.infinity,\r\n-      padding: EdgeInsets.symmetric(horizontal: 10, vertical: 0),\r\n-      textStyle: TextStyle(\r\n-        fontSize: _fontSize,\r\n-        //height: 1\r\n+          boxShadow: [\r\n+            BoxShadow(\r\n+              color: Color.fromRGBO(139, 139, 142, 0.16),\r\n+              spreadRadius: 1,\r\n+              blurRadius: 1,\r\n+              offset: Offset(1.75, 3.5), // c\r\n+            )\r\n+          ],\r\n+        ), // This trailing comma makes auto-formatting nicer for build methods.\r\n       ),\r\n-      enabled: true,\r\n-      constraintSuggestion: true,\r\n-      suggestions: _withSuggesttions\r\n-          ? [\r\n-              \"One\",\r\n-              \"two\",\r\n-              \"android\",\r\n-              \"Dart\",\r\n-              \"flutter\",\r\n-              \"test\",\r\n-              \"tests\",\r\n-              \"androids\",\r\n-              \"androidsaaa\",\r\n-              \"Test\",\r\n-              \"suggest\",\r\n-              \"suggestions\",\r\n-              \"互联网\",\r\n-              \"last\",\r\n-              \"lest\",\r\n-              \"炫舞时代\"\r\n-            ]\r\n-          : null,\r\n-      onSubmitted: (String str) {\r\n-        setState(() {\r\n-          _items.add(str);\r\n-        });\r\n-      },\r\n     );\r\n   }\r\n-\r\n-  List<DropdownMenuItem> _buildItems() {\r\n-    List<DropdownMenuItem> list = [];\r\n-\r\n-    int count = 19;\r\n-\r\n-    list.add(\r\n-      DropdownMenuItem(\r\n-        child: Text(\"Not set\"),\r\n-        value: 0,\r\n-      ),\r\n-    );\r\n-\r\n-    for (int i = 1; i < count; i++)\r\n-      list.add(\r\n-        DropdownMenuItem(\r\n-          child: Text(i.toString()),\r\n-          value: i,\r\n-        ),\r\n-      );\r\n-\r\n-    return list;\r\n-  }\r\n-\r\n-  List<DropdownMenuItem> _buildItems2() {\r\n-    List<DropdownMenuItem> list = [];\r\n-\r\n-    list.add(DropdownMenuItem(\r\n-      child: Text(\"onlyText\"),\r\n-      value: 'onlyText',\r\n-    ));\r\n-\r\n-    list.add(DropdownMenuItem(\r\n-      child: Text(\"onlyIcon\"),\r\n-      value: 'onlyIcon',\r\n-    ));\r\n-    list.add(DropdownMenuItem(\r\n-      child: Text(\"onlyImage\"),\r\n-      value: 'onlyImage',\r\n-    ));\r\n-    list.add(DropdownMenuItem(\r\n-      child: Text(\"imageOrIconOrText\"),\r\n-      value: 'imageOrIconOrText',\r\n-    ));\r\n-    list.add(DropdownMenuItem(\r\n-      child: Text(\"withTextBefore\"),\r\n-      value: 'withTextBefore',\r\n-    ));\r\n-    list.add(DropdownMenuItem(\r\n-      child: Text(\"withTextAfter\"),\r\n-      value: 'withTextAfter',\r\n-    ));\r\n-\r\n-    return list;\r\n-  }\r\n-}\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1708612217154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,7 @@\n import 'package:flutter/material.dart';\r\n import 'package:simple_tags/simple_tags.dart';\r\n \r\n-void main() {\r\n-  runApp(MyApp());\r\n-}\r\n \r\n class MyApp extends StatelessWidget {\r\n   @override\r\n   Widget build(BuildContext context) {\r\n@@ -18,9 +15,9 @@\n   }\r\n }\r\n \r\n class SimpleTagExample extends StatefulWidget {\r\n-  SimpleTagExample({Key key, this.title}) : super(key: key);\r\n+  SimpleTagExample({Key? key, this.title}) : super(key: key);\r\n \r\n   final String title;\r\n   final List<String> content = [\r\n     'Apple',\r\n@@ -46,39 +43,8 @@\n     return Scaffold(\r\n       appBar: AppBar(\r\n         title: Text(widget.title),\r\n       ),\r\n-      body: SimpleTags(\r\n-        content: widget.content,\r\n-        wrapSpacing: 4,\r\n-        wrapRunSpacing: 4,\r\n-        onTagPress: (tag) {\r\n-          print('pressed $tag');\r\n-        },\r\n-        onTagLongPress: (tag) {\r\n-          print('long pressed $tag');\r\n-        },\r\n-        onTagDoubleTap: (tag) {\r\n-          print('double tapped $tag');\r\n-        },\r\n-        tagContainerPadding: EdgeInsets.all(6),\r\n-        tagTextStyle: TextStyle(color: Colors.deepPurple),\r\n-        tagIcon: Icon(Icons.clear, size: 12),\r\n-        tagContainerDecoration: BoxDecoration(\r\n-          color: Colors.white,\r\n-          border: Border.all(color: Colors.grey),\r\n-          borderRadius: BorderRadius.all(\r\n-            Radius.circular(20),\r\n-          ),\r\n-          boxShadow: [\r\n-            BoxShadow(\r\n-              color: Color.fromRGBO(139, 139, 142, 0.16),\r\n-              spreadRadius: 1,\r\n-              blurRadius: 1,\r\n-              offset: Offset(1.75, 3.5), // c\r\n-            )\r\n-          ],\r\n-        ), // This trailing comma makes auto-formatting nicer for build methods.\r\n-      ),\r\n+      body: \r\n     );\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1708612422713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,50 +1,38 @@\n+// ignore_for_file: public_member_api_docs, sort_constructors_first\r\n import 'package:flutter/material.dart';\r\n-import 'package:simple_tags/simple_tags.dart';\r\n \r\n+class SimpleTag extends StatelessWidget {\r\n+  final String text;\r\n+  final VoidCallback onPresse;\r\n+  final String buttonText;\r\n+  const SimpleTag({\r\n+    Key? key,\r\n+    required this.text,\r\n+    required this.onPresse,\r\n+    required this.buttonText,\r\n+  }) : super(key: key);\r\n \r\n-class MyApp extends StatelessWidget {\r\n   @override\r\n   Widget build(BuildContext context) {\r\n-    return MaterialApp(\r\n-      title: 'Simple Tags Demo',\r\n-      theme: ThemeData(\r\n-        primarySwatch: Colors.blue,\r\n-      ),\r\n-      home: SimpleTagExample(title: 'Simple Tags Demo'),\r\n+    return Row(\r\n+      mainAxisAlignment: MainAxisAlignment.center,\r\n+      children: [\r\n+        Text(\r\n+          text,\r\n+          style:\r\n+              const TextStyle(fontWeight: FontWeight.w500, letterSpacing: 0.5),\r\n+        ),\r\n+        const SizedBox(\r\n+          width: 4,\r\n+        ),\r\n+        TextButton(\r\n+          onPressed: onPresse,\r\n+          child: Text(\r\n+            buttonText,\r\n+            style: const TextStyle(letterSpacing: 0.7),\r\n+          ),\r\n+        ),\r\n+      ],\r\n     );\r\n   }\r\n }\r\n-\r\n-class SimpleTagExample extends StatefulWidget {\r\n-  SimpleTagExample({Key? key, this.title}) : super(key: key);\r\n-\r\n-  final String title;\r\n-  final List<String> content = [\r\n-    'Apple',\r\n-    'Banana',\r\n-    'Orange',\r\n-    'Pomme',\r\n-    'Carambola',\r\n-    'Cherries',\r\n-    'Date Fruit',\r\n-    'A Fruit with a really long name',\r\n-    'A Fruit with a really, really, really, really, very, very, very, very long name',\r\n-    'Durian',\r\n-    'Grapefruit'\r\n-  ];\r\n-\r\n-  @override\r\n-  _SimpleTagExampleState createState() => _SimpleTagExampleState();\r\n-}\r\n-\r\n-class _SimpleTagExampleState extends State<SimpleTagExample> {\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return Scaffold(\r\n-      appBar: AppBar(\r\n-        title: Text(widget.title),\r\n-      ),\r\n-      body: \r\n-    );\r\n-  }\r\n-}\r\n"
                }
            ],
            "date": 1708611484063,
            "name": "Commit-0",
            "content": "\r\nimport 'package:flutter_tags/flutter_tags.dart';\r\n.\r\n.\r\n.\r\nList _items;\r\ndouble _fontSize = 14;\r\n\r\n@override\r\nvoid initState(){\r\n    super.initState();\r\n    // if you store data on a local database (sqflite), then you could do something like this\r\n    Model().getItems().then((items){\r\n            _items = items;\r\n        });\r\n}\r\n\r\n@override\r\nWidget build(BuildContext context) {\r\n    return Tags(\r\n      key:_tagStateKey,\r\n      textField: TagsTextField(\r\n        textStyle: TextStyle(fontSize: _fontSize),\r\n        constraintSuggestion: true, suggestions: [],\r\n        //width: double.infinity, padding: EdgeInsets.symmetric(horizontal: 10),\r\n        onSubmitted: (String str) {\r\n          // Add item to the data source.\r\n          setState(() {\r\n              // required\r\n            _items.add(str);\r\n          });\r\n        },\r\n      ),\r\n      itemCount: _items.length, // required\r\n      itemBuilder: (int index){          \r\n            final item = _items[index];\r\n    \r\n            return ItemTags(\r\n                  // Each ItemTags must contain a Key. Keys allow Flutter to\r\n                  // uniquely identify widgets.\r\n                  key: Key(index.toString()),\r\n                  index: index, // required\r\n                  title: item.title,\r\n                  active: item.active,\r\n                  customData: item.customData,\r\n                  textStyle: TextStyle( fontSize: _fontSize, ),\r\n                  combine: ItemTagsCombine.withTextBefore,\r\n                  image: ItemTagsImage(\r\n                    image: AssetImage(\"img.jpg\") // OR NetworkImage(\"https://...image.png\")\r\n                  ), // OR null,\r\n                  icon: ItemTagsIcon(\r\n                    icon: Icons.add,\r\n                  ), // OR null,\r\n                  removeButton: ItemTagsRemoveButton(\r\n                    onRemoved: (){\r\n                        // Remove the item from the data source.\r\n                        setState(() {\r\n                            // required\r\n                            _items.removeAt(index);\r\n                        });\r\n                        //required\r\n                        return true;\r\n                    },\r\n                  ), // OR null,\r\n                  onPressed: (item) => print(item),\r\n                  onLongPressed: (item) => print(item),\r\n            );\r\n    \r\n      },\r\n    );    \r\n}\r\n\r\nfinal GlobalKey<TagsState> _tagStateKey = GlobalKey<TagsState>();\r\n// Allows you to get a list of all the ItemTags\r\n_getAllItem(){\r\n    List<Item> lst = _tagStateKey.currentState?.getAllItem;\r\n    if(lst!=null)\r\n        lst.where((a) => a.active==true).forEach( ( a) => print(a.title));        \r\n}"
        }
    ]
}