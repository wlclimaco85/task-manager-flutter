{
    "sourceFile": "lib/ui/widgets/data_picker_core.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1709245391159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1709245565680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,11 +50,8 @@\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return CupertinoPageScaffold(\r\n-      navigationBar: const CupertinoNavigationBar(\r\n-        middle: Text('CupertinoDatePicker Sample'),\r\n-      ),\r\n       child: DefaultTextStyle(\r\n         style: TextStyle(\r\n           color: CupertinoColors.label.resolveFrom(context),\r\n           fontSize: 22.0,\r\n"
                },
                {
                    "date": 1709245582235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,9 @@\n                     // In this example, the date is formatted manually. You can\r\n                     // use the intl package to format the value based on the\r\n                     // user's locale settings.\r\n                     child: Text(\r\n-                      '${date.month}-${date.day}-${date.year}',\r\n+                      '${date.month}/${date.day}/${date.year}',\r\n                       style: const TextStyle(\r\n                         fontSize: 22.0,\r\n                       ),\r\n                     ),\r\n"
                },
                {
                    "date": 1709245605543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,9 @@\n                     // In this example, the time value is formatted manually. You\r\n                     // can use the intl package to format the value based on the\r\n                     // user's locale settings.\r\n                     child: Text(\r\n-                      '${dateTime.month}-${dateTime.day}-${dateTime.year} ${dateTime.hour}:${dateTime.minute}',\r\n+                      '${dateTime.month}/${dateTime.day}/${dateTime.year} ${dateTime.hour}:${dateTime.minute}',\r\n                       style: const TextStyle(\r\n                         fontSize: 22.0,\r\n                       ),\r\n                     ),\r\n"
                },
                {
                    "date": 1709245736266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import 'package:flutter/cupertino.dart';\r\n+import 'package:flutter/material.dart';\r\n \r\n class DatePickerApp extends StatelessWidget {\r\n   const DatePickerApp({super.key});\r\n \r\n@@ -66,8 +67,9 @@\n                   CupertinoButton(\r\n                     // Display a CupertinoDatePicker in date picker mode.\r\n                     onPressed: () => _showDialog(\r\n                       CupertinoDatePicker(\r\n+                        backgroundColor : Colors.amber,\r\n                         initialDateTime: date,\r\n                         mode: CupertinoDatePickerMode.date,\r\n                         use24hFormat: true,\r\n                         // This shows day of week alongside day of month\r\n"
                },
                {
                    "date": 1709245820459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n                   CupertinoButton(\r\n                     // Display a CupertinoDatePicker in date picker mode.\r\n                     onPressed: () => _showDialog(\r\n                       CupertinoDatePicker(\r\n-                        backgroundColor: Colors.amber,\r\n+                        backgroundColor: Color(0xFFFA903A),\r\n                         initialDateTime: date,\r\n                         mode: CupertinoDatePickerMode.date,\r\n                         use24hFormat: true,\r\n                         // This shows day of week alongside day of month\r\n"
                }
            ],
            "date": 1709245391159,
            "name": "Commit-0",
            "content": "import 'package:flutter/cupertino.dart';\r\n\r\nclass DatePickerApp extends StatelessWidget {\r\n  const DatePickerApp({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return const CupertinoApp(\r\n      theme: CupertinoThemeData(brightness: Brightness.light),\r\n      home: DatePickerExample(),\r\n    );\r\n  }\r\n}\r\n\r\nclass DatePickerExample extends StatefulWidget {\r\n  const DatePickerExample({super.key});\r\n\r\n  @override\r\n  State<DatePickerExample> createState() => _DatePickerExampleState();\r\n}\r\n\r\nclass _DatePickerExampleState extends State<DatePickerExample> {\r\n  DateTime date = DateTime(2016, 10, 26);\r\n  DateTime time = DateTime(2016, 5, 10, 22, 35);\r\n  DateTime dateTime = DateTime(2016, 8, 3, 17, 45);\r\n\r\n  // This function displays a CupertinoModalPopup with a reasonable fixed height\r\n  // which hosts CupertinoDatePicker.\r\n  void _showDialog(Widget child) {\r\n    showCupertinoModalPopup<void>(\r\n      context: context,\r\n      builder: (BuildContext context) => Container(\r\n        height: 216,\r\n        padding: const EdgeInsets.only(top: 6.0),\r\n        // The Bottom margin is provided to align the popup above the system\r\n        // navigation bar.\r\n        margin: EdgeInsets.only(\r\n          bottom: MediaQuery.of(context).viewInsets.bottom,\r\n        ),\r\n        // Provide a background color for the popup.\r\n        color: CupertinoColors.systemBackground.resolveFrom(context),\r\n        // Use a SafeArea widget to avoid system overlaps.\r\n        child: SafeArea(\r\n          top: false,\r\n          child: child,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return CupertinoPageScaffold(\r\n      navigationBar: const CupertinoNavigationBar(\r\n        middle: Text('CupertinoDatePicker Sample'),\r\n      ),\r\n      child: DefaultTextStyle(\r\n        style: TextStyle(\r\n          color: CupertinoColors.label.resolveFrom(context),\r\n          fontSize: 22.0,\r\n        ),\r\n        child: Center(\r\n          child: Column(\r\n            mainAxisAlignment: MainAxisAlignment.center,\r\n            children: <Widget>[\r\n              _DatePickerItem(\r\n                children: <Widget>[\r\n                  const Text('Date'),\r\n                  CupertinoButton(\r\n                    // Display a CupertinoDatePicker in date picker mode.\r\n                    onPressed: () => _showDialog(\r\n                      CupertinoDatePicker(\r\n                        initialDateTime: date,\r\n                        mode: CupertinoDatePickerMode.date,\r\n                        use24hFormat: true,\r\n                        // This shows day of week alongside day of month\r\n                        showDayOfWeek: true,\r\n                        // This is called when the user changes the date.\r\n                        onDateTimeChanged: (DateTime newDate) { \r\n                          setState(() => date = newDate);\r\n                        },\r\n                      ),\r\n                    ),\r\n                    // In this example, the date is formatted manually. You can\r\n                    // use the intl package to format the value based on the\r\n                    // user's locale settings.\r\n                    child: Text(\r\n                      '${date.month}-${date.day}-${date.year}',\r\n                      style: const TextStyle(\r\n                        fontSize: 22.0,\r\n                      ),\r\n                    ),\r\n                  ),\r\n                ],\r\n              ),\r\n              _DatePickerItem(\r\n                children: <Widget>[\r\n                  const Text('Time'),\r\n                  CupertinoButton(\r\n                    // Display a CupertinoDatePicker in time picker mode.\r\n                    onPressed: () => _showDialog(\r\n                      CupertinoDatePicker(\r\n                        initialDateTime: time,\r\n                        mode: CupertinoDatePickerMode.time,\r\n                        use24hFormat: true,\r\n                        // This is called when the user changes the time.\r\n                        onDateTimeChanged: (DateTime newTime) {\r\n                          setState(() => time = newTime);\r\n                        },\r\n                      ),\r\n                    ),\r\n                    // In this example, the time value is formatted manually.\r\n                    // You can use the intl package to format the value based on\r\n                    // the user's locale settings.\r\n                    child: Text(\r\n                      '${time.hour}:${time.minute}',\r\n                      style: const TextStyle(\r\n                        fontSize: 22.0,\r\n                      ),\r\n                    ),\r\n                  ),\r\n                ],\r\n              ),\r\n              _DatePickerItem(\r\n                children: <Widget>[\r\n                  const Text('DateTime'),\r\n                  CupertinoButton(\r\n                    // Display a CupertinoDatePicker in dateTime picker mode.\r\n                    onPressed: () => _showDialog(\r\n                      CupertinoDatePicker(\r\n                        initialDateTime: dateTime,\r\n                        use24hFormat: true,\r\n                        // This is called when the user changes the dateTime.\r\n                        onDateTimeChanged: (DateTime newDateTime) {\r\n                          setState(() => dateTime = newDateTime);\r\n                        },\r\n                      ),\r\n                    ),\r\n                    // In this example, the time value is formatted manually. You\r\n                    // can use the intl package to format the value based on the\r\n                    // user's locale settings.\r\n                    child: Text(\r\n                      '${dateTime.month}-${dateTime.day}-${dateTime.year} ${dateTime.hour}:${dateTime.minute}',\r\n                      style: const TextStyle(\r\n                        fontSize: 22.0,\r\n                      ),\r\n                    ),\r\n                  ),\r\n                ],\r\n              ),\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\n// This class simply decorates a row of widgets.\r\nclass _DatePickerItem extends StatelessWidget {\r\n  const _DatePickerItem({required this.children});\r\n\r\n  final List<Widget> children;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return DecoratedBox(\r\n      decoration: const BoxDecoration(\r\n        border: Border(\r\n          top: BorderSide(\r\n            color: CupertinoColors.inactiveGray,\r\n            width: 0.0,\r\n          ),\r\n          bottom: BorderSide(\r\n            color: CupertinoColors.inactiveGray,\r\n            width: 0.0,\r\n          ),\r\n        ),\r\n      ),\r\n      child: Padding(\r\n        padding: const EdgeInsets.symmetric(horizontal: 16.0),\r\n        child: Row(\r\n          mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n          children: children,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}