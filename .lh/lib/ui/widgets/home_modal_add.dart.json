{
    "sourceFile": "lib/ui/widgets/home_modal_add.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1706726694060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1706726753379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n import 'dart:io' as io;\r\n import 'package:dropdown_button2/dropdown_button2.dart';\r\n import 'package:task_manager_flutter/ui/widgets/custom_horario_box_form.dart';\r\n import 'package:task_manager_flutter/ui/widgets/custom_plano_box_form.dart';\r\n+import 'package:task_manager_flutter/ui/widgets/custom_check_box_form.dart';\r\n \r\n class HomeModalAdd extends StatefulWidget {\r\n   HomeModalAdd({super.key});\r\n   @override\r\n"
                },
                {
                    "date": 1706726993813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,17 +45,8 @@\n     'Masculino',\r\n     'Feminino',\r\n   ];\r\n \r\n-  var dias = [\r\n-    'Segunda',\r\n-    'Terça',\r\n-    'Quarta',\r\n-    'Quinta',\r\n-    'Sexta',\r\n-    'Sabado',\r\n-    'Domingo',\r\n-  ];\r\n   List<String> sexoSelectedItems = [];\r\n \r\n   List<String> diasSelectedItems = [];\r\n \r\n"
                },
                {
                    "date": 1706727546432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,10 +47,10 @@\n   ];\r\n \r\n   List<String> sexoSelectedItems = [];\r\n \r\n-  List<String> diasSelectedItems = [];\r\n \r\n+\r\n   @override\r\n   void initState() {\r\n     _formKey = GlobalKey<FormState>();\r\n     _focusNode = FocusNode();\r\n@@ -105,9 +105,9 @@\n     NumberToDay myObjectInstance = NumberToDay();\r\n     List<Map<String, dynamic>> dayName = myObjectInstance.test();\r\n \r\n     GetDiasSemana myObjectInstances = GetDiasSemana();\r\n-    List<Map<String, dynamic>> dayNames = myObjectInstance.test();\r\n+    List<Map<String, dynamic>> dayNames = myObjectInstances.test();\r\n \r\n     for (var element in sexoSelectedItems) {}\r\n     Map<String, dynamic> requestBody = {\r\n       \"cref\": _numCREFController.text.trim(),\r\n"
                },
                {
                    "date": 1706728863643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,13 +244,8 @@\n                       value: true,\r\n                       label: \"Sim\",\r\n                       leadingCheckbox: false,\r\n                       onChanged: null),\r\n-                  const LabeledCheckbox(\r\n-                      value: true,\r\n-                      label: \"Não\",\r\n-                      leadingCheckbox: true,\r\n-                      onChanged: null),\r\n                   Padding(\r\n                     padding: const EdgeInsets.symmetric(vertical: 3),\r\n                     child: Center(\r\n                       child: Column(\r\n"
                },
                {
                    "date": 1706728887363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,10 +47,8 @@\n   ];\r\n \r\n   List<String> sexoSelectedItems = [];\r\n \r\n-\r\n-\r\n   @override\r\n   void initState() {\r\n     _formKey = GlobalKey<FormState>();\r\n     _focusNode = FocusNode();\r\n"
                },
                {
                    "date": 1706825956742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,8 +83,32 @@\n       print(response.exception);\r\n     }\r\n   }\r\n \r\n+  String MapToJson(List<Map<String, dynamic>> map) {\r\n+   String res = \"[\";\r\n+\r\n+  for (var s in map) {\r\n+   res += \"{\";\r\n+\r\n+    for (String k in s.keys) {\r\n+     res += '\"';\r\n+  res += k;\r\n+  res += '\":\"';\r\n+  res += s[k].toString();\r\n+  res += '\",';\r\n+}\r\n+res = res.substring(0, res.length - 1);\r\n+\r\n+res += \"},\";\r\n+res = res.substring(0, res.length - 1);\r\n+  }\r\n+\r\n+ res += \"]\";\r\n+\r\n+ return res;\r\n+   }\r\n+\r\n   Future<void> updateProfile() async {\r\n     _signUpInProgress = true;\r\n     if (mounted) {\r\n       setState(() {});\r\n"
                },
                {
                    "date": 1706825999581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,8 +126,10 @@\n     }\r\n     NumberToDay myObjectInstance = NumberToDay();\r\n     List<Map<String, dynamic>> dayName = myObjectInstance.test();\r\n \r\n+    String aa = MapToJson(dayName);\r\n+\r\n     GetDiasSemana myObjectInstances = GetDiasSemana();\r\n     List<Map<String, dynamic>> dayNames = myObjectInstances.test();\r\n \r\n     for (var element in sexoSelectedItems) {}\r\n"
                },
                {
                    "date": 1706826014545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,8 +131,10 @@\n \r\n     GetDiasSemana myObjectInstances = GetDiasSemana();\r\n     List<Map<String, dynamic>> dayNames = myObjectInstances.test();\r\n \r\n+    String bb = MapToJson(dayNames);\r\n+\r\n     for (var element in sexoSelectedItems) {}\r\n     Map<String, dynamic> requestBody = {\r\n       \"cref\": _numCREFController.text.trim(),\r\n       \"vlrAula\": _vlrAulaController.text.trim(),\r\n"
                },
                {
                    "date": 1706826156370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,9 +145,11 @@\n         \"email\": _emailController.text.trim(),\r\n         \"tipoAluno\": 2,\r\n         \"photo\": \"data:image/png;base64,\" + base64Imagess,\r\n         \"sexo\": sexoSelectedItems.join(', ').toString(),\r\n-        \"diaSemana\": diasSelectedItems.join(', ').toString()\r\n+        \"diaSemana\": diasSelectedItems.join(', ').toString(),\r\n+        \"horarios\" : bb,\r\n+        \"planos\" : aa\r\n       }\r\n     };\r\n \r\n     final NetworkResponse response =\r\n"
                },
                {
                    "date": 1706826281966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,11 +146,11 @@\n         \"tipoAluno\": 2,\r\n         \"photo\": \"data:image/png;base64,\" + base64Imagess,\r\n         \"sexo\": sexoSelectedItems.join(', ').toString(),\r\n         \"diaSemana\": diasSelectedItems.join(', ').toString(),\r\n-        \"horarios\": bb,\r\n+      },\r\n+      \"horarios\": bb,\r\n         \"planos\": aa\r\n-      }\r\n     };\r\n \r\n     final NetworkResponse response =\r\n         await NetworkCaller().postRequest(ApiLinks.insertPersonal, requestBody);\r\n"
                },
                {
                    "date": 1706826663515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,12 +147,12 @@\n         \"photo\": \"data:image/png;base64,\" + base64Imagess,\r\n         \"sexo\": sexoSelectedItems.join(', ').toString(),\r\n         \"diaSemana\": diasSelectedItems.join(', ').toString(),\r\n       },\r\n-      \"horarios\": bb,\r\n+\r\n       \"planos\": aa\r\n     };\r\n-\r\n+    //      \"horarios\": bb,\r\n     final NetworkResponse response =\r\n         await NetworkCaller().postRequest(ApiLinks.insertPersonal, requestBody);\r\n     _signUpInProgress = false;\r\n     if (mounted) {\r\n"
                }
            ],
            "date": 1706726694060,
            "name": "Commit-0",
            "content": "import 'dart:typed_data';\r\n\r\nimport 'package:flutter/material.dart';\r\nimport 'package:task_manager_flutter/ui/widgets/custom_button.dart';\r\nimport 'package:task_manager_flutter/ui/widgets/custom_text_form_field.dart';\r\nimport 'package:task_manager_flutter/ui/widgets/screen_background.dart';\r\nimport 'package:task_manager_flutter/ui/widgets/user_banners.dart';\r\nimport 'home_list_model.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:image_picker/image_picker.dart';\r\nimport 'package:task_manager_flutter/ui/screens/update_profile.dart';\r\nimport 'package:task_manager_flutter/ui/widgets/custom_input_form.dart';\r\nimport 'package:task_manager_flutter/ui/widgets/custom_plano_box_form.dart';\r\nimport 'package:task_manager_flutter/ui/widgets/custom_combo_box_form_2.dart';\r\nimport 'package:task_manager_flutter/data/utils/personal_validation.dart';\r\nimport 'package:task_manager_flutter/data/constants/custom_colors.dart';\r\nimport 'package:task_manager_flutter/data/models/network_response.dart';\r\nimport 'package:task_manager_flutter/data/services/network_caller.dart';\r\nimport 'package:task_manager_flutter/data/utils/api_links.dart';\r\nimport 'package:http/http.dart' as http;\r\nimport 'dart:convert';\r\nimport 'dart:convert' show utf8;\r\nimport 'dart:io' as io;\r\nimport 'package:dropdown_button2/dropdown_button2.dart';\r\nimport 'package:task_manager_flutter/ui/widgets/custom_horario_box_form.dart';\r\nimport 'package:task_manager_flutter/ui/widgets/custom_plano_box_form.dart';\r\n\r\nclass HomeModalAdd extends StatefulWidget {\r\n  HomeModalAdd({super.key});\r\n  @override\r\n  State<HomeModalAdd> createState() => _HomeModalAddState();\r\n}\r\n\r\nclass _HomeModalAddState extends State<HomeModalAdd> {\r\n  final TextEditingController _nameController = TextEditingController();\r\n\r\n  late GlobalKey<FormState> _formKey;\r\n  late FocusNode _focusNode;\r\n  XFile? pickImage;\r\n  String? base64Image;\r\n  bool _signUpInProgress = false;\r\n  // List of items in our dropdown menu\r\n  var sexo = [\r\n    'Masculino',\r\n    'Feminino',\r\n  ];\r\n\r\n  var dias = [\r\n    'Segunda',\r\n    'Terça',\r\n    'Quarta',\r\n    'Quinta',\r\n    'Sexta',\r\n    'Sabado',\r\n    'Domingo',\r\n  ];\r\n  List<String> sexoSelectedItems = [];\r\n\r\n  List<String> diasSelectedItems = [];\r\n\r\n  @override\r\n  void initState() {\r\n    _formKey = GlobalKey<FormState>();\r\n    _focusNode = FocusNode();\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _focusNode.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  final TextEditingController _nomeController = TextEditingController();\r\n  final TextEditingController _emailController = TextEditingController();\r\n  final TextEditingController _numCPFController = TextEditingController();\r\n  final TextEditingController _telefoneController = TextEditingController();\r\n  final TextEditingController _numCREFController = TextEditingController();\r\n  final TextEditingController _vlrAulaController = TextEditingController();\r\n\r\n  Future<List<int>> getLostData() async {\r\n    final ImagePicker picker = ImagePicker();\r\n    final LostDataResponse response = await picker.retrieveLostData();\r\n    final XFile? files = response.file;\r\n    final XFile? photo;\r\n    if (files != null) {\r\n      photo = await pickImage;\r\n      return files.readAsBytes();\r\n    } else {\r\n      const asciiDecoder = AsciiDecoder();\r\n      final asciiValues = [104, 101, 108, 108, 111];\r\n      return asciiValues;\r\n      print(response.exception);\r\n    }\r\n  }\r\n\r\n  Future<void> updateProfile() async {\r\n    _signUpInProgress = true;\r\n    if (mounted) {\r\n      setState(() {});\r\n    }\r\n    String base64Imagess = \"\";\r\n    if (pickImage != null) {\r\n      // var bytes = File(pickImage!.path).readAsBytesSync();\r\n      // String base64Image = base64Encode(bytes);\r\n      print('upload proccess started');\r\n      final bytess = io.File(pickImage!.path).readAsBytesSync();\r\n      //  List<int> imageBytes = pickImage?.readAsBytesSync();\r\n      // print(imageBytes);\r\n      //String base64Images = base64Encode(imageBytes);\r\n      base64Imagess = base64Encode(bytess);\r\n    }\r\n    NumberToDay myObjectInstance = NumberToDay();\r\n    List<Map<String, dynamic>> dayName = myObjectInstance.test();\r\n\r\n    GetDiasSemana myObjectInstances = GetDiasSemana();\r\n    List<Map<String, dynamic>> dayNames = myObjectInstance.test();\r\n\r\n    for (var element in sexoSelectedItems) {}\r\n    Map<String, dynamic> requestBody = {\r\n      \"cref\": _numCREFController.text.trim(),\r\n      \"vlrAula\": _vlrAulaController.text.trim(),\r\n      \"codDadosPessoal\": {\r\n        \"nome\": _nomeController.text.trim(),\r\n        \"cpf\": _numCPFController.text.trim(),\r\n        \"telefone1\": _telefoneController.text.trim(),\r\n        \"email\": _emailController.text.trim(),\r\n        \"tipoAluno\": 2,\r\n        \"photo\": \"data:image/png;base64,\" + base64Imagess,\r\n        \"sexo\": sexoSelectedItems.join(', ').toString(),\r\n        \"diaSemana\": diasSelectedItems.join(', ').toString()\r\n      }\r\n    };\r\n\r\n    final NetworkResponse response =\r\n        await NetworkCaller().postRequest(ApiLinks.insertPersonal, requestBody);\r\n    _signUpInProgress = false;\r\n    if (mounted) {\r\n      setState(() {});\r\n    }\r\n    if (response.isSuccess) {\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          const SnackBar(\r\n            content: Text(\"Profile update Successful\"),\r\n          ),\r\n        );\r\n      }\r\n    } else {\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          const SnackBar(\r\n            content: Text(\"Profile update Failed\"),\r\n          ),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: userBanner(context, onTapped: () {\r\n        Navigator.push(\r\n            context,\r\n            MaterialPageRoute(\r\n                builder: (context) => const UpdateProfileScreen()));\r\n      }),\r\n      body: Form(\r\n        key: _formKey,\r\n        child: Padding(\r\n          padding: const EdgeInsets.all(18),\r\n          child: Container(\r\n            alignment: Alignment.topCenter,\r\n            color: CustomColors().getAppFundoPage(),\r\n            child: SingleChildScrollView(\r\n              child: Column(\r\n                mainAxisAlignment: MainAxisAlignment.center,\r\n                children: <Widget>[\r\n                  CustomInputForm(\r\n                    validator: EmailValidator.validate,\r\n                    focusNode: _focusNode,\r\n                    type: TextInputType.text,\r\n                    keyField: \"Nome\",\r\n                    controller: _nomeController,\r\n                  ),\r\n                  CustomInputForm(\r\n                      validator: EmailValidator.validate,\r\n                      focusNode: _focusNode,\r\n                      type: TextInputType.number,\r\n                      keyField: \"Email\",\r\n                      controller: _emailController),\r\n                  CustomInputForm(\r\n                      validator: EmailValidator.validate,\r\n                      focusNode: _focusNode,\r\n                      type: TextInputType.number,\r\n                      keyField: \"CPF\",\r\n                      controller: _numCPFController),\r\n                  CustomInputForm(\r\n                      validator: EmailValidator.validate,\r\n                      focusNode: _focusNode,\r\n                      type: TextInputType.number,\r\n                      keyField: \"Telefone\",\r\n                      controller: _telefoneController),\r\n                  CustomInputForm(\r\n                      validator: EmailValidator.validate,\r\n                      focusNode: _focusNode,\r\n                      type: TextInputType.number,\r\n                      keyField: \"Numero CREF\",\r\n                      controller: _numCREFController),\r\n                  CustomInputForm(\r\n                      validator: EmailValidator.validate,\r\n                      focusNode: _focusNode,\r\n                      type: TextInputType.number,\r\n                      keyField: \"Vlr Aula\",\r\n                      controller: _vlrAulaController),\r\n                  InkWell(\r\n                    onTap: () {\r\n                      imagePicked();\r\n                    },\r\n                    child: Row(children: [\r\n                      Container(\r\n                        padding: const EdgeInsets.all(18),\r\n                        decoration: const BoxDecoration(\r\n                          color: Colors.grey,\r\n                          borderRadius: BorderRadius.only(\r\n                            topLeft: Radius.circular(8),\r\n                            bottomLeft: Radius.circular(8),\r\n                          ),\r\n                        ),\r\n                        child: const Text(\"Foto\"),\r\n                      ),\r\n                      Expanded(\r\n                        child: Container(\r\n                          padding: const EdgeInsets.all(18),\r\n                          decoration: BoxDecoration(\r\n                            color: CustomColors().getAppFundoImput(),\r\n                            borderRadius: const BorderRadius.only(\r\n                              topRight: Radius.circular(8),\r\n                              bottomRight: Radius.circular(8),\r\n                            ),\r\n                          ),\r\n                          child: Text(\r\n                            pickImage?.name ?? \"\",\r\n                            maxLines: 1,\r\n                            style: const TextStyle(\r\n                                overflow: TextOverflow.ellipsis),\r\n                          ),\r\n                        ),\r\n                      ),\r\n                    ]),\r\n                  ),\r\n                  const LabeledCheckbox(\r\n                      value: true,\r\n                      label: \"Sim\",\r\n                      leadingCheckbox: false,\r\n                      onChanged: null),\r\n                  const LabeledCheckbox(\r\n                      value: true,\r\n                      label: \"Não\",\r\n                      leadingCheckbox: true,\r\n                      onChanged: null),\r\n                  Padding(\r\n                    padding: const EdgeInsets.symmetric(vertical: 3),\r\n                    child: Center(\r\n                      child: Column(\r\n                        mainAxisAlignment: MainAxisAlignment.center,\r\n                        children: [\r\n                          DropdownButtonHideUnderline(\r\n                            child: DropdownButton2<String>(\r\n                              isExpanded: true,\r\n                              hint: Text(\r\n                                'Escolha o sexo atendimento',\r\n                                style: TextStyle(\r\n                                  fontSize: 14,\r\n                                  color: CustomColors().getAppLabelBotton(),\r\n                                ),\r\n                              ),\r\n                              items: dias.map((item) {\r\n                                return DropdownMenuItem(\r\n                                  value: item,\r\n                                  //disable default onTap to avoid closing menu when selecting an item\r\n                                  enabled: false,\r\n                                  child: StatefulBuilder(\r\n                                    builder: (context, menuSetState) {\r\n                                      final isSelected =\r\n                                          diasSelectedItems.contains(item);\r\n                                      return InkWell(\r\n                                        onTap: () {\r\n                                          isSelected\r\n                                              ? diasSelectedItems.remove(item)\r\n                                              : diasSelectedItems.add(item);\r\n                                          //This rebuilds the StatefulWidget to update the button's text\r\n                                          setState(() {});\r\n                                          //This rebuilds the dropdownMenu Widget to update the check mark\r\n                                          menuSetState(() {});\r\n                                        },\r\n                                        child: Container(\r\n                                          height: double.infinity,\r\n                                          padding: const EdgeInsets.symmetric(\r\n                                              horizontal: 16.0),\r\n                                          child: Row(\r\n                                            children: [\r\n                                              if (isSelected)\r\n                                                const Icon(\r\n                                                    Icons.check_box_outlined)\r\n                                              else\r\n                                                const Icon(Icons\r\n                                                    .check_box_outline_blank),\r\n                                              const SizedBox(width: 16),\r\n                                              Expanded(\r\n                                                child: Text(\r\n                                                  item,\r\n                                                  style: const TextStyle(\r\n                                                    fontSize: 14,\r\n                                                  ),\r\n                                                ),\r\n                                              ),\r\n                                            ],\r\n                                          ),\r\n                                        ),\r\n                                      );\r\n                                    },\r\n                                  ),\r\n                                );\r\n                              }).toList(),\r\n                              //Use last selected item as the current value so if we've limited menu height, it scroll to last item.\r\n                              value: diasSelectedItems.isEmpty\r\n                                  ? null\r\n                                  : diasSelectedItems.last,\r\n                              onChanged: (value) {},\r\n                              selectedItemBuilder: (context) {\r\n                                return diasSelectedItems.map(\r\n                                  (item) {\r\n                                    return Container(\r\n                                      alignment: AlignmentDirectional.center,\r\n                                      child: Text(\r\n                                        diasSelectedItems.join(', '),\r\n                                        style: const TextStyle(\r\n                                          fontSize: 14,\r\n                                          overflow: TextOverflow.ellipsis,\r\n                                        ),\r\n                                        maxLines: 1,\r\n                                      ),\r\n                                    );\r\n                                  },\r\n                                ).toList();\r\n                              },\r\n                              buttonStyleData: ButtonStyleData(\r\n                                height: 50,\r\n                                width: 160,\r\n                                padding:\r\n                                    const EdgeInsets.only(left: 14, right: 14),\r\n                                decoration: BoxDecoration(\r\n                                  borderRadius: BorderRadius.circular(14),\r\n                                  border: Border.all(\r\n                                    color: Colors.black26,\r\n                                  ),\r\n                                  color: CustomColors().getAppBotton(),\r\n                                ),\r\n                                elevation: 2,\r\n                              ),\r\n                              iconStyleData: const IconStyleData(\r\n                                icon: Icon(\r\n                                  Icons.arrow_forward_ios_outlined,\r\n                                ),\r\n                                iconSize: 14,\r\n                                iconEnabledColor: Colors.yellow,\r\n                                iconDisabledColor: Colors.grey,\r\n                              ),\r\n                              dropdownStyleData: DropdownStyleData(\r\n                                maxHeight: 200,\r\n                                width: 200,\r\n                                decoration: BoxDecoration(\r\n                                  borderRadius: BorderRadius.circular(14),\r\n                                  color: Colors.redAccent,\r\n                                ),\r\n                                offset: const Offset(-20, 0),\r\n                                scrollbarTheme: ScrollbarThemeData(\r\n                                  radius: const Radius.circular(40),\r\n                                  thickness: MaterialStateProperty.all(6),\r\n                                  thumbVisibility:\r\n                                      MaterialStateProperty.all(true),\r\n                                ),\r\n                              ),\r\n                              menuItemStyleData: const MenuItemStyleData(\r\n                                height: 40,\r\n                                padding: EdgeInsets.only(left: 14, right: 14),\r\n                              ),\r\n                            ),\r\n                          ),\r\n                        ],\r\n                      ),\r\n                    ),\r\n                  ),\r\n                  CustomComboBoxForm(),\r\n                  CustomDiasBoxForm(),\r\n                ],\r\n              ),\r\n            ),\r\n          ),\r\n        ),\r\n      ),\r\n      floatingActionButton: FloatingActionButton(\r\n        onPressed: () {\r\n          final _form = _formKey.currentState!;\r\n          _form.validate();\r\n          _focusNode.requestFocus();\r\n          updateProfile();\r\n        },\r\n        child: Icon(Icons.check),\r\n      ),\r\n    );\r\n  }\r\n\r\n  void imagePicked() async {\r\n    showDialog(\r\n        context: context,\r\n        builder: (context) {\r\n          return AlertDialog(\r\n            title: const Text('Pick Image From:'),\r\n            content: Column(\r\n              mainAxisSize: MainAxisSize.min,\r\n              children: [\r\n                ListTile(\r\n                  onTap: () async {\r\n                    pickImage = await ImagePicker()\r\n                        .pickImage(source: ImageSource.camera);\r\n                    if (pickImage != null) {\r\n                      setState(() {});\r\n                      if (mounted) {\r\n                        Navigator.pop(context);\r\n                      }\r\n                    } else {}\r\n                  },\r\n                  leading: const Icon(Icons.camera),\r\n                  title: const Text('Camera'),\r\n                ),\r\n                ListTile(\r\n                  leading: const Icon(Icons.image),\r\n                  onTap: () async {\r\n                    pickImage = await ImagePicker()\r\n                        .pickImage(source: ImageSource.gallery);\r\n                    if (pickImage != null) {\r\n                      setState(() {});\r\n                      if (mounted) {\r\n                        Navigator.pop(context);\r\n                      }\r\n                    } else {}\r\n                  },\r\n                  title: const Text('Gallery'),\r\n                )\r\n              ],\r\n            ),\r\n          );\r\n        });\r\n  }\r\n}\r\n"
        }
    ]
}