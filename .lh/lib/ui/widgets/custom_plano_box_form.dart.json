{
    "sourceFile": "lib/ui/widgets/custom_plano_box_form.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1706728723561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1706728737154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,9 @@\n               const SizedBox(height: 19),\r\n               const Text('Planos',\r\n                   style: TextStyle(\r\n                       fontWeight: FontWeight.bold,\r\n-                      color: Colors.black45,\r\n+                      color: Colors.black,\r\n                       fontSize: 22)),\r\n               const SizedBox(height: 20),\r\n               ...List.generate(_formCount, (index) => form(index)),\r\n               buttonRow(),\r\n"
                },
                {
                    "date": 1706728753124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,9 @@\n               const SizedBox(height: 19),\r\n               const Text('Planos',\r\n                   style: TextStyle(\r\n                       fontWeight: FontWeight.bold,\r\n-                      color: Colors.black,\r\n+                      color: Colors.teal,\r\n                       fontSize: 22)),\r\n               const SizedBox(height: 20),\r\n               ...List.generate(_formCount, (index) => form(index)),\r\n               buttonRow(),\r\n"
                },
                {
                    "date": 1706728765575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,9 @@\n               const SizedBox(height: 19),\r\n               const Text('Planos',\r\n                   style: TextStyle(\r\n                       fontWeight: FontWeight.bold,\r\n-                      color: Colors.teal,\r\n+                      color: Colors.black45,\r\n                       fontSize: 22)),\r\n               const SizedBox(height: 20),\r\n               ...List.generate(_formCount, (index) => form(index)),\r\n               buttonRow(),\r\n"
                },
                {
                    "date": 1706728790589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,9 @@\n               const SizedBox(height: 19),\r\n               const Text('Planos',\r\n                   style: TextStyle(\r\n                       fontWeight: FontWeight.bold,\r\n-                      color: Colors.black45,\r\n+                      color: Colors.black87,\r\n                       fontSize: 22)),\r\n               const SizedBox(height: 20),\r\n               ...List.generate(_formCount, (index) => form(index)),\r\n               buttonRow(),\r\n"
                },
                {
                    "date": 1706827916300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n           color: CustomColors().getAppFundoClaro(),\r\n           child: Column(\r\n             mainAxisAlignment: MainAxisAlignment.center,\r\n             children: <Widget>[\r\n-              imput(key, \"Titulo Plano\", null, TextInputType.text, 'titulo'),\r\n+              imput(key, \"Titulo Plano\", null, TextInputType.text, 'nome'),\r\n               imput(key, \"Detalhe do Plano\", 5, TextInputType.multiline,\r\n                   'descricao'),\r\n               imput(key, \"Qnt. Aula Mês *dias\", null, TextInputType.number,\r\n                   'qtdAula'),\r\n"
                }
            ],
            "date": 1706728723561,
            "name": "Commit-0",
            "content": "// Copyright 2019 Aleksander Woźniak\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport 'package:flutter/material.dart';\r\nimport 'package:task_manager_flutter/data/utils/ensure_visible_when_focused.dart';\r\nimport 'package:task_manager_flutter/data/constants/custom_colors.dart';\r\n\r\nimport 'package:dropdown_button2/dropdown_button2.dart';\r\n\r\nfinal List<Map<String, dynamic>> _dataArray = []; //add this\r\nString? _data = \"\"; //add this\r\n\r\nclass NumberToDay {\r\n  test() {\r\n    return _dataArray;\r\n  }\r\n}\r\n\r\nclass CustomComboBoxForm extends StatefulWidget {\r\n  const CustomComboBoxForm({super.key});\r\n\r\n  @override\r\n  State<CustomComboBoxForm> createState() => _CustomComboBoxForm();\r\n}\r\n\r\nclass _CustomComboBoxForm extends State<CustomComboBoxForm> {\r\n  int _formCount = 0; //add this\r\n\r\n  late FocusNode _focusNode;\r\n\r\n  @override\r\n  void initState() {\r\n    _focusNode = FocusNode();\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _focusNode.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  void _onUpdate(int key, String value, chave) {\r\n    void addData() {\r\n      Map<String, dynamic> json = {\r\n        'id': key,\r\n        chave: value,\r\n        chave: value,\r\n        chave: value,\r\n        chave: value\r\n      };\r\n      _dataArray.add(json);\r\n      setState(() {\r\n        _data = _dataArray.toString();\r\n      });\r\n    }\r\n\r\n    if (_dataArray.isEmpty) {\r\n      addData();\r\n    } else {\r\n      _dataArray.asMap().entries.map((entry) {\r\n        if (entry.key == key && entry.value == chave) {\r\n          _dataArray[key][chave] = value;\r\n        }\r\n        print(entry.key);\r\n        print(entry.value);\r\n      });\r\n\r\n      for (var map in _dataArray) {\r\n        if (map[\"id\"] == key) {\r\n          _dataArray[key][chave] = value;\r\n          setState(() {\r\n            _data = _dataArray.toString();\r\n          });\r\n          break;\r\n        }\r\n      }\r\n\r\n      for (var map in _dataArray) {\r\n        if (map[\"id\"] == key) {\r\n          return;\r\n        }\r\n      }\r\n      addData();\r\n    }\r\n  }\r\n\r\n  Widget imput(int key, String hit, int? maxLine, TextInputType tipo, chave) =>\r\n      Padding(\r\n        padding: const EdgeInsets.symmetric(vertical: 2, horizontal: 10),\r\n        child: Column(\r\n          children: <Widget>[\r\n            TextFormField(\r\n              //    controller: controller,\r\n              maxLines: maxLine,\r\n              key: Key('$hit ${key + 1}'),\r\n              //    focusNode: _focusNode,\r\n              keyboardType: tipo ?? TextInputType.text,\r\n              decoration: InputDecoration(\r\n                fillColor: CustomColors().getAppFundoImput(),\r\n                filled: true,\r\n                border: const OutlineInputBorder(\r\n                  borderRadius: BorderRadius.all(\r\n                    Radius.circular(8.0),\r\n                  ),\r\n                  borderSide: BorderSide(\r\n                    color: Colors.yellow,\r\n                    width: 3.0,\r\n                  ),\r\n                ),\r\n                labelStyle: const TextStyle(color: Colors.red, fontSize: 16.0),\r\n                hintText: ' $hit ',\r\n              ),\r\n              onChanged: (val) => _onUpdate(key, val, chave),\r\n              //validator: validator,\r\n            ),\r\n          ],\r\n        ),\r\n      );\r\n\r\n  Widget form(int key) => Padding(\r\n        padding: const EdgeInsets.only(bottom: 15.0),\r\n        child: Container(\r\n          padding: EdgeInsets.zero,\r\n          color: CustomColors().getAppFundoClaro(),\r\n          child: Column(\r\n            mainAxisAlignment: MainAxisAlignment.center,\r\n            children: <Widget>[\r\n              imput(key, \"Titulo Plano\", null, TextInputType.text, 'titulo'),\r\n              imput(key, \"Detalhe do Plano\", 5, TextInputType.multiline,\r\n                  'descricao'),\r\n              imput(key, \"Qnt. Aula Mês *dias\", null, TextInputType.number,\r\n                  'qtdAula'),\r\n              imput(key, \"Valor Plano\", null, TextInputType.number, 'valor'),\r\n            ],\r\n          ),\r\n        ),\r\n      );\r\n\r\n  Widget buttonRow() => Row(\r\n        mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n        crossAxisAlignment: CrossAxisAlignment.center,\r\n        children: [\r\n          Visibility(\r\n            visible: _formCount > 0,\r\n            child: IconButton(\r\n                onPressed: () {\r\n                  if (_dataArray.isNotEmpty) {\r\n                    _dataArray.removeAt(_dataArray.length - 1);\r\n                  }\r\n                  setState(() {\r\n                    _data = _dataArray.toString();\r\n                    _formCount--;\r\n                  });\r\n                },\r\n                icon: CircleAvatar(\r\n                  backgroundColor: CustomColors().getAppBotton(),\r\n                  child: const Icon(\r\n                    Icons.remove,\r\n                  ),\r\n                )),\r\n          ),\r\n          IconButton(\r\n              onPressed: () {\r\n                setState(() => _formCount++);\r\n              },\r\n              icon: CircleAvatar(\r\n                backgroundColor: CustomColors().getAppBotton(),\r\n                child: const Icon(\r\n                  Icons.add,\r\n                ),\r\n              )),\r\n        ],\r\n      );\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final platform = Theme.of(context).platform;\r\n\r\n    return Padding(\r\n      padding: const EdgeInsets.symmetric(vertical: 3),\r\n      child: SingleChildScrollView(\r\n        child: Padding(\r\n          padding: const EdgeInsets.symmetric(horizontal: 25.0),\r\n          child: Column(\r\n            crossAxisAlignment: CrossAxisAlignment.center,\r\n            children: <Widget>[\r\n              const SizedBox(height: 19),\r\n              const Text('Planos',\r\n                  style: TextStyle(\r\n                      fontWeight: FontWeight.bold,\r\n                      color: Colors.black45,\r\n                      fontSize: 22)),\r\n              const SizedBox(height: 20),\r\n              ...List.generate(_formCount, (index) => form(index)),\r\n              buttonRow(),\r\n              const SizedBox(height: 10),\r\n              //   Visibility(visible: _dataArray.isNotEmpty, child: Text(_data!)),\r\n              const SizedBox(height: 30),\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}