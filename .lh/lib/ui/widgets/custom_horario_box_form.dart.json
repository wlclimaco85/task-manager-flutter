{
    "sourceFile": "lib/ui/widgets/custom_horario_box_form.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1706725808665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1706726666131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,79 +1,205 @@\n+// Copyright 2019 Aleksander Woźniak\r\n+// SPDX-License-Identifier: Apache-2.0\r\n+\r\n import 'package:flutter/material.dart';\r\n+import 'package:task_manager_flutter/data/utils/ensure_visible_when_focused.dart';\r\n+import 'package:task_manager_flutter/data/constants/custom_colors.dart';\r\n \r\n-class LabeledCheckbox extends StatefulWidget {\r\n-  final bool? value;\r\n-  final String label;\r\n-  final bool leadingCheckbox;\r\n-  final ValueChanged<bool?>? onChanged;\r\n+import 'package:dropdown_button2/dropdown_button2.dart';\r\n \r\n-  const LabeledCheckbox({\r\n-    Key? key,\r\n-    this.value,\r\n-    this.onChanged,\r\n-    this.label = '',\r\n-    this.leadingCheckbox = true,\r\n-  }) : super(key: key);\r\n+final List<Map<String, dynamic>> _dataArray = []; //add this\r\n+String? _data = \"\"; //add this\r\n \r\n+class NumberToDay {\r\n+  test() {\r\n+    return _dataArray;\r\n+  }\r\n+}\r\n+\r\n+class CustomComboBoxForm extends StatefulWidget {\r\n+  const CustomComboBoxForm({super.key});\r\n+\r\n   @override\r\n-  State<StatefulWidget> createState() => _LabeledCheckboxState();\r\n+  State<CustomComboBoxForm> createState() => _CustomComboBoxForm();\r\n }\r\n \r\n-class _LabeledCheckboxState extends State<LabeledCheckbox> {\r\n-  var value = false;\r\n+class _CustomComboBoxForm extends State<CustomComboBoxForm> {\r\n+  int _formCount = 0; //add this\r\n \r\n+  late FocusNode _focusNode;\r\n+\r\n   @override\r\n   void initState() {\r\n+    _focusNode = FocusNode();\r\n     super.initState();\r\n-    value = widget.value == true;\r\n   }\r\n \r\n   @override\r\n-  Widget build(BuildContext context) {\r\n-    var widgets = <Widget>[\r\n-      _buildCheckbox(context),\r\n-    ];\r\n-    if (widget.label.isNotEmpty) {\r\n-      if (widget.leadingCheckbox) {\r\n-        widgets.add(_buildLabel(context));\r\n-      } else {\r\n-        widgets.insert(0, _buildLabel(context));\r\n+  void dispose() {\r\n+    _focusNode.dispose();\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  void _onUpdate(int key, String value, chave) {\r\n+    void addData() {\r\n+      Map<String, dynamic> json = {\r\n+        'id': key,\r\n+        chave: value,\r\n+        chave: value,\r\n+        chave: value,\r\n+        chave: value\r\n+      };\r\n+      _dataArray.add(json);\r\n+      setState(() {\r\n+        _data = _dataArray.toString();\r\n+      });\r\n+    }\r\n+\r\n+    if (_dataArray.isEmpty) {\r\n+      addData();\r\n+    } else {\r\n+      _dataArray.asMap().entries.map((entry) {\r\n+        if (entry.key == key && entry.value == chave) {\r\n+          _dataArray[key][chave] = value;\r\n+        }\r\n+        print(entry.key);\r\n+        print(entry.value);\r\n+      });\r\n+\r\n+      for (var map in _dataArray) {\r\n+        if (map[\"id\"] == key) {\r\n+          _dataArray[key][chave] = value;\r\n+          setState(() {\r\n+            _data = _dataArray.toString();\r\n+          });\r\n+          break;\r\n+        }\r\n       }\r\n+\r\n+      for (var map in _dataArray) {\r\n+        if (map[\"id\"] == key) {\r\n+          return;\r\n+        }\r\n+      }\r\n+      addData();\r\n     }\r\n-    return InkWell(\r\n-      borderRadius: BorderRadius.circular(4),\r\n-      onTap: () => _onCheckedChanged(),\r\n-      child: Row(\r\n-        mainAxisSize: MainAxisSize.min,\r\n-        children: widgets,\r\n-      ),\r\n-    );\r\n   }\r\n \r\n-  Widget _buildCheckbox(BuildContext context) {\r\n-    return Checkbox(\r\n-      value: value,\r\n-      onChanged: (v) => _onCheckedChanged(),\r\n-    );\r\n-  }\r\n+  Widget imput(int key, String hit, int? maxLine, TextInputType tipo, chave) =>\r\n+      Padding(\r\n+        padding: const EdgeInsets.symmetric(vertical: 2, horizontal: 10),\r\n+        child: Column(\r\n+          children: <Widget>[\r\n+            TextFormField(\r\n+              //    controller: controller,\r\n+              maxLines: maxLine,\r\n+              key: Key('$hit ${key + 1}'),\r\n+              //    focusNode: _focusNode,\r\n+              keyboardType: tipo ?? TextInputType.text,\r\n+              decoration: InputDecoration(\r\n+                fillColor: CustomColors().getAppFundoImput(),\r\n+                filled: true,\r\n+                border: const OutlineInputBorder(\r\n+                  borderRadius: BorderRadius.all(\r\n+                    Radius.circular(8.0),\r\n+                  ),\r\n+                  borderSide: BorderSide(\r\n+                    color: Colors.yellow,\r\n+                    width: 3.0,\r\n+                  ),\r\n+                ),\r\n+                labelStyle: const TextStyle(color: Colors.red, fontSize: 16.0),\r\n+                hintText: ' $hit ',\r\n+              ),\r\n+              onChanged: (val) => _onUpdate(key, val, chave),\r\n+              //validator: validator,\r\n+            ),\r\n+          ],\r\n+        ),\r\n+      );\r\n \r\n-  Widget _buildLabel(BuildContext context) {\r\n-    var padding = widget.leadingCheckbox\r\n-        ? const EdgeInsets.only(right: 8)\r\n-        : const EdgeInsets.only(left: 8);\r\n+  Widget form(int key) => Padding(\r\n+        padding: const EdgeInsets.only(bottom: 15.0),\r\n+        child: Container(\r\n+          padding: EdgeInsets.zero,\r\n+          color: CustomColors().getAppFundoClaro(),\r\n+          child: Column(\r\n+            mainAxisAlignment: MainAxisAlignment.center,\r\n+            children: <Widget>[\r\n+              imput(key, \"Titulo Plano\", null, TextInputType.text, 'titulo'),\r\n+              imput(key, \"Detalhe do Plano\", 5, TextInputType.multiline,\r\n+                  'descricao'),\r\n+              imput(key, \"Qnt. Aula Mês *dias\", null, TextInputType.number,\r\n+                  'qtdAula'),\r\n+              imput(key, \"Valor Plano\", null, TextInputType.number, 'valor'),\r\n+            ],\r\n+          ),\r\n+        ),\r\n+      );\r\n \r\n+  Widget buttonRow() => Row(\r\n+        mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+        crossAxisAlignment: CrossAxisAlignment.center,\r\n+        children: [\r\n+          Visibility(\r\n+            visible: _formCount > 0,\r\n+            child: IconButton(\r\n+                onPressed: () {\r\n+                  if (_dataArray.isNotEmpty) {\r\n+                    _dataArray.removeAt(_dataArray.length - 1);\r\n+                  }\r\n+                  setState(() {\r\n+                    _data = _dataArray.toString();\r\n+                    _formCount--;\r\n+                  });\r\n+                },\r\n+                icon: CircleAvatar(\r\n+                  backgroundColor: CustomColors().getAppBotton(),\r\n+                  child: const Icon(\r\n+                    Icons.remove,\r\n+                  ),\r\n+                )),\r\n+          ),\r\n+          IconButton(\r\n+              onPressed: () {\r\n+                setState(() => _formCount++);\r\n+              },\r\n+              icon: CircleAvatar(\r\n+                backgroundColor: CustomColors().getAppBotton(),\r\n+                child: const Icon(\r\n+                  Icons.add,\r\n+                ),\r\n+              )),\r\n+        ],\r\n+      );\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    final platform = Theme.of(context).platform;\r\n \r\n     return Padding(\r\n-      padding: padding,\r\n-      child: Text(widget.label),\r\n+      padding: const EdgeInsets.symmetric(vertical: 3),\r\n+      child: SingleChildScrollView(\r\n+        child: Padding(\r\n+          padding: const EdgeInsets.symmetric(horizontal: 25.0),\r\n+          child: Column(\r\n+            crossAxisAlignment: CrossAxisAlignment.center,\r\n+            children: <Widget>[\r\n+              const SizedBox(height: 19),\r\n+              const Text('Planos',\r\n+                  style: TextStyle(\r\n+                      fontWeight: FontWeight.bold,\r\n+                      color: Colors.teal,\r\n+                      fontSize: 22)),\r\n+              const SizedBox(height: 20),\r\n+              ...List.generate(_formCount, (index) => form(index)),\r\n+              buttonRow(),\r\n+              const SizedBox(height: 10),\r\n+              //   Visibility(visible: _dataArray.isNotEmpty, child: Text(_data!)),\r\n+              const SizedBox(height: 30),\r\n+            ],\r\n+          ),\r\n+        ),\r\n+      ),\r\n     );\r\n   }\r\n-\r\n-  void _onCheckedChanged() {\r\n-    setState(() {\r\n-      value = !value;\r\n-    });\r\n-    if (widget.onChanged != null) {\r\n-      widget.onChanged!.call(value);\r\n-    }\r\n-  }\r\n }\r\n"
                },
                {
                    "date": 1706726716667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,22 +9,22 @@\n \r\n final List<Map<String, dynamic>> _dataArray = []; //add this\r\n String? _data = \"\"; //add this\r\n \r\n-class NumberToDay {\r\n+class GetDiasSemana {\r\n   test() {\r\n     return _dataArray;\r\n   }\r\n }\r\n \r\n-class CustomComboBoxForm extends StatefulWidget {\r\n-  const CustomComboBoxForm({super.key});\r\n+class CustomDiasBoxForm extends StatefulWidget {\r\n+  const CustomDiasBoxForm({super.key});\r\n \r\n   @override\r\n-  State<CustomComboBoxForm> createState() => _CustomComboBoxForm();\r\n+  State<CustomDiasBoxForm> createState() => _CustomDiasBoxForm();\r\n }\r\n \r\n-class _CustomComboBoxForm extends State<CustomComboBoxForm> {\r\n+class _CustomDiasBoxForm extends State<CustomDiasBoxForm> {\r\n   int _formCount = 0; //add this\r\n \r\n   late FocusNode _focusNode;\r\n \r\n"
                },
                {
                    "date": 1706726973734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,8 +84,138 @@\n       addData();\r\n     }\r\n   }\r\n \r\n+  Widget selected(\r\n+          int key, String hit, int? maxLine, TextInputType tipo, chave) =>\r\n+      Padding(\r\n+        padding: const EdgeInsets.symmetric(vertical: 3),\r\n+        child: Center(\r\n+          child: Column(\r\n+            mainAxisAlignment: MainAxisAlignment.center,\r\n+            children: [\r\n+              DropdownButtonHideUnderline(\r\n+                child: DropdownButton2<String>(\r\n+                  isExpanded: true,\r\n+                  hint: Text(\r\n+                    'Escolha o sexo atendimento',\r\n+                    style: TextStyle(\r\n+                      fontSize: 14,\r\n+                      color: CustomColors().getAppLabelBotton(),\r\n+                    ),\r\n+                  ),\r\n+                  items: dias.map((item) {\r\n+                    return DropdownMenuItem(\r\n+                      value: item,\r\n+                      //disable default onTap to avoid closing menu when selecting an item\r\n+                      enabled: false,\r\n+                      child: StatefulBuilder(\r\n+                        builder: (context, menuSetState) {\r\n+                          final isSelected = diasSelectedItems.contains(item);\r\n+                          return InkWell(\r\n+                            onTap: () {\r\n+                              isSelected\r\n+                                  ? diasSelectedItems.remove(item)\r\n+                                  : diasSelectedItems.add(item);\r\n+                              //This rebuilds the StatefulWidget to update the button's text\r\n+                              setState(() {});\r\n+                              //This rebuilds the dropdownMenu Widget to update the check mark\r\n+                              menuSetState(() {});\r\n+                            },\r\n+                            child: Container(\r\n+                              height: double.infinity,\r\n+                              padding:\r\n+                                  const EdgeInsets.symmetric(horizontal: 16.0),\r\n+                              child: Row(\r\n+                                children: [\r\n+                                  if (isSelected)\r\n+                                    const Icon(Icons.check_box_outlined)\r\n+                                  else\r\n+                                    const Icon(Icons.check_box_outline_blank),\r\n+                                  const SizedBox(width: 16),\r\n+                                  Expanded(\r\n+                                    child: Text(\r\n+                                      item,\r\n+                                      style: const TextStyle(\r\n+                                        fontSize: 14,\r\n+                                      ),\r\n+                                    ),\r\n+                                  ),\r\n+                                ],\r\n+                              ),\r\n+                            ),\r\n+                          );\r\n+                        },\r\n+                      ),\r\n+                    );\r\n+                  }).toList(),\r\n+                  //Use last selected item as the current value so if we've limited menu height, it scroll to last item.\r\n+                  value:\r\n+                      diasSelectedItems.isEmpty ? null : diasSelectedItems.last,\r\n+                  onChanged: (value) {},\r\n+                  selectedItemBuilder: (context) {\r\n+                    return diasSelectedItems.map(\r\n+                      (item) {\r\n+                        return Container(\r\n+                          alignment: AlignmentDirectional.center,\r\n+                          child: Text(\r\n+                            diasSelectedItems.join(', '),\r\n+                            style: const TextStyle(\r\n+                              fontSize: 14,\r\n+                              overflow: TextOverflow.ellipsis,\r\n+                            ),\r\n+                            maxLines: 1,\r\n+                          ),\r\n+                        );\r\n+                      },\r\n+                    ).toList();\r\n+                  },\r\n+                  buttonStyleData: ButtonStyleData(\r\n+                    height: 50,\r\n+                    width: 160,\r\n+                    padding: const EdgeInsets.only(left: 14, right: 14),\r\n+                    decoration: BoxDecoration(\r\n+                      borderRadius: BorderRadius.circular(14),\r\n+                      border: Border.all(\r\n+                        color: Colors.black26,\r\n+                      ),\r\n+                      color: CustomColors().getAppBotton(),\r\n+                    ),\r\n+                    elevation: 2,\r\n+                  ),\r\n+                  iconStyleData: const IconStyleData(\r\n+                    icon: Icon(\r\n+                      Icons.arrow_forward_ios_outlined,\r\n+                    ),\r\n+                    iconSize: 14,\r\n+                    iconEnabledColor: Colors.yellow,\r\n+                    iconDisabledColor: Colors.grey,\r\n+                  ),\r\n+                  dropdownStyleData: DropdownStyleData(\r\n+                    maxHeight: 200,\r\n+                    width: 200,\r\n+                    decoration: BoxDecoration(\r\n+                      borderRadius: BorderRadius.circular(14),\r\n+                      color: Colors.redAccent,\r\n+                    ),\r\n+                    offset: const Offset(-20, 0),\r\n+                    scrollbarTheme: ScrollbarThemeData(\r\n+                      radius: const Radius.circular(40),\r\n+                      thickness: MaterialStateProperty.all(6),\r\n+                      thumbVisibility: MaterialStateProperty.all(true),\r\n+                    ),\r\n+                  ),\r\n+                  menuItemStyleData: const MenuItemStyleData(\r\n+                    height: 40,\r\n+                    padding: EdgeInsets.only(left: 14, right: 14),\r\n+                  ),\r\n+                ),\r\n+              ),\r\n+            ],\r\n+          ),\r\n+        ),\r\n+      );\r\n+\r\n   Widget imput(int key, String hit, int? maxLine, TextInputType tipo, chave) =>\r\n       Padding(\r\n         padding: const EdgeInsets.symmetric(vertical: 2, horizontal: 10),\r\n         child: Column(\r\n"
                },
                {
                    "date": 1706727010149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,18 @@\n \r\n final List<Map<String, dynamic>> _dataArray = []; //add this\r\n String? _data = \"\"; //add this\r\n \r\n+  var dias = [\r\n+    'Segunda',\r\n+    'Terça',\r\n+    'Quarta',\r\n+    'Quinta',\r\n+    'Sexta',\r\n+    'Sabado',\r\n+    'Domingo',\r\n+  ];\r\n+\r\n class GetDiasSemana {\r\n   test() {\r\n     return _dataArray;\r\n   }\r\n"
                },
                {
                    "date": 1706727021228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,10 @@\n   'Sabado',\r\n   'Domingo',\r\n ];\r\n \r\n+List<String> diasSelectedItems = [];\r\n+\r\n class GetDiasSemana {\r\n   test() {\r\n     return _dataArray;\r\n   }\r\n"
                },
                {
                    "date": 1706727092382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -267,8 +267,9 @@\n           color: CustomColors().getAppFundoClaro(),\r\n           child: Column(\r\n             mainAxisAlignment: MainAxisAlignment.center,\r\n             children: <Widget>[\r\n+              selected(key, \"Titulo Plano\", null, TextInputType.text, 'titulo'),\r\n               imput(key, \"Titulo Plano\", null, TextInputType.text, 'titulo'),\r\n               imput(key, \"Detalhe do Plano\", 5, TextInputType.multiline,\r\n                   'descricao'),\r\n               imput(key, \"Qnt. Aula Mês *dias\", null, TextInputType.number,\r\n"
                }
            ],
            "date": 1706725808664,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\n\r\nclass LabeledCheckbox extends StatefulWidget {\r\n  final bool? value;\r\n  final String label;\r\n  final bool leadingCheckbox;\r\n  final ValueChanged<bool?>? onChanged;\r\n\r\n  const LabeledCheckbox({\r\n    Key? key,\r\n    this.value,\r\n    this.onChanged,\r\n    this.label = '',\r\n    this.leadingCheckbox = true,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  State<StatefulWidget> createState() => _LabeledCheckboxState();\r\n}\r\n\r\nclass _LabeledCheckboxState extends State<LabeledCheckbox> {\r\n  var value = false;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    value = widget.value == true;\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    var widgets = <Widget>[\r\n      _buildCheckbox(context),\r\n    ];\r\n    if (widget.label.isNotEmpty) {\r\n      if (widget.leadingCheckbox) {\r\n        widgets.add(_buildLabel(context));\r\n      } else {\r\n        widgets.insert(0, _buildLabel(context));\r\n      }\r\n    }\r\n    return InkWell(\r\n      borderRadius: BorderRadius.circular(4),\r\n      onTap: () => _onCheckedChanged(),\r\n      child: Row(\r\n        mainAxisSize: MainAxisSize.min,\r\n        children: widgets,\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildCheckbox(BuildContext context) {\r\n    return Checkbox(\r\n      value: value,\r\n      onChanged: (v) => _onCheckedChanged(),\r\n    );\r\n  }\r\n\r\n  Widget _buildLabel(BuildContext context) {\r\n    var padding = widget.leadingCheckbox\r\n        ? const EdgeInsets.only(right: 8)\r\n        : const EdgeInsets.only(left: 8);\r\n\r\n\r\n    return Padding(\r\n      padding: padding,\r\n      child: Text(widget.label),\r\n    );\r\n  }\r\n\r\n  void _onCheckedChanged() {\r\n    setState(() {\r\n      value = !value;\r\n    });\r\n    if (widget.onChanged != null) {\r\n      widget.onChanged!.call(value);\r\n    }\r\n  }\r\n}\r\n"
        }
    ]
}